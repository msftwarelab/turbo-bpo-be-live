// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/lonmarsDev/bpo-golang-grahpql/graphql/models"
	"github.com/vektah/gqlparser"
	"github.com/vektah/gqlparser/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Account struct {
		Answer1         func(childComplexity int) int
		Answer2         func(childComplexity int) int
		Answer3         func(childComplexity int) int
		Company         func(childComplexity int) int
		CreatedDateTime func(childComplexity int) int
		ID              func(childComplexity int) int
		LastUpdateTime  func(childComplexity int) int
		Logs            func(childComplexity int) int
		Others          func(childComplexity int) int
		Password        func(childComplexity int) int
		Question1       func(childComplexity int) int
		Question2       func(childComplexity int) int
		Question3       func(childComplexity int) int
		RecordType      func(childComplexity int) int
		Username        func(childComplexity int) int
		WebSite         func(childComplexity int) int
	}

	AccountResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Adjustment struct {
		Category func(childComplexity int) int
		From     func(childComplexity int) int
		ID       func(childComplexity int) int
		Label    func(childComplexity int) int
		Order    func(childComplexity int) int
		To       func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	Announcement struct {
		CreatedBy       func(childComplexity int) int
		CreatedDateTime func(childComplexity int) int
		EndDate         func(childComplexity int) int
		ID              func(childComplexity int) int
		Message         func(childComplexity int) int
		StartDate       func(childComplexity int) int
		Subject         func(childComplexity int) int
	}

	AnnouncementResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Balance struct {
		Client     func(childComplexity int) int
		Other      func(childComplexity int) int
		PaidAmount func(childComplexity int) int
		Total      func(childComplexity int) int
		Unpaid     func(childComplexity int) int
	}

	BalanceResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Billing struct {
		Date          func(childComplexity int) int
		DateFrom      func(childComplexity int) int
		DateTo        func(childComplexity int) int
		DueDate       func(childComplexity int) int
		Entries       func(childComplexity int) int
		ID            func(childComplexity int) int
		InvoiceNumber func(childComplexity int) int
		Status        func(childComplexity int) int
		UserID        func(childComplexity int) int
		UserName      func(childComplexity int) int
	}

	BillingEntry struct {
		Amount      func(childComplexity int) int
		Description func(childComplexity int) int
		OrderNumber func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	BillingResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Checkout struct {
		ClientName func(childComplexity int) int
		Date       func(childComplexity int) int
		Invoice    func(childComplexity int) int
		Status     func(childComplexity int) int
		Total      func(childComplexity int) int
		URL        func(childComplexity int) int
	}

	CheckoutResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Comment struct {
		Category        func(childComplexity int) int
		CreatedDateTime func(childComplexity int) int
		ID              func(childComplexity int) int
		Label           func(childComplexity int) int
		Section         func(childComplexity int) int
		Value           func(childComplexity int) int
	}

	Company struct {
		Forms     func(childComplexity int) int
		ID        func(childComplexity int) int
		IsAdmin   func(childComplexity int) int
		IsClient  func(childComplexity int) int
		IsPremium func(childComplexity int) int
		Name      func(childComplexity int) int
		WebSite   func(childComplexity int) int
	}

	CompanyForm struct {
		Name  func(childComplexity int) int
		Style func(childComplexity int) int
	}

	CompanyResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Credit struct {
		Amount          func(childComplexity int) int
		CreatedDateTime func(childComplexity int) int
		ID              func(childComplexity int) int
		PaypalOrderID   func(childComplexity int) int
		PaypalToken     func(childComplexity int) int
	}

	CreditLedger struct {
		Amount          func(childComplexity int) int
		Balance         func(childComplexity int) int
		ClientID        func(childComplexity int) int
		ClientName      func(childComplexity int) int
		CreatedDateTime func(childComplexity int) int
		ID              func(childComplexity int) int
		IformCharge     func(childComplexity int) int
		OrderAddress    func(childComplexity int) int
		OrderNumber     func(childComplexity int) int
		PaypalOrderID   func(childComplexity int) int
		Type            func(childComplexity int) int
	}

	CreditLedgerResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Credits struct {
		ClientName func(childComplexity int) int
		Credits    func(childComplexity int) int
		Date       func(childComplexity int) int
		ExpiresAt  func(childComplexity int) int
		Invoice    func(childComplexity int) int
	}

	CreditsResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Default struct {
		AlwayssubmitOrder              func(childComplexity int) int
		AutoCompleteStandbyOrder       func(childComplexity int) int
		Basement                       func(childComplexity int) int
		Condition                      func(childComplexity int) int
		Condo                          func(childComplexity int) int
		ExteriorFinish                 func(childComplexity int) int
		FirePlace                      func(childComplexity int) int
		InitialSearchAge               func(childComplexity int) int
		InitialSearchGla               func(childComplexity int) int
		InitialSearchProximity         func(childComplexity int) int
		IsEnableEmailNotification      func(childComplexity int) int
		ListingType                    func(childComplexity int) int
		MobileHome                     func(childComplexity int) int
		MultiUnit                      func(childComplexity int) int
		Pool                           func(childComplexity int) int
		PorchPatioDeck                 func(childComplexity int) int
		Quality                        func(childComplexity int) int
		SecondSearchAge                func(childComplexity int) int
		SecondSearchGla                func(childComplexity int) int
		SecondSearchProximity          func(childComplexity int) int
		SecondSearchSaleDates          func(childComplexity int) int
		SfaTownhouse                   func(childComplexity int) int
		Sfd                            func(childComplexity int) int
		StyleDesign                    func(childComplexity int) int
		SubjectType                    func(childComplexity int) int
		Theme                          func(childComplexity int) int
		ThirdSearchAge                 func(childComplexity int) int
		ThirdSearchFilterByCity        func(childComplexity int) int
		ThirdSearchFilterByComplexName func(childComplexity int) int
		ThirdSearchFilterByCountry     func(childComplexity int) int
		ThirdSearchFilterByZip         func(childComplexity int) int
		ThirdSearchGla                 func(childComplexity int) int
		ThirdSearchProximity           func(childComplexity int) int
		ThirdSearchSaleDates           func(childComplexity int) int
		UseDefaults                    func(childComplexity int) int
		UseIformValidations            func(childComplexity int) int
		View                           func(childComplexity int) int
	}

	Doc struct {
		CreatedDateTime func(childComplexity int) int
		FileName        func(childComplexity int) int
		ID              func(childComplexity int) int
		Type            func(childComplexity int) int
		URL             func(childComplexity int) int
	}

	EmailTemplate struct {
		ID       func(childComplexity int) int
		Message  func(childComplexity int) int
		Subject  func(childComplexity int) int
		Template func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	EmailTemplateResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Header struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	HeaderCode struct {
		Code  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	HeaderResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Iform struct {
		AdjustmentPrice                       func(childComplexity int) int
		AgeException                          func(childComplexity int) int
		BathException                         func(childComplexity int) int
		BedException                          func(childComplexity int) int
		CmbDemand                             func(childComplexity int) int
		CmbExtra                              func(childComplexity int) int
		CmbForm                               func(childComplexity int) int
		CmbForm2                              func(childComplexity int) int
		CmbHouse                              func(childComplexity int) int
		CmbIsListed                           func(childComplexity int) int
		CmbListComp1Basement                  func(childComplexity int) int
		CmbListComp1CommentType               func(childComplexity int) int
		CmbListComp1Condition                 func(childComplexity int) int
		CmbListComp1ExtFinish                 func(childComplexity int) int
		CmbListComp1Financing                 func(childComplexity int) int
		CmbListComp1Fireplace                 func(childComplexity int) int
		CmbListComp1Garage                    func(childComplexity int) int
		CmbListComp1IsFinished                func(childComplexity int) int
		CmbListComp1PercentFinished           func(childComplexity int) int
		CmbListComp1Pool                      func(childComplexity int) int
		CmbListComp1PorchPatioDeck            func(childComplexity int) int
		CmbListComp1Quality                   func(childComplexity int) int
		CmbListComp1SaleType                  func(childComplexity int) int
		CmbListComp1Style                     func(childComplexity int) int
		CmbListComp1Type                      func(childComplexity int) int
		CmbListComp1View                      func(childComplexity int) int
		CmbListComp2Basement                  func(childComplexity int) int
		CmbListComp2CommentType               func(childComplexity int) int
		CmbListComp2Condition                 func(childComplexity int) int
		CmbListComp2ExtFinish                 func(childComplexity int) int
		CmbListComp2Financing                 func(childComplexity int) int
		CmbListComp2Fireplace                 func(childComplexity int) int
		CmbListComp2Garage                    func(childComplexity int) int
		CmbListComp2IsFinished                func(childComplexity int) int
		CmbListComp2PercentFinished           func(childComplexity int) int
		CmbListComp2Pool                      func(childComplexity int) int
		CmbListComp2PorchPatioDeck            func(childComplexity int) int
		CmbListComp2Quality                   func(childComplexity int) int
		CmbListComp2SaleType                  func(childComplexity int) int
		CmbListComp2Style                     func(childComplexity int) int
		CmbListComp2Type                      func(childComplexity int) int
		CmbListComp2View                      func(childComplexity int) int
		CmbListComp3Basement                  func(childComplexity int) int
		CmbListComp3CommentType               func(childComplexity int) int
		CmbListComp3Condition                 func(childComplexity int) int
		CmbListComp3ExtFinish                 func(childComplexity int) int
		CmbListComp3Financing                 func(childComplexity int) int
		CmbListComp3Fireplace                 func(childComplexity int) int
		CmbListComp3Garage                    func(childComplexity int) int
		CmbListComp3IsFinished                func(childComplexity int) int
		CmbListComp3PercentFinished           func(childComplexity int) int
		CmbListComp3Pool                      func(childComplexity int) int
		CmbListComp3PorchPatioDeck            func(childComplexity int) int
		CmbListComp3Quality                   func(childComplexity int) int
		CmbListComp3SaleType                  func(childComplexity int) int
		CmbListComp3Style                     func(childComplexity int) int
		CmbListComp3Type                      func(childComplexity int) int
		CmbListComp3View                      func(childComplexity int) int
		CmbListing                            func(childComplexity int) int
		CmbLocation                           func(childComplexity int) int
		CmbMarket                             func(childComplexity int) int
		CmbNegative                           func(childComplexity int) int
		CmbNeighborhoodTrend                  func(childComplexity int) int
		CmbOrderType                          func(childComplexity int) int
		CmbPositive                           func(childComplexity int) int
		CmbPricing                            func(childComplexity int) int
		CmbREOTrend                           func(childComplexity int) int
		CmbSaleComp1Basement                  func(childComplexity int) int
		CmbSaleComp1CommentType               func(childComplexity int) int
		CmbSaleComp1Condition                 func(childComplexity int) int
		CmbSaleComp1ExtFinish                 func(childComplexity int) int
		CmbSaleComp1Financing                 func(childComplexity int) int
		CmbSaleComp1Fireplace                 func(childComplexity int) int
		CmbSaleComp1Garage                    func(childComplexity int) int
		CmbSaleComp1IsFinished                func(childComplexity int) int
		CmbSaleComp1PercentFinished           func(childComplexity int) int
		CmbSaleComp1Pool                      func(childComplexity int) int
		CmbSaleComp1PorchPatioDeck            func(childComplexity int) int
		CmbSaleComp1Quality                   func(childComplexity int) int
		CmbSaleComp1SaleType                  func(childComplexity int) int
		CmbSaleComp1Style                     func(childComplexity int) int
		CmbSaleComp1Type                      func(childComplexity int) int
		CmbSaleComp1View                      func(childComplexity int) int
		CmbSaleComp2Basement                  func(childComplexity int) int
		CmbSaleComp2CommentType               func(childComplexity int) int
		CmbSaleComp2Condition                 func(childComplexity int) int
		CmbSaleComp2ExtFinish                 func(childComplexity int) int
		CmbSaleComp2Financing                 func(childComplexity int) int
		CmbSaleComp2Fireplace                 func(childComplexity int) int
		CmbSaleComp2Garage                    func(childComplexity int) int
		CmbSaleComp2IsFinished                func(childComplexity int) int
		CmbSaleComp2PercentFinished           func(childComplexity int) int
		CmbSaleComp2Pool                      func(childComplexity int) int
		CmbSaleComp2PorchPatioDeck            func(childComplexity int) int
		CmbSaleComp2Quality                   func(childComplexity int) int
		CmbSaleComp2SaleType                  func(childComplexity int) int
		CmbSaleComp2Style                     func(childComplexity int) int
		CmbSaleComp2Type                      func(childComplexity int) int
		CmbSaleComp2View                      func(childComplexity int) int
		CmbSaleComp3Basement                  func(childComplexity int) int
		CmbSaleComp3CommentType               func(childComplexity int) int
		CmbSaleComp3Condition                 func(childComplexity int) int
		CmbSaleComp3ExtFinish                 func(childComplexity int) int
		CmbSaleComp3Financing                 func(childComplexity int) int
		CmbSaleComp3Fireplace                 func(childComplexity int) int
		CmbSaleComp3Garage                    func(childComplexity int) int
		CmbSaleComp3IsFinished                func(childComplexity int) int
		CmbSaleComp3PercentFinished           func(childComplexity int) int
		CmbSaleComp3Pool                      func(childComplexity int) int
		CmbSaleComp3PorchPatioDeck            func(childComplexity int) int
		CmbSaleComp3Quality                   func(childComplexity int) int
		CmbSaleComp3SaleType                  func(childComplexity int) int
		CmbSaleComp3Style                     func(childComplexity int) int
		CmbSaleComp3Type                      func(childComplexity int) int
		CmbSaleComp3View                      func(childComplexity int) int
		CmbSubjectBasement                    func(childComplexity int) int
		CmbSubjectCondition                   func(childComplexity int) int
		CmbSubjectExtFinish                   func(childComplexity int) int
		CmbSubjectFinancing                   func(childComplexity int) int
		CmbSubjectFireplace                   func(childComplexity int) int
		CmbSubjectGarage                      func(childComplexity int) int
		CmbSubjectIsFinished                  func(childComplexity int) int
		CmbSubjectPercentFinished             func(childComplexity int) int
		CmbSubjectPool                        func(childComplexity int) int
		CmbSubjectPorchPatioDeck              func(childComplexity int) int
		CmbSubjectQuality                     func(childComplexity int) int
		CmbSubjectSaleType                    func(childComplexity int) int
		CmbSubjectStyle                       func(childComplexity int) int
		CmbSubjectType                        func(childComplexity int) int
		CmbSubjectView                        func(childComplexity int) int
		CmbSupply                             func(childComplexity int) int
		CmbView                               func(childComplexity int) int
		CondException                         func(childComplexity int) int
		FormType                              func(childComplexity int) int
		GlaException                          func(childComplexity int) int
		History                               func(childComplexity int) int
		ID                                    func(childComplexity int) int
		LotException                          func(childComplexity int) int
		PipelineID                            func(childComplexity int) int
		PriceComment                          func(childComplexity int) int
		ProxException                         func(childComplexity int) int
		RangeComment                          func(childComplexity int) int
		Rdbmarketedtext                       func(childComplexity int) int
		Rdbresaletext                         func(childComplexity int) int
		StyleException                        func(childComplexity int) int
		Txt120DayQuickSale                    func(childComplexity int) int
		Txt120DayQuickSaleRepaired            func(childComplexity int) int
		Txt180DayQuickSale                    func(childComplexity int) int
		Txt180DayQuickSaleRepaired            func(childComplexity int) int
		Txt30DayListPriceFinalValues          func(childComplexity int) int
		Txt30DayListPriceRepaired             func(childComplexity int) int
		Txt30DayQuickSale                     func(childComplexity int) int
		Txt30DayQuickSaleRepaired             func(childComplexity int) int
		Txt60DayQuickSale                     func(childComplexity int) int
		Txt60DayQuickSaleRepaired             func(childComplexity int) int
		Txt6MonthPecent                       func(childComplexity int) int
		Txt90DayAsIsValue                     func(childComplexity int) int
		Txt90DayAsIsValueRepaired             func(childComplexity int) int
		TxtAddress                            func(childComplexity int) int
		TxtAgentCity                          func(childComplexity int) int
		TxtAgentState                         func(childComplexity int) int
		TxtAgentZip                           func(childComplexity int) int
		TxtAnnualPecent                       func(childComplexity int) int
		TxtAverage                            func(childComplexity int) int
		TxtBrokerChecker                      func(childComplexity int) int
		TxtBrokerComments                     func(childComplexity int) int
		TxtCalculatedAge                      func(childComplexity int) int
		TxtCalculatedAges                     func(childComplexity int) int
		TxtCalculatedBath                     func(childComplexity int) int
		TxtCalculatedBeds                     func(childComplexity int) int
		TxtCalculatedCond                     func(childComplexity int) int
		TxtCalculatedGLAs                     func(childComplexity int) int
		TxtCalculatedGla                      func(childComplexity int) int
		TxtCalculatedLots                     func(childComplexity int) int
		TxtCalculatedMonthsSupply             func(childComplexity int) int
		TxtCalculatedProxim                   func(childComplexity int) int
		TxtCalculatedProximity                func(childComplexity int) int
		TxtCalculatedSaleDates                func(childComplexity int) int
		TxtCalculatedStyle                    func(childComplexity int) int
		TxtCalculatedStyle1                   func(childComplexity int) int
		TxtCalculatedView                     func(childComplexity int) int
		TxtClient                             func(childComplexity int) int
		TxtCompany                            func(childComplexity int) int
		TxtCounty                             func(childComplexity int) int
		TxtDisclaimer                         func(childComplexity int) int
		TxtDisclaimer2                        func(childComplexity int) int
		TxtEstimatedDaysOnMarket              func(childComplexity int) int
		TxtEstimatedRent                      func(childComplexity int) int
		TxtFindcompsnow                       func(childComplexity int) int
		TxtLastSaleDate                       func(childComplexity int) int
		TxtLastSalePrice                      func(childComplexity int) int
		TxtListComp1Acres                     func(childComplexity int) int
		TxtListComp1AcresAdjBuiltIn           func(childComplexity int) int
		TxtListComp1Address                   func(childComplexity int) int
		TxtListComp1Adjustments               func(childComplexity int) int
		TxtListComp1Age                       func(childComplexity int) int
		TxtListComp1BasementAdjBuiltIn        func(childComplexity int) int
		TxtListComp1BasementSqFt              func(childComplexity int) int
		TxtListComp1BasementSqFtAdjBuiltIn    func(childComplexity int) int
		TxtListComp1Bedrooms                  func(childComplexity int) int
		TxtListComp1BedroomsAdjBuiltIn        func(childComplexity int) int
		TxtListComp1City                      func(childComplexity int) int
		TxtListComp1CompTotals                func(childComplexity int) int
		TxtListComp1ComparableComments        func(childComplexity int) int
		TxtListComp1ConditionAdjBuiltIn       func(childComplexity int) int
		TxtListComp1CurrentListDate           func(childComplexity int) int
		TxtListComp1DataSource                func(childComplexity int) int
		TxtListComp1ExtFinishAdjBuiltIn       func(childComplexity int) int
		TxtListComp1FireplaceAdjBuiltIn       func(childComplexity int) int
		TxtListComp1FormatAdjustments         func(childComplexity int) int
		TxtListComp1FullBaths                 func(childComplexity int) int
		TxtListComp1FullBathsAdjBuiltIn       func(childComplexity int) int
		TxtListComp1GLAAdjBuiltIn             func(childComplexity int) int
		TxtListComp1GarageAdjBuiltIn          func(childComplexity int) int
		TxtListComp1HOAFee                    func(childComplexity int) int
		TxtListComp1HalfBaths                 func(childComplexity int) int
		TxtListComp1HalfBathsAdjBuiltIn       func(childComplexity int) int
		TxtListComp1IsFinishedAdjBuiltIn      func(childComplexity int) int
		TxtListComp1ListPrice                 func(childComplexity int) int
		TxtListComp1MLSComments               func(childComplexity int) int
		TxtListComp1MLSNumber                 func(childComplexity int) int
		TxtListComp1OriginalListDate          func(childComplexity int) int
		TxtListComp1OriginalListPrice         func(childComplexity int) int
		TxtListComp1PercentFinishedAdjBuiltIn func(childComplexity int) int
		TxtListComp1PoolAdjBuiltIn            func(childComplexity int) int
		TxtListComp1PorchPatioDeckAdjBuiltIn  func(childComplexity int) int
		TxtListComp1PricePerSqFt              func(childComplexity int) int
		TxtListComp1Proximity                 func(childComplexity int) int
		TxtListComp1QualityAdjBuiltIn         func(childComplexity int) int
		TxtListComp1SquareFeet                func(childComplexity int) int
		TxtListComp1State                     func(childComplexity int) int
		TxtListComp1StyleAdjBuiltIn           func(childComplexity int) int
		TxtListComp1Subdivision               func(childComplexity int) int
		TxtListComp1TotalRooms                func(childComplexity int) int
		TxtListComp1TotalRoomsAdjBuiltIn      func(childComplexity int) int
		TxtListComp1UnitNo                    func(childComplexity int) int
		TxtListComp1Units                     func(childComplexity int) int
		TxtListComp1ViewAdjBuiltIn            func(childComplexity int) int
		TxtListComp1YearBuilt                 func(childComplexity int) int
		TxtListComp1YearBuiltAdjBuiltIn       func(childComplexity int) int
		TxtListComp1Zip                       func(childComplexity int) int
		TxtListComp1dom                       func(childComplexity int) int
		TxtListComp1gla                       func(childComplexity int) int
		TxtListComp1noUnit                    func(childComplexity int) int
		TxtListComp2Acres                     func(childComplexity int) int
		TxtListComp2AcresAdjBuiltIn           func(childComplexity int) int
		TxtListComp2Address                   func(childComplexity int) int
		TxtListComp2Adjustments               func(childComplexity int) int
		TxtListComp2Age                       func(childComplexity int) int
		TxtListComp2BasementAdjBuiltIn        func(childComplexity int) int
		TxtListComp2BasementSqFt              func(childComplexity int) int
		TxtListComp2BasementSqFtAdjBuiltIn    func(childComplexity int) int
		TxtListComp2Bedrooms                  func(childComplexity int) int
		TxtListComp2BedroomsAdjBuiltIn        func(childComplexity int) int
		TxtListComp2City                      func(childComplexity int) int
		TxtListComp2CompTotals                func(childComplexity int) int
		TxtListComp2ComparableComments        func(childComplexity int) int
		TxtListComp2ConditionAdjBuiltIn       func(childComplexity int) int
		TxtListComp2CurrentListDate           func(childComplexity int) int
		TxtListComp2DataSource                func(childComplexity int) int
		TxtListComp2ExtFinishAdjBuiltIn       func(childComplexity int) int
		TxtListComp2FireplaceAdjBuiltIn       func(childComplexity int) int
		TxtListComp2FormatAdjustments         func(childComplexity int) int
		TxtListComp2FullBaths                 func(childComplexity int) int
		TxtListComp2FullBathsAdjBuiltIn       func(childComplexity int) int
		TxtListComp2GLAAdjBuiltIn             func(childComplexity int) int
		TxtListComp2GarageAdjBuiltIn          func(childComplexity int) int
		TxtListComp2HOAFee                    func(childComplexity int) int
		TxtListComp2HalfBaths                 func(childComplexity int) int
		TxtListComp2HalfBathsAdjBuiltIn       func(childComplexity int) int
		TxtListComp2IsFinishedAdjBuiltIn      func(childComplexity int) int
		TxtListComp2ListPrice                 func(childComplexity int) int
		TxtListComp2MLSComments               func(childComplexity int) int
		TxtListComp2MLSNumber                 func(childComplexity int) int
		TxtListComp2OriginalListDate          func(childComplexity int) int
		TxtListComp2OriginalListPrice         func(childComplexity int) int
		TxtListComp2PercentFinishedAdjBuiltIn func(childComplexity int) int
		TxtListComp2PoolAdjBuiltIn            func(childComplexity int) int
		TxtListComp2PorchPatioDeckAdjBuiltIn  func(childComplexity int) int
		TxtListComp2PricePerSqFt              func(childComplexity int) int
		TxtListComp2Proximity                 func(childComplexity int) int
		TxtListComp2QualityAdjBuiltIn         func(childComplexity int) int
		TxtListComp2SquareFeet                func(childComplexity int) int
		TxtListComp2State                     func(childComplexity int) int
		TxtListComp2StyleAdjBuiltIn           func(childComplexity int) int
		TxtListComp2Subdivision               func(childComplexity int) int
		TxtListComp2TotalRooms                func(childComplexity int) int
		TxtListComp2TotalRoomsAdjBuiltIn      func(childComplexity int) int
		TxtListComp2UnitNo                    func(childComplexity int) int
		TxtListComp2Units                     func(childComplexity int) int
		TxtListComp2ViewAdjBuiltIn            func(childComplexity int) int
		TxtListComp2YearBuilt                 func(childComplexity int) int
		TxtListComp2YearBuiltAdjBuiltIn       func(childComplexity int) int
		TxtListComp2Zip                       func(childComplexity int) int
		TxtListComp2dom                       func(childComplexity int) int
		TxtListComp2gla                       func(childComplexity int) int
		TxtListComp2noUnit                    func(childComplexity int) int
		TxtListComp3Acres                     func(childComplexity int) int
		TxtListComp3AcresAdjBuiltIn           func(childComplexity int) int
		TxtListComp3Address                   func(childComplexity int) int
		TxtListComp3Adjustments               func(childComplexity int) int
		TxtListComp3Age                       func(childComplexity int) int
		TxtListComp3BasementAdjBuiltIn        func(childComplexity int) int
		TxtListComp3BasementSqFt              func(childComplexity int) int
		TxtListComp3BasementSqFtAdjBuiltIn    func(childComplexity int) int
		TxtListComp3Bedrooms                  func(childComplexity int) int
		TxtListComp3BedroomsAdjBuiltIn        func(childComplexity int) int
		TxtListComp3City                      func(childComplexity int) int
		TxtListComp3CompTotals                func(childComplexity int) int
		TxtListComp3ComparableComments        func(childComplexity int) int
		TxtListComp3ConditionAdjBuiltIn       func(childComplexity int) int
		TxtListComp3CurrentListDate           func(childComplexity int) int
		TxtListComp3DataSource                func(childComplexity int) int
		TxtListComp3ExtFinishAdjBuiltIn       func(childComplexity int) int
		TxtListComp3FireplaceAdjBuiltIn       func(childComplexity int) int
		TxtListComp3FormatAdjustments         func(childComplexity int) int
		TxtListComp3FullBaths                 func(childComplexity int) int
		TxtListComp3FullBathsAdjBuiltIn       func(childComplexity int) int
		TxtListComp3GLAAdjBuiltIn             func(childComplexity int) int
		TxtListComp3GarageAdjBuiltIn          func(childComplexity int) int
		TxtListComp3HOAFee                    func(childComplexity int) int
		TxtListComp3HalfBaths                 func(childComplexity int) int
		TxtListComp3HalfBathsAdjBuiltIn       func(childComplexity int) int
		TxtListComp3IsFinishedAdjBuiltIn      func(childComplexity int) int
		TxtListComp3ListPrice                 func(childComplexity int) int
		TxtListComp3MLSComments               func(childComplexity int) int
		TxtListComp3MLSNumber                 func(childComplexity int) int
		TxtListComp3OriginalListDate          func(childComplexity int) int
		TxtListComp3OriginalListPrice         func(childComplexity int) int
		TxtListComp3PercentFinishedAdjBuiltIn func(childComplexity int) int
		TxtListComp3PoolAdjBuiltIn            func(childComplexity int) int
		TxtListComp3PorchPatioDeckAdjBuiltIn  func(childComplexity int) int
		TxtListComp3PricePerSqFt              func(childComplexity int) int
		TxtListComp3Proximity                 func(childComplexity int) int
		TxtListComp3QualityAdjBuiltIn         func(childComplexity int) int
		TxtListComp3SquareFeet                func(childComplexity int) int
		TxtListComp3State                     func(childComplexity int) int
		TxtListComp3StyleAdjBuiltIn           func(childComplexity int) int
		TxtListComp3Subdivision               func(childComplexity int) int
		TxtListComp3TotalRooms                func(childComplexity int) int
		TxtListComp3TotalRoomsAdjBuiltIn      func(childComplexity int) int
		TxtListComp3UnitNo                    func(childComplexity int) int
		TxtListComp3Units                     func(childComplexity int) int
		TxtListComp3ViewAdjBuiltIn            func(childComplexity int) int
		TxtListComp3YearBuilt                 func(childComplexity int) int
		TxtListComp3YearBuiltAdjBuiltIn       func(childComplexity int) int
		TxtListComp3Zip                       func(childComplexity int) int
		TxtListComp3dom                       func(childComplexity int) int
		TxtListComp3gla                       func(childComplexity int) int
		TxtListComp3noUnit                    func(childComplexity int) int
		TxtListPriceFinalValues               func(childComplexity int) int
		TxtListPriceRepaired                  func(childComplexity int) int
		TxtListings                           func(childComplexity int) int
		TxtListingsDOMRange1                  func(childComplexity int) int
		TxtListingsDOMRange2                  func(childComplexity int) int
		TxtListingsDom                        func(childComplexity int) int
		TxtListingsMaxValue                   func(childComplexity int) int
		TxtListingsMedValue                   func(childComplexity int) int
		TxtListingsMinValue                   func(childComplexity int) int
		TxtListingsRange1                     func(childComplexity int) int
		TxtListingsRange2                     func(childComplexity int) int
		TxtLocation                           func(childComplexity int) int
		TxtMarketRent                         func(childComplexity int) int
		TxtMarketingStrategy                  func(childComplexity int) int
		TxtMonthlyPecent                      func(childComplexity int) int
		TxtNeighborhoodComments               func(childComplexity int) int
		TxtNeighborhoodTrend                  func(childComplexity int) int
		TxtNeighborhoodTrendComments          func(childComplexity int) int
		TxtNoBoarded                          func(childComplexity int) int
		TxtNoOfActive                         func(childComplexity int) int
		TxtNoOfDistressed                     func(childComplexity int) int
		TxtNoOfFm                             func(childComplexity int) int
		TxtNoOfREOListings                    func(childComplexity int) int
		TxtNoOfREOSales                       func(childComplexity int) int
		TxtNoOfRentals                        func(childComplexity int) int
		TxtNoOfReo                            func(childComplexity int) int
		TxtNoOfSSListings                     func(childComplexity int) int
		TxtNoOfSSSales                        func(childComplexity int) int
		TxtNoOfSs                             func(childComplexity int) int
		TxtNoRentHomes                        func(childComplexity int) int
		TxtOrderNumber                        func(childComplexity int) int
		TxtOtherComments                      func(childComplexity int) int
		TxtOwnerOccupied                      func(childComplexity int) int
		TxtPreparerInfoAddress                func(childComplexity int) int
		TxtPreparerInfoAgent                  func(childComplexity int) int
		TxtPreparerInfoAgentCompany           func(childComplexity int) int
		TxtPreparerInfoAgentLicense           func(childComplexity int) int
		TxtPreparerInfoBroker                 func(childComplexity int) int
		TxtPreparerInfoBrokerLicense          func(childComplexity int) int
		TxtPreparerInfoBrokerage              func(childComplexity int) int
		TxtPreparerInfoEmail                  func(childComplexity int) int
		TxtPreparerInfoMilesAwayFromSubject   func(childComplexity int) int
		TxtPreparerInfoPhone                  func(childComplexity int) int
		TxtPreparerInfoYearsOfExperience      func(childComplexity int) int
		TxtRenterOccupied                     func(childComplexity int) int
		TxtSaleComp1Acres                     func(childComplexity int) int
		TxtSaleComp1AcresAdjBuiltIn           func(childComplexity int) int
		TxtSaleComp1Address                   func(childComplexity int) int
		TxtSaleComp1Adjustments               func(childComplexity int) int
		TxtSaleComp1Age                       func(childComplexity int) int
		TxtSaleComp1BasementAdjBuiltIn        func(childComplexity int) int
		TxtSaleComp1BasementSqFt              func(childComplexity int) int
		TxtSaleComp1BasementSqFtAdjBuiltIn    func(childComplexity int) int
		TxtSaleComp1Bedrooms                  func(childComplexity int) int
		TxtSaleComp1BedroomsAdjBuiltIn        func(childComplexity int) int
		TxtSaleComp1City                      func(childComplexity int) int
		TxtSaleComp1CompTotals                func(childComplexity int) int
		TxtSaleComp1ComparableComments        func(childComplexity int) int
		TxtSaleComp1ConditionAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp1CurrentListDate           func(childComplexity int) int
		TxtSaleComp1DataSource                func(childComplexity int) int
		TxtSaleComp1ExtFinishAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp1FireplaceAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp1FormatAdjustments         func(childComplexity int) int
		TxtSaleComp1FullBaths                 func(childComplexity int) int
		TxtSaleComp1FullBathsAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp1GLAAdjBuiltIn             func(childComplexity int) int
		TxtSaleComp1GarageAdjBuiltIn          func(childComplexity int) int
		TxtSaleComp1HOAFee                    func(childComplexity int) int
		TxtSaleComp1HalfBaths                 func(childComplexity int) int
		TxtSaleComp1HalfBathsAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp1IsFinishedAdjBuiltIn      func(childComplexity int) int
		TxtSaleComp1ListPrice                 func(childComplexity int) int
		TxtSaleComp1MLSComments               func(childComplexity int) int
		TxtSaleComp1MLSNumber                 func(childComplexity int) int
		TxtSaleComp1OriginalListDate          func(childComplexity int) int
		TxtSaleComp1OriginalListPrice         func(childComplexity int) int
		TxtSaleComp1PercentFinishedAdjBuiltIn func(childComplexity int) int
		TxtSaleComp1PoolAdjBuiltIn            func(childComplexity int) int
		TxtSaleComp1PorchPatioDeckAdjBuiltIn  func(childComplexity int) int
		TxtSaleComp1PricePerSqFt              func(childComplexity int) int
		TxtSaleComp1Proximity                 func(childComplexity int) int
		TxtSaleComp1QualityAdjBuiltIn         func(childComplexity int) int
		TxtSaleComp1SaleDate                  func(childComplexity int) int
		TxtSaleComp1SalePrice                 func(childComplexity int) int
		TxtSaleComp1SquareFeet                func(childComplexity int) int
		TxtSaleComp1State                     func(childComplexity int) int
		TxtSaleComp1StyleAdjBuiltIn           func(childComplexity int) int
		TxtSaleComp1Subdivision               func(childComplexity int) int
		TxtSaleComp1TotalRooms                func(childComplexity int) int
		TxtSaleComp1TotalRoomsAdjBuiltIn      func(childComplexity int) int
		TxtSaleComp1UnitNo                    func(childComplexity int) int
		TxtSaleComp1Units                     func(childComplexity int) int
		TxtSaleComp1ViewAdjBuiltIn            func(childComplexity int) int
		TxtSaleComp1YearBuilt                 func(childComplexity int) int
		TxtSaleComp1YearBuiltAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp1Zip                       func(childComplexity int) int
		TxtSaleComp1dom                       func(childComplexity int) int
		TxtSaleComp1gla                       func(childComplexity int) int
		TxtSaleComp1noUnit                    func(childComplexity int) int
		TxtSaleComp2Acres                     func(childComplexity int) int
		TxtSaleComp2AcresAdjBuiltIn           func(childComplexity int) int
		TxtSaleComp2Address                   func(childComplexity int) int
		TxtSaleComp2Adjustments               func(childComplexity int) int
		TxtSaleComp2Age                       func(childComplexity int) int
		TxtSaleComp2BasementAdjBuiltIn        func(childComplexity int) int
		TxtSaleComp2BasementSqFt              func(childComplexity int) int
		TxtSaleComp2BasementSqFtAdjBuiltIn    func(childComplexity int) int
		TxtSaleComp2Bedrooms                  func(childComplexity int) int
		TxtSaleComp2BedroomsAdjBuiltIn        func(childComplexity int) int
		TxtSaleComp2City                      func(childComplexity int) int
		TxtSaleComp2CompTotals                func(childComplexity int) int
		TxtSaleComp2ComparableComments        func(childComplexity int) int
		TxtSaleComp2ConditionAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp2CurrentListDate           func(childComplexity int) int
		TxtSaleComp2DataSource                func(childComplexity int) int
		TxtSaleComp2ExtFinishAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp2FireplaceAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp2FormatAdjustments         func(childComplexity int) int
		TxtSaleComp2FullBaths                 func(childComplexity int) int
		TxtSaleComp2FullBathsAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp2GLAAdjBuiltIn             func(childComplexity int) int
		TxtSaleComp2GarageAdjBuiltIn          func(childComplexity int) int
		TxtSaleComp2HOAFee                    func(childComplexity int) int
		TxtSaleComp2HalfBaths                 func(childComplexity int) int
		TxtSaleComp2HalfBathsAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp2IsFinishedAdjBuiltIn      func(childComplexity int) int
		TxtSaleComp2ListPrice                 func(childComplexity int) int
		TxtSaleComp2MLSComments               func(childComplexity int) int
		TxtSaleComp2MLSNumber                 func(childComplexity int) int
		TxtSaleComp2OriginalListDate          func(childComplexity int) int
		TxtSaleComp2OriginalListPrice         func(childComplexity int) int
		TxtSaleComp2PercentFinishedAdjBuiltIn func(childComplexity int) int
		TxtSaleComp2PoolAdjBuiltIn            func(childComplexity int) int
		TxtSaleComp2PorchPatioDeckAdjBuiltIn  func(childComplexity int) int
		TxtSaleComp2PricePerSqFt              func(childComplexity int) int
		TxtSaleComp2Proximity                 func(childComplexity int) int
		TxtSaleComp2QualityAdjBuiltIn         func(childComplexity int) int
		TxtSaleComp2SaleDate                  func(childComplexity int) int
		TxtSaleComp2SalePrice                 func(childComplexity int) int
		TxtSaleComp2SquareFeet                func(childComplexity int) int
		TxtSaleComp2State                     func(childComplexity int) int
		TxtSaleComp2StyleAdjBuiltIn           func(childComplexity int) int
		TxtSaleComp2Subdivision               func(childComplexity int) int
		TxtSaleComp2TotalRooms                func(childComplexity int) int
		TxtSaleComp2TotalRoomsAdjBuiltIn      func(childComplexity int) int
		TxtSaleComp2UnitNo                    func(childComplexity int) int
		TxtSaleComp2Units                     func(childComplexity int) int
		TxtSaleComp2ViewAdjBuiltIn            func(childComplexity int) int
		TxtSaleComp2YearBuilt                 func(childComplexity int) int
		TxtSaleComp2YearBuiltAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp2Zip                       func(childComplexity int) int
		TxtSaleComp2dom                       func(childComplexity int) int
		TxtSaleComp2gla                       func(childComplexity int) int
		TxtSaleComp2noUnit                    func(childComplexity int) int
		TxtSaleComp3Acres                     func(childComplexity int) int
		TxtSaleComp3AcresAdjBuiltIn           func(childComplexity int) int
		TxtSaleComp3Address                   func(childComplexity int) int
		TxtSaleComp3Adjustments               func(childComplexity int) int
		TxtSaleComp3Age                       func(childComplexity int) int
		TxtSaleComp3BasementAdjBuiltIn        func(childComplexity int) int
		TxtSaleComp3BasementSqFt              func(childComplexity int) int
		TxtSaleComp3BasementSqFtAdjBuiltIn    func(childComplexity int) int
		TxtSaleComp3Bedrooms                  func(childComplexity int) int
		TxtSaleComp3BedroomsAdjBuiltIn        func(childComplexity int) int
		TxtSaleComp3City                      func(childComplexity int) int
		TxtSaleComp3CompTotals                func(childComplexity int) int
		TxtSaleComp3ComparableComments        func(childComplexity int) int
		TxtSaleComp3ConditionAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp3CurrentListDate           func(childComplexity int) int
		TxtSaleComp3DataSource                func(childComplexity int) int
		TxtSaleComp3ExtFinishAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp3FireplaceAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp3FormatAdjustments         func(childComplexity int) int
		TxtSaleComp3FullBaths                 func(childComplexity int) int
		TxtSaleComp3FullBathsAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp3GLAAdjBuiltIn             func(childComplexity int) int
		TxtSaleComp3GarageAdjBuiltIn          func(childComplexity int) int
		TxtSaleComp3HOAFee                    func(childComplexity int) int
		TxtSaleComp3HalfBaths                 func(childComplexity int) int
		TxtSaleComp3HalfBathsAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp3IsFinishedAdjBuiltIn      func(childComplexity int) int
		TxtSaleComp3ListPrice                 func(childComplexity int) int
		TxtSaleComp3MLSComments               func(childComplexity int) int
		TxtSaleComp3MLSNumber                 func(childComplexity int) int
		TxtSaleComp3OriginalListDate          func(childComplexity int) int
		TxtSaleComp3OriginalListPrice         func(childComplexity int) int
		TxtSaleComp3PercentFinishedAdjBuiltIn func(childComplexity int) int
		TxtSaleComp3PoolAdjBuiltIn            func(childComplexity int) int
		TxtSaleComp3PorchPatioDeckAdjBuiltIn  func(childComplexity int) int
		TxtSaleComp3PricePerSqFt              func(childComplexity int) int
		TxtSaleComp3Proximity                 func(childComplexity int) int
		TxtSaleComp3QualityAdjBuiltIn         func(childComplexity int) int
		TxtSaleComp3SaleDate                  func(childComplexity int) int
		TxtSaleComp3SalePrice                 func(childComplexity int) int
		TxtSaleComp3SquareFeet                func(childComplexity int) int
		TxtSaleComp3State                     func(childComplexity int) int
		TxtSaleComp3StyleAdjBuiltIn           func(childComplexity int) int
		TxtSaleComp3Subdivision               func(childComplexity int) int
		TxtSaleComp3TotalRooms                func(childComplexity int) int
		TxtSaleComp3TotalRoomsAdjBuiltIn      func(childComplexity int) int
		TxtSaleComp3UnitNo                    func(childComplexity int) int
		TxtSaleComp3Units                     func(childComplexity int) int
		TxtSaleComp3ViewAdjBuiltIn            func(childComplexity int) int
		TxtSaleComp3YearBuilt                 func(childComplexity int) int
		TxtSaleComp3YearBuiltAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp3Zip                       func(childComplexity int) int
		TxtSaleComp3dom                       func(childComplexity int) int
		TxtSaleComp3gla                       func(childComplexity int) int
		TxtSaleComp3noUnit                    func(childComplexity int) int
		TxtSales                              func(childComplexity int) int
		TxtSalesDOMRange1                     func(childComplexity int) int
		TxtSalesDOMRange2                     func(childComplexity int) int
		TxtSalesDom                           func(childComplexity int) int
		TxtSalesMedValue                      func(childComplexity int) int
		TxtSalesRange1                        func(childComplexity int) int
		TxtSalesRange2                        func(childComplexity int) int
		TxtSubjectAcres                       func(childComplexity int) int
		TxtSubjectAddress                     func(childComplexity int) int
		TxtSubjectAdjustments                 func(childComplexity int) int
		TxtSubjectAge                         func(childComplexity int) int
		TxtSubjectBasementSqFt                func(childComplexity int) int
		TxtSubjectBedrooms                    func(childComplexity int) int
		TxtSubjectCity                        func(childComplexity int) int
		TxtSubjectComments                    func(childComplexity int) int
		TxtSubjectCompTotals                  func(childComplexity int) int
		TxtSubjectCurrentListDate             func(childComplexity int) int
		TxtSubjectDataSource                  func(childComplexity int) int
		TxtSubjectDom                         func(childComplexity int) int
		TxtSubjectFullBaths                   func(childComplexity int) int
		TxtSubjectGla                         func(childComplexity int) int
		TxtSubjectHOAFee                      func(childComplexity int) int
		TxtSubjectHalfBaths                   func(childComplexity int) int
		TxtSubjectListPrice                   func(childComplexity int) int
		TxtSubjectMLSNumber                   func(childComplexity int) int
		TxtSubjectOriginalListDate            func(childComplexity int) int
		TxtSubjectOriginalListPrice           func(childComplexity int) int
		TxtSubjectPricePerSqFt                func(childComplexity int) int
		TxtSubjectProximity                   func(childComplexity int) int
		TxtSubjectSaleDate                    func(childComplexity int) int
		TxtSubjectSalePrice                   func(childComplexity int) int
		TxtSubjectSquareFeet                  func(childComplexity int) int
		TxtSubjectState                       func(childComplexity int) int
		TxtSubjectSubdivision                 func(childComplexity int) int
		TxtSubjectTotalRooms                  func(childComplexity int) int
		TxtSubjectUnitNo                      func(childComplexity int) int
		TxtSubjectUnits                       func(childComplexity int) int
		TxtSubjectYearBuilt                   func(childComplexity int) int
		TxtSubjectZip                         func(childComplexity int) int
		TxtSubjectnoUnit                      func(childComplexity int) int
		TxtTaxID                              func(childComplexity int) int
		TxtTotalListings                      func(childComplexity int) int
		TxtTotalSales                         func(childComplexity int) int
		TxtTrullia                            func(childComplexity int) int
		TxtTypicalDom                         func(childComplexity int) int
		TxtTypicalRentalRates                 func(childComplexity int) int
		TxtUnique                             func(childComplexity int) int
		TxtUniqueComments                     func(childComplexity int) int
		TxtValidation                         func(childComplexity int) int
		TxtValidation1                        func(childComplexity int) int
		TxtZillow                             func(childComplexity int) int
		TxtZillowNeighborhoodTrend            func(childComplexity int) int
		Txtcbdamage                           func(childComplexity int) int
		Txtcbinfluence                        func(childComplexity int) int
		Txtcblot                              func(childComplexity int) int
		Txtcbnew                              func(childComplexity int) int
		Txtcbold                              func(childComplexity int) int
		Txtcbstyle                            func(childComplexity int) int
		Txtcbupgrade                          func(childComplexity int) int
		Txtcbview                             func(childComplexity int) int
		Txtpmi                                func(childComplexity int) int
		ViewException                         func(childComplexity int) int
	}

	IformGrid struct {
		Address              func(childComplexity int) int
		Age                  func(childComplexity int) int
		BasementFinishedSqFt func(childComplexity int) int
		BasementSquareFeet   func(childComplexity int) int
		BasementType         func(childComplexity int) int
		Bathrooms            func(childComplexity int) int
		Bedrooms             func(childComplexity int) int
		Carport              func(childComplexity int) int
		City                 func(childComplexity int) int
		Construction         func(childComplexity int) int
		DaysOnMarket         func(childComplexity int) int
		Exterior             func(childComplexity int) int
		ExteriorFeatures     func(childComplexity int) int
		Fireplace            func(childComplexity int) int
		FullBaths            func(childComplexity int) int
		Garage               func(childComplexity int) int
		GarageDescription    func(childComplexity int) int
		HOAFee               func(childComplexity int) int
		HalfBaths            func(childComplexity int) int
		ID                   func(childComplexity int) int
		ListDate             func(childComplexity int) int
		ListPrice            func(childComplexity int) int
		LotSize              func(childComplexity int) int
		MlsComments          func(childComplexity int) int
		MlsNumber            func(childComplexity int) int
		OriginalListDate     func(childComplexity int) int
		OriginalListPrice    func(childComplexity int) int
		ParkingSpacesCarport func(childComplexity int) int
		ParkingSpacesGarage  func(childComplexity int) int
		Pool                 func(childComplexity int) int
		Porch                func(childComplexity int) int
		PriceClosed          func(childComplexity int) int
		PriceList            func(childComplexity int) int
		PropertyStyle        func(childComplexity int) int
		Proplmg              func(childComplexity int) int
		Proximity            func(childComplexity int) int
		RealEstateOwned      func(childComplexity int) int
		SaleDate             func(childComplexity int) int
		SalePrice            func(childComplexity int) int
		SaleType             func(childComplexity int) int
		SelType              func(childComplexity int) int
		ShortSale            func(childComplexity int) int
		SquareFootage        func(childComplexity int) int
		Status               func(childComplexity int) int
		StreetDirection      func(childComplexity int) int
		StreetName           func(childComplexity int) int
		StreetNumber         func(childComplexity int) int
		StreetType           func(childComplexity int) int
		Subdivision          func(childComplexity int) int
		TermsOfSale          func(childComplexity int) int
		TotalRooms           func(childComplexity int) int
		TotalUnits           func(childComplexity int) int
		UnitNumber           func(childComplexity int) int
		View                 func(childComplexity int) int
		Waterfront           func(childComplexity int) int
		YearBuilt            func(childComplexity int) int
		Zip                  func(childComplexity int) int
	}

	IformGridResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	IformHistory struct {
		CreatedDate func(childComplexity int) int
		ModifiedBy  func(childComplexity int) int
		URL         func(childComplexity int) int
		UpdatedDate func(childComplexity int) int
	}

	IformTemp struct {
		AdjustmentPrice                       func(childComplexity int) int
		AgeException                          func(childComplexity int) int
		BathException                         func(childComplexity int) int
		BedException                          func(childComplexity int) int
		CmbDemand                             func(childComplexity int) int
		CmbExtra                              func(childComplexity int) int
		CmbForm                               func(childComplexity int) int
		CmbForm2                              func(childComplexity int) int
		CmbHouse                              func(childComplexity int) int
		CmbIsListed                           func(childComplexity int) int
		CmbListComp1Basement                  func(childComplexity int) int
		CmbListComp1CommentType               func(childComplexity int) int
		CmbListComp1Condition                 func(childComplexity int) int
		CmbListComp1ExtFinish                 func(childComplexity int) int
		CmbListComp1Financing                 func(childComplexity int) int
		CmbListComp1Fireplace                 func(childComplexity int) int
		CmbListComp1Garage                    func(childComplexity int) int
		CmbListComp1IsFinished                func(childComplexity int) int
		CmbListComp1PercentFinished           func(childComplexity int) int
		CmbListComp1Pool                      func(childComplexity int) int
		CmbListComp1PorchPatioDeck            func(childComplexity int) int
		CmbListComp1Quality                   func(childComplexity int) int
		CmbListComp1SaleType                  func(childComplexity int) int
		CmbListComp1Style                     func(childComplexity int) int
		CmbListComp1Type                      func(childComplexity int) int
		CmbListComp1View                      func(childComplexity int) int
		CmbListComp2Basement                  func(childComplexity int) int
		CmbListComp2CommentType               func(childComplexity int) int
		CmbListComp2Condition                 func(childComplexity int) int
		CmbListComp2ExtFinish                 func(childComplexity int) int
		CmbListComp2Financing                 func(childComplexity int) int
		CmbListComp2Fireplace                 func(childComplexity int) int
		CmbListComp2Garage                    func(childComplexity int) int
		CmbListComp2IsFinished                func(childComplexity int) int
		CmbListComp2PercentFinished           func(childComplexity int) int
		CmbListComp2Pool                      func(childComplexity int) int
		CmbListComp2PorchPatioDeck            func(childComplexity int) int
		CmbListComp2Quality                   func(childComplexity int) int
		CmbListComp2SaleType                  func(childComplexity int) int
		CmbListComp2Style                     func(childComplexity int) int
		CmbListComp2Type                      func(childComplexity int) int
		CmbListComp2View                      func(childComplexity int) int
		CmbListComp3Basement                  func(childComplexity int) int
		CmbListComp3CommentType               func(childComplexity int) int
		CmbListComp3Condition                 func(childComplexity int) int
		CmbListComp3ExtFinish                 func(childComplexity int) int
		CmbListComp3Financing                 func(childComplexity int) int
		CmbListComp3Fireplace                 func(childComplexity int) int
		CmbListComp3Garage                    func(childComplexity int) int
		CmbListComp3IsFinished                func(childComplexity int) int
		CmbListComp3PercentFinished           func(childComplexity int) int
		CmbListComp3Pool                      func(childComplexity int) int
		CmbListComp3PorchPatioDeck            func(childComplexity int) int
		CmbListComp3Quality                   func(childComplexity int) int
		CmbListComp3SaleType                  func(childComplexity int) int
		CmbListComp3Style                     func(childComplexity int) int
		CmbListComp3Type                      func(childComplexity int) int
		CmbListComp3View                      func(childComplexity int) int
		CmbListing                            func(childComplexity int) int
		CmbLocation                           func(childComplexity int) int
		CmbMarket                             func(childComplexity int) int
		CmbNegative                           func(childComplexity int) int
		CmbNeighborhoodTrend                  func(childComplexity int) int
		CmbOrderType                          func(childComplexity int) int
		CmbPositive                           func(childComplexity int) int
		CmbPricing                            func(childComplexity int) int
		CmbREOTrend                           func(childComplexity int) int
		CmbSaleComp1Basement                  func(childComplexity int) int
		CmbSaleComp1CommentType               func(childComplexity int) int
		CmbSaleComp1Condition                 func(childComplexity int) int
		CmbSaleComp1ExtFinish                 func(childComplexity int) int
		CmbSaleComp1Financing                 func(childComplexity int) int
		CmbSaleComp1Fireplace                 func(childComplexity int) int
		CmbSaleComp1Garage                    func(childComplexity int) int
		CmbSaleComp1IsFinished                func(childComplexity int) int
		CmbSaleComp1PercentFinished           func(childComplexity int) int
		CmbSaleComp1Pool                      func(childComplexity int) int
		CmbSaleComp1PorchPatioDeck            func(childComplexity int) int
		CmbSaleComp1Quality                   func(childComplexity int) int
		CmbSaleComp1SaleType                  func(childComplexity int) int
		CmbSaleComp1Style                     func(childComplexity int) int
		CmbSaleComp1Type                      func(childComplexity int) int
		CmbSaleComp1View                      func(childComplexity int) int
		CmbSaleComp2Basement                  func(childComplexity int) int
		CmbSaleComp2CommentType               func(childComplexity int) int
		CmbSaleComp2Condition                 func(childComplexity int) int
		CmbSaleComp2ExtFinish                 func(childComplexity int) int
		CmbSaleComp2Financing                 func(childComplexity int) int
		CmbSaleComp2Fireplace                 func(childComplexity int) int
		CmbSaleComp2Garage                    func(childComplexity int) int
		CmbSaleComp2IsFinished                func(childComplexity int) int
		CmbSaleComp2PercentFinished           func(childComplexity int) int
		CmbSaleComp2Pool                      func(childComplexity int) int
		CmbSaleComp2PorchPatioDeck            func(childComplexity int) int
		CmbSaleComp2Quality                   func(childComplexity int) int
		CmbSaleComp2SaleType                  func(childComplexity int) int
		CmbSaleComp2Style                     func(childComplexity int) int
		CmbSaleComp2Type                      func(childComplexity int) int
		CmbSaleComp2View                      func(childComplexity int) int
		CmbSaleComp3Basement                  func(childComplexity int) int
		CmbSaleComp3CommentType               func(childComplexity int) int
		CmbSaleComp3Condition                 func(childComplexity int) int
		CmbSaleComp3ExtFinish                 func(childComplexity int) int
		CmbSaleComp3Financing                 func(childComplexity int) int
		CmbSaleComp3Fireplace                 func(childComplexity int) int
		CmbSaleComp3Garage                    func(childComplexity int) int
		CmbSaleComp3IsFinished                func(childComplexity int) int
		CmbSaleComp3PercentFinished           func(childComplexity int) int
		CmbSaleComp3Pool                      func(childComplexity int) int
		CmbSaleComp3PorchPatioDeck            func(childComplexity int) int
		CmbSaleComp3Quality                   func(childComplexity int) int
		CmbSaleComp3SaleType                  func(childComplexity int) int
		CmbSaleComp3Style                     func(childComplexity int) int
		CmbSaleComp3Type                      func(childComplexity int) int
		CmbSaleComp3View                      func(childComplexity int) int
		CmbSubjectBasement                    func(childComplexity int) int
		CmbSubjectCondition                   func(childComplexity int) int
		CmbSubjectExtFinish                   func(childComplexity int) int
		CmbSubjectFinancing                   func(childComplexity int) int
		CmbSubjectFireplace                   func(childComplexity int) int
		CmbSubjectGarage                      func(childComplexity int) int
		CmbSubjectIsFinished                  func(childComplexity int) int
		CmbSubjectPercentFinished             func(childComplexity int) int
		CmbSubjectPool                        func(childComplexity int) int
		CmbSubjectPorchPatioDeck              func(childComplexity int) int
		CmbSubjectQuality                     func(childComplexity int) int
		CmbSubjectSaleType                    func(childComplexity int) int
		CmbSubjectStyle                       func(childComplexity int) int
		CmbSubjectType                        func(childComplexity int) int
		CmbSubjectView                        func(childComplexity int) int
		CmbSupply                             func(childComplexity int) int
		CmbView                               func(childComplexity int) int
		CondException                         func(childComplexity int) int
		FormType                              func(childComplexity int) int
		GlaException                          func(childComplexity int) int
		History                               func(childComplexity int) int
		ID                                    func(childComplexity int) int
		LotException                          func(childComplexity int) int
		PipelineID                            func(childComplexity int) int
		PriceComment                          func(childComplexity int) int
		ProxException                         func(childComplexity int) int
		RangeComment                          func(childComplexity int) int
		Rdbmarketedtext                       func(childComplexity int) int
		Rdbresaletext                         func(childComplexity int) int
		StyleException                        func(childComplexity int) int
		Txt120DayQuickSale                    func(childComplexity int) int
		Txt120DayQuickSaleRepaired            func(childComplexity int) int
		Txt180DayQuickSale                    func(childComplexity int) int
		Txt180DayQuickSaleRepaired            func(childComplexity int) int
		Txt30DayListPriceFinalValues          func(childComplexity int) int
		Txt30DayListPriceRepaired             func(childComplexity int) int
		Txt30DayQuickSale                     func(childComplexity int) int
		Txt30DayQuickSaleRepaired             func(childComplexity int) int
		Txt60DayQuickSale                     func(childComplexity int) int
		Txt60DayQuickSaleRepaired             func(childComplexity int) int
		Txt6MonthPecent                       func(childComplexity int) int
		Txt90DayAsIsValue                     func(childComplexity int) int
		Txt90DayAsIsValueRepaired             func(childComplexity int) int
		TxtAddress                            func(childComplexity int) int
		TxtAgentCity                          func(childComplexity int) int
		TxtAgentState                         func(childComplexity int) int
		TxtAgentZip                           func(childComplexity int) int
		TxtAnnualPecent                       func(childComplexity int) int
		TxtAverage                            func(childComplexity int) int
		TxtBrokerChecker                      func(childComplexity int) int
		TxtBrokerComments                     func(childComplexity int) int
		TxtCalculatedAge                      func(childComplexity int) int
		TxtCalculatedAges                     func(childComplexity int) int
		TxtCalculatedBath                     func(childComplexity int) int
		TxtCalculatedBeds                     func(childComplexity int) int
		TxtCalculatedCond                     func(childComplexity int) int
		TxtCalculatedGLAs                     func(childComplexity int) int
		TxtCalculatedGla                      func(childComplexity int) int
		TxtCalculatedLots                     func(childComplexity int) int
		TxtCalculatedMonthsSupply             func(childComplexity int) int
		TxtCalculatedProxim                   func(childComplexity int) int
		TxtCalculatedProximity                func(childComplexity int) int
		TxtCalculatedSaleDates                func(childComplexity int) int
		TxtCalculatedStyle                    func(childComplexity int) int
		TxtCalculatedStyle1                   func(childComplexity int) int
		TxtCalculatedView                     func(childComplexity int) int
		TxtClient                             func(childComplexity int) int
		TxtCompany                            func(childComplexity int) int
		TxtCounty                             func(childComplexity int) int
		TxtDisclaimer                         func(childComplexity int) int
		TxtDisclaimer2                        func(childComplexity int) int
		TxtEstimatedDaysOnMarket              func(childComplexity int) int
		TxtEstimatedRent                      func(childComplexity int) int
		TxtFindcompsnow                       func(childComplexity int) int
		TxtLastSaleDate                       func(childComplexity int) int
		TxtLastSalePrice                      func(childComplexity int) int
		TxtListComp1Acres                     func(childComplexity int) int
		TxtListComp1AcresAdjBuiltIn           func(childComplexity int) int
		TxtListComp1Address                   func(childComplexity int) int
		TxtListComp1Adjustments               func(childComplexity int) int
		TxtListComp1Age                       func(childComplexity int) int
		TxtListComp1BasementAdjBuiltIn        func(childComplexity int) int
		TxtListComp1BasementSqFt              func(childComplexity int) int
		TxtListComp1BasementSqFtAdjBuiltIn    func(childComplexity int) int
		TxtListComp1Bedrooms                  func(childComplexity int) int
		TxtListComp1BedroomsAdjBuiltIn        func(childComplexity int) int
		TxtListComp1City                      func(childComplexity int) int
		TxtListComp1CompTotals                func(childComplexity int) int
		TxtListComp1ComparableComments        func(childComplexity int) int
		TxtListComp1ConditionAdjBuiltIn       func(childComplexity int) int
		TxtListComp1CurrentListDate           func(childComplexity int) int
		TxtListComp1DataSource                func(childComplexity int) int
		TxtListComp1ExtFinishAdjBuiltIn       func(childComplexity int) int
		TxtListComp1FireplaceAdjBuiltIn       func(childComplexity int) int
		TxtListComp1FormatAdjustments         func(childComplexity int) int
		TxtListComp1FullBaths                 func(childComplexity int) int
		TxtListComp1FullBathsAdjBuiltIn       func(childComplexity int) int
		TxtListComp1GLAAdjBuiltIn             func(childComplexity int) int
		TxtListComp1GarageAdjBuiltIn          func(childComplexity int) int
		TxtListComp1HOAFee                    func(childComplexity int) int
		TxtListComp1HalfBaths                 func(childComplexity int) int
		TxtListComp1HalfBathsAdjBuiltIn       func(childComplexity int) int
		TxtListComp1IsFinishedAdjBuiltIn      func(childComplexity int) int
		TxtListComp1ListPrice                 func(childComplexity int) int
		TxtListComp1MLSComments               func(childComplexity int) int
		TxtListComp1MLSNumber                 func(childComplexity int) int
		TxtListComp1OriginalListDate          func(childComplexity int) int
		TxtListComp1OriginalListPrice         func(childComplexity int) int
		TxtListComp1PercentFinishedAdjBuiltIn func(childComplexity int) int
		TxtListComp1PoolAdjBuiltIn            func(childComplexity int) int
		TxtListComp1PorchPatioDeckAdjBuiltIn  func(childComplexity int) int
		TxtListComp1PricePerSqFt              func(childComplexity int) int
		TxtListComp1Proximity                 func(childComplexity int) int
		TxtListComp1QualityAdjBuiltIn         func(childComplexity int) int
		TxtListComp1SquareFeet                func(childComplexity int) int
		TxtListComp1State                     func(childComplexity int) int
		TxtListComp1StyleAdjBuiltIn           func(childComplexity int) int
		TxtListComp1Subdivision               func(childComplexity int) int
		TxtListComp1TotalRooms                func(childComplexity int) int
		TxtListComp1TotalRoomsAdjBuiltIn      func(childComplexity int) int
		TxtListComp1UnitNo                    func(childComplexity int) int
		TxtListComp1Units                     func(childComplexity int) int
		TxtListComp1ViewAdjBuiltIn            func(childComplexity int) int
		TxtListComp1YearBuilt                 func(childComplexity int) int
		TxtListComp1YearBuiltAdjBuiltIn       func(childComplexity int) int
		TxtListComp1Zip                       func(childComplexity int) int
		TxtListComp1dom                       func(childComplexity int) int
		TxtListComp1gla                       func(childComplexity int) int
		TxtListComp1noUnit                    func(childComplexity int) int
		TxtListComp2Acres                     func(childComplexity int) int
		TxtListComp2AcresAdjBuiltIn           func(childComplexity int) int
		TxtListComp2Address                   func(childComplexity int) int
		TxtListComp2Adjustments               func(childComplexity int) int
		TxtListComp2Age                       func(childComplexity int) int
		TxtListComp2BasementAdjBuiltIn        func(childComplexity int) int
		TxtListComp2BasementSqFt              func(childComplexity int) int
		TxtListComp2BasementSqFtAdjBuiltIn    func(childComplexity int) int
		TxtListComp2Bedrooms                  func(childComplexity int) int
		TxtListComp2BedroomsAdjBuiltIn        func(childComplexity int) int
		TxtListComp2City                      func(childComplexity int) int
		TxtListComp2CompTotals                func(childComplexity int) int
		TxtListComp2ComparableComments        func(childComplexity int) int
		TxtListComp2ConditionAdjBuiltIn       func(childComplexity int) int
		TxtListComp2CurrentListDate           func(childComplexity int) int
		TxtListComp2DataSource                func(childComplexity int) int
		TxtListComp2ExtFinishAdjBuiltIn       func(childComplexity int) int
		TxtListComp2FireplaceAdjBuiltIn       func(childComplexity int) int
		TxtListComp2FormatAdjustments         func(childComplexity int) int
		TxtListComp2FullBaths                 func(childComplexity int) int
		TxtListComp2FullBathsAdjBuiltIn       func(childComplexity int) int
		TxtListComp2GLAAdjBuiltIn             func(childComplexity int) int
		TxtListComp2GarageAdjBuiltIn          func(childComplexity int) int
		TxtListComp2HOAFee                    func(childComplexity int) int
		TxtListComp2HalfBaths                 func(childComplexity int) int
		TxtListComp2HalfBathsAdjBuiltIn       func(childComplexity int) int
		TxtListComp2IsFinishedAdjBuiltIn      func(childComplexity int) int
		TxtListComp2ListPrice                 func(childComplexity int) int
		TxtListComp2MLSComments               func(childComplexity int) int
		TxtListComp2MLSNumber                 func(childComplexity int) int
		TxtListComp2OriginalListDate          func(childComplexity int) int
		TxtListComp2OriginalListPrice         func(childComplexity int) int
		TxtListComp2PercentFinishedAdjBuiltIn func(childComplexity int) int
		TxtListComp2PoolAdjBuiltIn            func(childComplexity int) int
		TxtListComp2PorchPatioDeckAdjBuiltIn  func(childComplexity int) int
		TxtListComp2PricePerSqFt              func(childComplexity int) int
		TxtListComp2Proximity                 func(childComplexity int) int
		TxtListComp2QualityAdjBuiltIn         func(childComplexity int) int
		TxtListComp2SquareFeet                func(childComplexity int) int
		TxtListComp2State                     func(childComplexity int) int
		TxtListComp2StyleAdjBuiltIn           func(childComplexity int) int
		TxtListComp2Subdivision               func(childComplexity int) int
		TxtListComp2TotalRooms                func(childComplexity int) int
		TxtListComp2TotalRoomsAdjBuiltIn      func(childComplexity int) int
		TxtListComp2UnitNo                    func(childComplexity int) int
		TxtListComp2Units                     func(childComplexity int) int
		TxtListComp2ViewAdjBuiltIn            func(childComplexity int) int
		TxtListComp2YearBuilt                 func(childComplexity int) int
		TxtListComp2YearBuiltAdjBuiltIn       func(childComplexity int) int
		TxtListComp2Zip                       func(childComplexity int) int
		TxtListComp2dom                       func(childComplexity int) int
		TxtListComp2gla                       func(childComplexity int) int
		TxtListComp2noUnit                    func(childComplexity int) int
		TxtListComp3Acres                     func(childComplexity int) int
		TxtListComp3AcresAdjBuiltIn           func(childComplexity int) int
		TxtListComp3Address                   func(childComplexity int) int
		TxtListComp3Adjustments               func(childComplexity int) int
		TxtListComp3Age                       func(childComplexity int) int
		TxtListComp3BasementAdjBuiltIn        func(childComplexity int) int
		TxtListComp3BasementSqFt              func(childComplexity int) int
		TxtListComp3BasementSqFtAdjBuiltIn    func(childComplexity int) int
		TxtListComp3Bedrooms                  func(childComplexity int) int
		TxtListComp3BedroomsAdjBuiltIn        func(childComplexity int) int
		TxtListComp3City                      func(childComplexity int) int
		TxtListComp3CompTotals                func(childComplexity int) int
		TxtListComp3ComparableComments        func(childComplexity int) int
		TxtListComp3ConditionAdjBuiltIn       func(childComplexity int) int
		TxtListComp3CurrentListDate           func(childComplexity int) int
		TxtListComp3DataSource                func(childComplexity int) int
		TxtListComp3ExtFinishAdjBuiltIn       func(childComplexity int) int
		TxtListComp3FireplaceAdjBuiltIn       func(childComplexity int) int
		TxtListComp3FormatAdjustments         func(childComplexity int) int
		TxtListComp3FullBaths                 func(childComplexity int) int
		TxtListComp3FullBathsAdjBuiltIn       func(childComplexity int) int
		TxtListComp3GLAAdjBuiltIn             func(childComplexity int) int
		TxtListComp3GarageAdjBuiltIn          func(childComplexity int) int
		TxtListComp3HOAFee                    func(childComplexity int) int
		TxtListComp3HalfBaths                 func(childComplexity int) int
		TxtListComp3HalfBathsAdjBuiltIn       func(childComplexity int) int
		TxtListComp3IsFinishedAdjBuiltIn      func(childComplexity int) int
		TxtListComp3ListPrice                 func(childComplexity int) int
		TxtListComp3MLSComments               func(childComplexity int) int
		TxtListComp3MLSNumber                 func(childComplexity int) int
		TxtListComp3OriginalListDate          func(childComplexity int) int
		TxtListComp3OriginalListPrice         func(childComplexity int) int
		TxtListComp3PercentFinishedAdjBuiltIn func(childComplexity int) int
		TxtListComp3PoolAdjBuiltIn            func(childComplexity int) int
		TxtListComp3PorchPatioDeckAdjBuiltIn  func(childComplexity int) int
		TxtListComp3PricePerSqFt              func(childComplexity int) int
		TxtListComp3Proximity                 func(childComplexity int) int
		TxtListComp3QualityAdjBuiltIn         func(childComplexity int) int
		TxtListComp3SquareFeet                func(childComplexity int) int
		TxtListComp3State                     func(childComplexity int) int
		TxtListComp3StyleAdjBuiltIn           func(childComplexity int) int
		TxtListComp3Subdivision               func(childComplexity int) int
		TxtListComp3TotalRooms                func(childComplexity int) int
		TxtListComp3TotalRoomsAdjBuiltIn      func(childComplexity int) int
		TxtListComp3UnitNo                    func(childComplexity int) int
		TxtListComp3Units                     func(childComplexity int) int
		TxtListComp3ViewAdjBuiltIn            func(childComplexity int) int
		TxtListComp3YearBuilt                 func(childComplexity int) int
		TxtListComp3YearBuiltAdjBuiltIn       func(childComplexity int) int
		TxtListComp3Zip                       func(childComplexity int) int
		TxtListComp3dom                       func(childComplexity int) int
		TxtListComp3gla                       func(childComplexity int) int
		TxtListComp3noUnit                    func(childComplexity int) int
		TxtListPriceFinalValues               func(childComplexity int) int
		TxtListPriceRepaired                  func(childComplexity int) int
		TxtListings                           func(childComplexity int) int
		TxtListingsDOMRange1                  func(childComplexity int) int
		TxtListingsDOMRange2                  func(childComplexity int) int
		TxtListingsDom                        func(childComplexity int) int
		TxtListingsMaxValue                   func(childComplexity int) int
		TxtListingsMedValue                   func(childComplexity int) int
		TxtListingsMinValue                   func(childComplexity int) int
		TxtListingsRange1                     func(childComplexity int) int
		TxtListingsRange2                     func(childComplexity int) int
		TxtLocation                           func(childComplexity int) int
		TxtMarketRent                         func(childComplexity int) int
		TxtMarketingStrategy                  func(childComplexity int) int
		TxtMonthlyPecent                      func(childComplexity int) int
		TxtNeighborhoodComments               func(childComplexity int) int
		TxtNeighborhoodTrend                  func(childComplexity int) int
		TxtNeighborhoodTrendComments          func(childComplexity int) int
		TxtNoBoarded                          func(childComplexity int) int
		TxtNoOfActive                         func(childComplexity int) int
		TxtNoOfDistressed                     func(childComplexity int) int
		TxtNoOfFm                             func(childComplexity int) int
		TxtNoOfREOListings                    func(childComplexity int) int
		TxtNoOfREOSales                       func(childComplexity int) int
		TxtNoOfRentals                        func(childComplexity int) int
		TxtNoOfReo                            func(childComplexity int) int
		TxtNoOfSSListings                     func(childComplexity int) int
		TxtNoOfSSSales                        func(childComplexity int) int
		TxtNoOfSs                             func(childComplexity int) int
		TxtNoRentHomes                        func(childComplexity int) int
		TxtOrderNumber                        func(childComplexity int) int
		TxtOtherComments                      func(childComplexity int) int
		TxtOwnerOccupied                      func(childComplexity int) int
		TxtPreparerInfoAddress                func(childComplexity int) int
		TxtPreparerInfoAgent                  func(childComplexity int) int
		TxtPreparerInfoAgentCompany           func(childComplexity int) int
		TxtPreparerInfoAgentLicense           func(childComplexity int) int
		TxtPreparerInfoBroker                 func(childComplexity int) int
		TxtPreparerInfoBrokerLicense          func(childComplexity int) int
		TxtPreparerInfoBrokerage              func(childComplexity int) int
		TxtPreparerInfoEmail                  func(childComplexity int) int
		TxtPreparerInfoMilesAwayFromSubject   func(childComplexity int) int
		TxtPreparerInfoPhone                  func(childComplexity int) int
		TxtPreparerInfoYearsOfExperience      func(childComplexity int) int
		TxtRenterOccupied                     func(childComplexity int) int
		TxtSaleComp1Acres                     func(childComplexity int) int
		TxtSaleComp1AcresAdjBuiltIn           func(childComplexity int) int
		TxtSaleComp1Address                   func(childComplexity int) int
		TxtSaleComp1Adjustments               func(childComplexity int) int
		TxtSaleComp1Age                       func(childComplexity int) int
		TxtSaleComp1BasementAdjBuiltIn        func(childComplexity int) int
		TxtSaleComp1BasementSqFt              func(childComplexity int) int
		TxtSaleComp1BasementSqFtAdjBuiltIn    func(childComplexity int) int
		TxtSaleComp1Bedrooms                  func(childComplexity int) int
		TxtSaleComp1BedroomsAdjBuiltIn        func(childComplexity int) int
		TxtSaleComp1City                      func(childComplexity int) int
		TxtSaleComp1CompTotals                func(childComplexity int) int
		TxtSaleComp1ComparableComments        func(childComplexity int) int
		TxtSaleComp1ConditionAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp1CurrentListDate           func(childComplexity int) int
		TxtSaleComp1DataSource                func(childComplexity int) int
		TxtSaleComp1ExtFinishAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp1FireplaceAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp1FormatAdjustments         func(childComplexity int) int
		TxtSaleComp1FullBaths                 func(childComplexity int) int
		TxtSaleComp1FullBathsAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp1GLAAdjBuiltIn             func(childComplexity int) int
		TxtSaleComp1GarageAdjBuiltIn          func(childComplexity int) int
		TxtSaleComp1HOAFee                    func(childComplexity int) int
		TxtSaleComp1HalfBaths                 func(childComplexity int) int
		TxtSaleComp1HalfBathsAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp1IsFinishedAdjBuiltIn      func(childComplexity int) int
		TxtSaleComp1ListPrice                 func(childComplexity int) int
		TxtSaleComp1MLSComments               func(childComplexity int) int
		TxtSaleComp1MLSNumber                 func(childComplexity int) int
		TxtSaleComp1OriginalListDate          func(childComplexity int) int
		TxtSaleComp1OriginalListPrice         func(childComplexity int) int
		TxtSaleComp1PercentFinishedAdjBuiltIn func(childComplexity int) int
		TxtSaleComp1PoolAdjBuiltIn            func(childComplexity int) int
		TxtSaleComp1PorchPatioDeckAdjBuiltIn  func(childComplexity int) int
		TxtSaleComp1PricePerSqFt              func(childComplexity int) int
		TxtSaleComp1Proximity                 func(childComplexity int) int
		TxtSaleComp1QualityAdjBuiltIn         func(childComplexity int) int
		TxtSaleComp1SaleDate                  func(childComplexity int) int
		TxtSaleComp1SalePrice                 func(childComplexity int) int
		TxtSaleComp1SquareFeet                func(childComplexity int) int
		TxtSaleComp1State                     func(childComplexity int) int
		TxtSaleComp1StyleAdjBuiltIn           func(childComplexity int) int
		TxtSaleComp1Subdivision               func(childComplexity int) int
		TxtSaleComp1TotalRooms                func(childComplexity int) int
		TxtSaleComp1TotalRoomsAdjBuiltIn      func(childComplexity int) int
		TxtSaleComp1UnitNo                    func(childComplexity int) int
		TxtSaleComp1Units                     func(childComplexity int) int
		TxtSaleComp1ViewAdjBuiltIn            func(childComplexity int) int
		TxtSaleComp1YearBuilt                 func(childComplexity int) int
		TxtSaleComp1YearBuiltAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp1Zip                       func(childComplexity int) int
		TxtSaleComp1dom                       func(childComplexity int) int
		TxtSaleComp1gla                       func(childComplexity int) int
		TxtSaleComp1noUnit                    func(childComplexity int) int
		TxtSaleComp2Acres                     func(childComplexity int) int
		TxtSaleComp2AcresAdjBuiltIn           func(childComplexity int) int
		TxtSaleComp2Address                   func(childComplexity int) int
		TxtSaleComp2Adjustments               func(childComplexity int) int
		TxtSaleComp2Age                       func(childComplexity int) int
		TxtSaleComp2BasementAdjBuiltIn        func(childComplexity int) int
		TxtSaleComp2BasementSqFt              func(childComplexity int) int
		TxtSaleComp2BasementSqFtAdjBuiltIn    func(childComplexity int) int
		TxtSaleComp2Bedrooms                  func(childComplexity int) int
		TxtSaleComp2BedroomsAdjBuiltIn        func(childComplexity int) int
		TxtSaleComp2City                      func(childComplexity int) int
		TxtSaleComp2CompTotals                func(childComplexity int) int
		TxtSaleComp2ComparableComments        func(childComplexity int) int
		TxtSaleComp2ConditionAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp2CurrentListDate           func(childComplexity int) int
		TxtSaleComp2DataSource                func(childComplexity int) int
		TxtSaleComp2ExtFinishAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp2FireplaceAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp2FormatAdjustments         func(childComplexity int) int
		TxtSaleComp2FullBaths                 func(childComplexity int) int
		TxtSaleComp2FullBathsAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp2GLAAdjBuiltIn             func(childComplexity int) int
		TxtSaleComp2GarageAdjBuiltIn          func(childComplexity int) int
		TxtSaleComp2HOAFee                    func(childComplexity int) int
		TxtSaleComp2HalfBaths                 func(childComplexity int) int
		TxtSaleComp2HalfBathsAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp2IsFinishedAdjBuiltIn      func(childComplexity int) int
		TxtSaleComp2ListPrice                 func(childComplexity int) int
		TxtSaleComp2MLSComments               func(childComplexity int) int
		TxtSaleComp2MLSNumber                 func(childComplexity int) int
		TxtSaleComp2OriginalListDate          func(childComplexity int) int
		TxtSaleComp2OriginalListPrice         func(childComplexity int) int
		TxtSaleComp2PercentFinishedAdjBuiltIn func(childComplexity int) int
		TxtSaleComp2PoolAdjBuiltIn            func(childComplexity int) int
		TxtSaleComp2PorchPatioDeckAdjBuiltIn  func(childComplexity int) int
		TxtSaleComp2PricePerSqFt              func(childComplexity int) int
		TxtSaleComp2Proximity                 func(childComplexity int) int
		TxtSaleComp2QualityAdjBuiltIn         func(childComplexity int) int
		TxtSaleComp2SaleDate                  func(childComplexity int) int
		TxtSaleComp2SalePrice                 func(childComplexity int) int
		TxtSaleComp2SquareFeet                func(childComplexity int) int
		TxtSaleComp2State                     func(childComplexity int) int
		TxtSaleComp2StyleAdjBuiltIn           func(childComplexity int) int
		TxtSaleComp2Subdivision               func(childComplexity int) int
		TxtSaleComp2TotalRooms                func(childComplexity int) int
		TxtSaleComp2TotalRoomsAdjBuiltIn      func(childComplexity int) int
		TxtSaleComp2UnitNo                    func(childComplexity int) int
		TxtSaleComp2Units                     func(childComplexity int) int
		TxtSaleComp2ViewAdjBuiltIn            func(childComplexity int) int
		TxtSaleComp2YearBuilt                 func(childComplexity int) int
		TxtSaleComp2YearBuiltAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp2Zip                       func(childComplexity int) int
		TxtSaleComp2dom                       func(childComplexity int) int
		TxtSaleComp2gla                       func(childComplexity int) int
		TxtSaleComp2noUnit                    func(childComplexity int) int
		TxtSaleComp3Acres                     func(childComplexity int) int
		TxtSaleComp3AcresAdjBuiltIn           func(childComplexity int) int
		TxtSaleComp3Address                   func(childComplexity int) int
		TxtSaleComp3Adjustments               func(childComplexity int) int
		TxtSaleComp3Age                       func(childComplexity int) int
		TxtSaleComp3BasementAdjBuiltIn        func(childComplexity int) int
		TxtSaleComp3BasementSqFt              func(childComplexity int) int
		TxtSaleComp3BasementSqFtAdjBuiltIn    func(childComplexity int) int
		TxtSaleComp3Bedrooms                  func(childComplexity int) int
		TxtSaleComp3BedroomsAdjBuiltIn        func(childComplexity int) int
		TxtSaleComp3City                      func(childComplexity int) int
		TxtSaleComp3CompTotals                func(childComplexity int) int
		TxtSaleComp3ComparableComments        func(childComplexity int) int
		TxtSaleComp3ConditionAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp3CurrentListDate           func(childComplexity int) int
		TxtSaleComp3DataSource                func(childComplexity int) int
		TxtSaleComp3ExtFinishAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp3FireplaceAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp3FormatAdjustments         func(childComplexity int) int
		TxtSaleComp3FullBaths                 func(childComplexity int) int
		TxtSaleComp3FullBathsAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp3GLAAdjBuiltIn             func(childComplexity int) int
		TxtSaleComp3GarageAdjBuiltIn          func(childComplexity int) int
		TxtSaleComp3HOAFee                    func(childComplexity int) int
		TxtSaleComp3HalfBaths                 func(childComplexity int) int
		TxtSaleComp3HalfBathsAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp3IsFinishedAdjBuiltIn      func(childComplexity int) int
		TxtSaleComp3ListPrice                 func(childComplexity int) int
		TxtSaleComp3MLSComments               func(childComplexity int) int
		TxtSaleComp3MLSNumber                 func(childComplexity int) int
		TxtSaleComp3OriginalListDate          func(childComplexity int) int
		TxtSaleComp3OriginalListPrice         func(childComplexity int) int
		TxtSaleComp3PercentFinishedAdjBuiltIn func(childComplexity int) int
		TxtSaleComp3PoolAdjBuiltIn            func(childComplexity int) int
		TxtSaleComp3PorchPatioDeckAdjBuiltIn  func(childComplexity int) int
		TxtSaleComp3PricePerSqFt              func(childComplexity int) int
		TxtSaleComp3Proximity                 func(childComplexity int) int
		TxtSaleComp3QualityAdjBuiltIn         func(childComplexity int) int
		TxtSaleComp3SaleDate                  func(childComplexity int) int
		TxtSaleComp3SalePrice                 func(childComplexity int) int
		TxtSaleComp3SquareFeet                func(childComplexity int) int
		TxtSaleComp3State                     func(childComplexity int) int
		TxtSaleComp3StyleAdjBuiltIn           func(childComplexity int) int
		TxtSaleComp3Subdivision               func(childComplexity int) int
		TxtSaleComp3TotalRooms                func(childComplexity int) int
		TxtSaleComp3TotalRoomsAdjBuiltIn      func(childComplexity int) int
		TxtSaleComp3UnitNo                    func(childComplexity int) int
		TxtSaleComp3Units                     func(childComplexity int) int
		TxtSaleComp3ViewAdjBuiltIn            func(childComplexity int) int
		TxtSaleComp3YearBuilt                 func(childComplexity int) int
		TxtSaleComp3YearBuiltAdjBuiltIn       func(childComplexity int) int
		TxtSaleComp3Zip                       func(childComplexity int) int
		TxtSaleComp3dom                       func(childComplexity int) int
		TxtSaleComp3gla                       func(childComplexity int) int
		TxtSaleComp3noUnit                    func(childComplexity int) int
		TxtSales                              func(childComplexity int) int
		TxtSalesDOMRange1                     func(childComplexity int) int
		TxtSalesDOMRange2                     func(childComplexity int) int
		TxtSalesDom                           func(childComplexity int) int
		TxtSalesMedValue                      func(childComplexity int) int
		TxtSalesRange1                        func(childComplexity int) int
		TxtSalesRange2                        func(childComplexity int) int
		TxtSubjectAcres                       func(childComplexity int) int
		TxtSubjectAddress                     func(childComplexity int) int
		TxtSubjectAdjustments                 func(childComplexity int) int
		TxtSubjectAge                         func(childComplexity int) int
		TxtSubjectBasementSqFt                func(childComplexity int) int
		TxtSubjectBedrooms                    func(childComplexity int) int
		TxtSubjectCity                        func(childComplexity int) int
		TxtSubjectComments                    func(childComplexity int) int
		TxtSubjectCompTotals                  func(childComplexity int) int
		TxtSubjectCurrentListDate             func(childComplexity int) int
		TxtSubjectDataSource                  func(childComplexity int) int
		TxtSubjectDom                         func(childComplexity int) int
		TxtSubjectFullBaths                   func(childComplexity int) int
		TxtSubjectGla                         func(childComplexity int) int
		TxtSubjectHOAFee                      func(childComplexity int) int
		TxtSubjectHalfBaths                   func(childComplexity int) int
		TxtSubjectListPrice                   func(childComplexity int) int
		TxtSubjectMLSNumber                   func(childComplexity int) int
		TxtSubjectOriginalListDate            func(childComplexity int) int
		TxtSubjectOriginalListPrice           func(childComplexity int) int
		TxtSubjectPricePerSqFt                func(childComplexity int) int
		TxtSubjectProximity                   func(childComplexity int) int
		TxtSubjectSaleDate                    func(childComplexity int) int
		TxtSubjectSalePrice                   func(childComplexity int) int
		TxtSubjectSquareFeet                  func(childComplexity int) int
		TxtSubjectState                       func(childComplexity int) int
		TxtSubjectSubdivision                 func(childComplexity int) int
		TxtSubjectTotalRooms                  func(childComplexity int) int
		TxtSubjectUnitNo                      func(childComplexity int) int
		TxtSubjectUnits                       func(childComplexity int) int
		TxtSubjectYearBuilt                   func(childComplexity int) int
		TxtSubjectZip                         func(childComplexity int) int
		TxtSubjectnoUnit                      func(childComplexity int) int
		TxtTaxID                              func(childComplexity int) int
		TxtTotalListings                      func(childComplexity int) int
		TxtTotalSales                         func(childComplexity int) int
		TxtTrullia                            func(childComplexity int) int
		TxtTypicalDom                         func(childComplexity int) int
		TxtTypicalRentalRates                 func(childComplexity int) int
		TxtUnique                             func(childComplexity int) int
		TxtUniqueComments                     func(childComplexity int) int
		TxtValidation                         func(childComplexity int) int
		TxtValidation1                        func(childComplexity int) int
		TxtZillow                             func(childComplexity int) int
		TxtZillowNeighborhoodTrend            func(childComplexity int) int
		Txtcbdamage                           func(childComplexity int) int
		Txtcbinfluence                        func(childComplexity int) int
		Txtcblot                              func(childComplexity int) int
		Txtcbnew                              func(childComplexity int) int
		Txtcbold                              func(childComplexity int) int
		Txtcbstyle                            func(childComplexity int) int
		Txtcbupgrade                          func(childComplexity int) int
		Txtcbview                             func(childComplexity int) int
		Txtpmi                                func(childComplexity int) int
		ViewException                         func(childComplexity int) int
	}

	Instruction struct {
		Client          func(childComplexity int) int
		ClientID        func(childComplexity int) int
		Comment         func(childComplexity int) int
		Company         func(childComplexity int) int
		CompanyID       func(childComplexity int) int
		CreatedDateTime func(childComplexity int) int
		FileName        func(childComplexity int) int
		ID              func(childComplexity int) int
		Tag             func(childComplexity int) int
		URL             func(childComplexity int) int
	}

	InstructionResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Invoice struct {
		Address               func(childComplexity int) int
		Client                func(childComplexity int) int
		Company               func(childComplexity int) int
		Date                  func(childComplexity int) int
		EmployeeID            func(childComplexity int) int
		ID                    func(childComplexity int) int
		InitialBpoRemarks     func(childComplexity int) int
		InspectionRemarks     func(childComplexity int) int
		InteriorRemarks       func(childComplexity int) int
		IsInitialBpo          func(childComplexity int) int
		IsInspection          func(childComplexity int) int
		IsInterior            func(childComplexity int) int
		IsNoCsv               func(childComplexity int) int
		IsNoIFill             func(childComplexity int) int
		IsOtherPremium        func(childComplexity int) int
		IsRentalAddendum      func(childComplexity int) int
		IsRush                func(childComplexity int) int
		IsSuperRush           func(childComplexity int) int
		Name                  func(childComplexity int) int
		NoCsvRemarks          func(childComplexity int) int
		NoIFillRemarks        func(childComplexity int) int
		OrderNumber           func(childComplexity int) int
		OrderType             func(childComplexity int) int
		OtherPremiumRemarks   func(childComplexity int) int
		QcType                func(childComplexity int) int
		RentalAddendumRemarks func(childComplexity int) int
		RushRemarks           func(childComplexity int) int
		SuperRushRemarks      func(childComplexity int) int
		Type                  func(childComplexity int) int
	}

	InvoiceRequestHistory struct {
		Address       func(childComplexity int) int
		Company       func(childComplexity int) int
		DateRequested func(childComplexity int) int
		ID            func(childComplexity int) int
		OrderNumber   func(childComplexity int) int
		Remarks       func(childComplexity int) int
		Status        func(childComplexity int) int
	}

	InvoiceRequestHistoryResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	InvoiceRequestResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Log struct {
		Action     func(childComplexity int) int
		Datetime   func(childComplexity int) int
		ModifiedBy func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	LoginLog struct {
		Datetime  func(childComplexity int) int
		IPAddress func(childComplexity int) int
		Username  func(childComplexity int) int
	}

	LoginLogResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Mutation struct {
		AddCreditLedger                   func(childComplexity int, input models.AddCreditLedgerInput) int
		CancelInvoice                     func(childComplexity int, id string, reason *string) int
		ContinueSession                   func(childComplexity int, userID string) int
		CreateBillingExcel                func(childComplexity int, id string) int
		DeleteAccount                     func(childComplexity int, id string) int
		DeleteAnnouncement                func(childComplexity int, id string) int
		DeleteBilling                     func(childComplexity int, id string) int
		DeleteComment                     func(childComplexity int, id string) int
		DeleteCompany                     func(childComplexity int, id string) int
		DeleteEmailTemplate               func(childComplexity int, id string) int
		DeleteHeader                      func(childComplexity int, id string) int
		DeleteIformGrid                   func(childComplexity int, id string) int
		DeleteInstruction                 func(childComplexity int, id string) int
		DeletePermissionGroup             func(childComplexity int, id string) int
		DeletePipelineComparable          func(childComplexity int, id string) int
		DeletePipelineDoc                 func(childComplexity int, id string) int
		DeletePipelinePhoto               func(childComplexity int, id string) int
		DeleteProfileDoc                  func(childComplexity int, id string) int
		DeleteReview                      func(childComplexity int, id string) int
		ForgetPassword                    func(childComplexity int, email string) int
		Login                             func(childComplexity int, email string, password string) int
		RegisterUser                      func(childComplexity int, input models.RegisterInput) int
		ResetPassword                     func(childComplexity int, token string, newPassword string) int
		SaveAccount                       func(childComplexity int, input models.AccountInput) int
		SaveAnnouncement                  func(childComplexity int, input models.AnnouncementInput) int
		SaveBilling                       func(childComplexity int, input models.SaveBillingInput) int
		SaveComment                       func(childComplexity int, input models.CommentInput) int
		SaveCompany                       func(childComplexity int, input models.CompanyInput) int
		SaveCredit                        func(childComplexity int, input models.SaveCreditInput) int
		SaveEmailTemplate                 func(childComplexity int, input models.SaveEmailTemplateInput) int
		SaveHeader                        func(childComplexity int, name string) int
		SaveHeaderDetail                  func(childComplexity int, parentID string, name string) int
		SaveIformGrid                     func(childComplexity int, pipelineID string, input models.SaveIformGridInput) int
		SaveInstruction                   func(childComplexity int, input models.SaveInstructionInput) int
		SaveInvoice                       func(childComplexity int, input models.SaveInvoiceInput) int
		SavePermissionGroup               func(childComplexity int, input models.PermissionGroupInput) int
		SavePipeline                      func(childComplexity int, input models.PipelineInput) int
		SavePipelineComparable            func(childComplexity int, pipelineID string, input models.SavePipelineComparableInput) int
		SavePipelineDoc                   func(childComplexity int, pipelineID string, input models.PipelineDocInput) int
		SavePipelineNote                  func(childComplexity int, pipelineID string, input models.SavePipelineNoteInput) int
		SavePipelinePhoto                 func(childComplexity int, pipelineID string, input models.PipelinePhotoInput) int
		SavePipelineQualityControl        func(childComplexity int, pipelineID string, message string) int
		SavePipelineQualityControlAndNote func(childComplexity int, pipelineID string, input models.SavePipelineQualityControlAndNoteInput) int
		SaveProfileDoc                    func(childComplexity int, input models.ProfileDocInput) int
		SaveQualityControl                func(childComplexity int, pipelineID string) int
		SaveRequest                       func(childComplexity int, pipelineID string) int
		SaveReview                        func(childComplexity int, input models.SaveReviewInput) int
		SaveSession                       func(childComplexity int, userID string, invoiceDate string) int
		SaveUser                          func(childComplexity int, input models.SaveUserInput) int
		SetAdjustmentDefault              func(childComplexity int) int
		SetCommentDefault                 func(childComplexity int) int
		StopSession                       func(childComplexity int, userID string) int
		SubmitPipelinePhoto               func(childComplexity int, id string, isSubmitPipelinePhoto bool) int
		UpdateAccount                     func(childComplexity int, id string, input models.AccountInput) int
		UpdateAdjustment                  func(childComplexity int, id string, value float64) int
		UpdateAnnouncement                func(childComplexity int, id string, input models.AnnouncementInput) int
		UpdateBilling                     func(childComplexity int, id string, input models.UpdateBillingInput) int
		UpdateComment                     func(childComplexity int, id string, value string) int
		UpdateCompany                     func(childComplexity int, id string, input models.CompanyInput) int
		UpdateDefault                     func(childComplexity int, input models.DefaultInput) int
		UpdateEmailTemplate               func(childComplexity int, id string, input models.UpdateEmailTemplateInput) int
		UpdateHeader                      func(childComplexity int, id string, name string) int
		UpdateIform                       func(childComplexity int, pipelineID string, input models.UpdateIformInput) int
		UpdateIformTemp                   func(childComplexity int, pipelineID string, input models.UpdateIformTempInput) int
		UpdateInvoice                     func(childComplexity int, id string, input models.UpdateInvoiceInput) int
		UpdatePermissionGroup             func(childComplexity int, id string, input models.PermissionGroupInput) int
		UpdatePipeline                    func(childComplexity int, id string, input models.UpdatePipelineInput) int
		UpdatePipelineComparable          func(childComplexity int, id string, mls string) int
		UpdatePipelineNeighborhood        func(childComplexity int, pipelineID string, input models.UpdatePipelineNeighborhoodInput) int
		UpdatePipelineRepair              func(childComplexity int, pipelineID string, input models.UpdatePipelineRepairInput) int
		UpdatePipelineState               func(childComplexity int, input models.UpdatePipelineStateInput) int
		UpdateProfile                     func(childComplexity int, input models.ProfileInput) int
		UpdateQcRequest                   func(childComplexity int, id string, input models.UpdateQcRequestInput) int
		UpdateQualityControl              func(childComplexity int, id string, input models.UpdateQualityControlInput) int
		UpdateRequest                     func(childComplexity int, id string, input models.UpdateRequestInput) int
		UpdateReview                      func(childComplexity int, id string, input models.UpdateReviewInput) int
		UpdateSession                     func(childComplexity int, id string, input models.UpdateSessionInput) int
		UpdateUser                        func(childComplexity int, id string, input models.UpdateUserInput) int
		VerifyPaypalTransaction           func(childComplexity int, paypalOrderID string, billingID *string) int
	}

	OrderAnalytics struct {
		Client func(childComplexity int) int
		Month  func(childComplexity int) int
		Paid   func(childComplexity int) int
		Unpaid func(childComplexity int) int
	}

	OrderSubmit struct {
		CoordinatorName func(childComplexity int) int
		Count           func(childComplexity int) int
		Month           func(childComplexity int) int
		Year            func(childComplexity int) int
	}

	PermissionGroup struct {
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Permissions func(childComplexity int) int
	}

	PermissionGroupResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Pipeline struct {
		Address                     func(childComplexity int) int
		Assign                      func(childComplexity int) int
		AssignDateTime              func(childComplexity int) int
		AssignID                    func(childComplexity int) int
		AssignedHistory             func(childComplexity int) int
		AuthorID                    func(childComplexity int) int
		AuthorName                  func(childComplexity int) int
		CancelRemarks               func(childComplexity int) int
		Company                     func(childComplexity int) int
		CompanyID                   func(childComplexity int) int
		Country                     func(childComplexity int) int
		County                      func(childComplexity int) int
		CreatedDateTime             func(childComplexity int) int
		DueDateTime                 func(childComplexity int) int
		HoldDateTime                func(childComplexity int) int
		HoldRemarks                 func(childComplexity int) int
		ID                          func(childComplexity int) int
		IfillProcessModifiedDate    func(childComplexity int) int
		IsBilled                    func(childComplexity int) int
		IsHold                      func(childComplexity int) int
		IsInitialBpo                func(childComplexity int) int
		IsInspection                func(childComplexity int) int
		IsProcessIfill              func(childComplexity int) int
		IsProcessIform              func(childComplexity int) int
		IsProcessReview             func(childComplexity int) int
		IsQc                        func(childComplexity int) int
		IsRushOrder                 func(childComplexity int) int
		IsSuperRush                 func(childComplexity int) int
		IsSyncedToTurboBpo          func(childComplexity int) int
		LastUpdateTime              func(childComplexity int) int
		Location                    func(childComplexity int) int
		Mls                         func(childComplexity int) int
		Objective                   func(childComplexity int) int
		OrderFee                    func(childComplexity int) int
		OrderNumber                 func(childComplexity int) int
		OrderType                   func(childComplexity int) int
		OtherCompany                func(childComplexity int) int
		PauseDateTime               func(childComplexity int) int
		PipelineDocTotal            func(childComplexity int) int
		PipelineHistory             func(childComplexity int) int
		PipelineNoteTotal           func(childComplexity int) int
		PipelinePhotoTotal          func(childComplexity int) int
		PipelineQualityControlTotal func(childComplexity int) int
		PremiumCompany              func(childComplexity int) int
		PremiumCompanyID            func(childComplexity int) int
		ProcessIformModifiedDate    func(childComplexity int) int
		ProcessReviewModifiedDate   func(childComplexity int) int
		RatingFeedback              func(childComplexity int) int
		RatingOverAll               func(childComplexity int) int
		RatingQuality               func(childComplexity int) int
		RatingTimeliness            func(childComplexity int) int
		Status                      func(childComplexity int) int
		TotalFee                    func(childComplexity int) int
		Type                        func(childComplexity int) int
		UnHoldRemarks               func(childComplexity int) int
		ZipCode                     func(childComplexity int) int
	}

	PipelineAssignedHistory struct {
		Action       func(childComplexity int) int
		AssignedBy   func(childComplexity int) int
		AssignedByID func(childComplexity int) int
		Assignee     func(childComplexity int) int
		AssigneeID   func(childComplexity int) int
		LogDateTime  func(childComplexity int) int
		ModifiedBy   func(childComplexity int) int
	}

	PipelineComparable struct {
		ID         func(childComplexity int) int
		Mls        func(childComplexity int) int
		Order      func(childComplexity int) int
		PipelineID func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	PipelineComparableResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PipelineDoc struct {
		CreatedBy       func(childComplexity int) int
		CreatedDateTime func(childComplexity int) int
		FileName        func(childComplexity int) int
		ID              func(childComplexity int) int
		Type            func(childComplexity int) int
		URL             func(childComplexity int) int
	}

	PipelineDocResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PipelineHistory struct {
		Action      func(childComplexity int) int
		LogDateTime func(childComplexity int) int
		ModifiedBy  func(childComplexity int) int
		Value       func(childComplexity int) int
	}

	PipelineNeighborhood struct {
		AnnualPercentage     func(childComplexity int) int
		Demand               func(childComplexity int) int
		Distressed           func(childComplexity int) int
		Fm                   func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsReoDriven          func(childComplexity int) int
		ListingsDomAve       func(childComplexity int) int
		ListingsDomRangeFrom func(childComplexity int) int
		ListingsDomRangeTo   func(childComplexity int) int
		ListingsMaxValue     func(childComplexity int) int
		ListingsMedValue     func(childComplexity int) int
		ListingsMinValue     func(childComplexity int) int
		MarketTrend          func(childComplexity int) int
		MonthlyPercentage    func(childComplexity int) int
		NtComments           func(childComplexity int) int
		Reo                  func(childComplexity int) int
		SalesDomRangeFrom    func(childComplexity int) int
		SalesDomRangeTo      func(childComplexity int) int
		SalesMaxValue        func(childComplexity int) int
		SalesMedValue        func(childComplexity int) int
		SalesMinValue        func(childComplexity int) int
		SixmonthPercentage   func(childComplexity int) int
		Ss                   func(childComplexity int) int
		Supply               func(childComplexity int) int
		TotalListings        func(childComplexity int) int
		TotalSales           func(childComplexity int) int
		ZntComments          func(childComplexity int) int
	}

	PipelineNote struct {
		CreatedBy                   func(childComplexity int) int
		CreatedDateTime             func(childComplexity int) int
		ExteriorRepairDescription1  func(childComplexity int) int
		ExteriorRepairDescription10 func(childComplexity int) int
		ExteriorRepairDescription2  func(childComplexity int) int
		ExteriorRepairDescription3  func(childComplexity int) int
		ExteriorRepairDescription4  func(childComplexity int) int
		ExteriorRepairDescription5  func(childComplexity int) int
		ExteriorRepairDescription6  func(childComplexity int) int
		ExteriorRepairDescription7  func(childComplexity int) int
		ExteriorRepairDescription8  func(childComplexity int) int
		ExteriorRepairDescription9  func(childComplexity int) int
		ExteriorRepairPrice1        func(childComplexity int) int
		ExteriorRepairPrice10       func(childComplexity int) int
		ExteriorRepairPrice2        func(childComplexity int) int
		ExteriorRepairPrice3        func(childComplexity int) int
		ExteriorRepairPrice4        func(childComplexity int) int
		ExteriorRepairPrice5        func(childComplexity int) int
		ExteriorRepairPrice6        func(childComplexity int) int
		ExteriorRepairPrice7        func(childComplexity int) int
		ExteriorRepairPrice8        func(childComplexity int) int
		ExteriorRepairPrice9        func(childComplexity int) int
		ExteriorRepairPriceTotal    func(childComplexity int) int
		ID                          func(childComplexity int) int
		InspectionNotes             func(childComplexity int) int
		InteriorRepairDescription1  func(childComplexity int) int
		InteriorRepairDescription10 func(childComplexity int) int
		InteriorRepairDescription2  func(childComplexity int) int
		InteriorRepairDescription3  func(childComplexity int) int
		InteriorRepairDescription4  func(childComplexity int) int
		InteriorRepairDescription5  func(childComplexity int) int
		InteriorRepairDescription6  func(childComplexity int) int
		InteriorRepairDescription7  func(childComplexity int) int
		InteriorRepairDescription8  func(childComplexity int) int
		InteriorRepairDescription9  func(childComplexity int) int
		InteriorRepairPrice1        func(childComplexity int) int
		InteriorRepairPrice10       func(childComplexity int) int
		InteriorRepairPrice2        func(childComplexity int) int
		InteriorRepairPrice3        func(childComplexity int) int
		InteriorRepairPrice4        func(childComplexity int) int
		InteriorRepairPrice5        func(childComplexity int) int
		InteriorRepairPrice6        func(childComplexity int) int
		InteriorRepairPrice7        func(childComplexity int) int
		InteriorRepairPrice8        func(childComplexity int) int
		InteriorRepairPrice9        func(childComplexity int) int
		InteriorRepairPriceTotal    func(childComplexity int) int
		OrderNotes                  func(childComplexity int) int
	}

	PipelineNoteResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PipelinePhoto struct {
		CreatedBy       func(childComplexity int) int
		CreatedDateTime func(childComplexity int) int
		FileName        func(childComplexity int) int
		FileSize        func(childComplexity int) int
		ID              func(childComplexity int) int
		IsSubmitted     func(childComplexity int) int
		URL             func(childComplexity int) int
	}

	PipelinePhotoResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PipelineQualityControl struct {
		CreatedBy       func(childComplexity int) int
		CreatedDateTime func(childComplexity int) int
		OrderNotes      func(childComplexity int) int
	}

	PipelineQualityControlAndNote struct {
		Category  func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		Date      func(childComplexity int) int
		Message   func(childComplexity int) int
	}

	PipelineQualityControlAndNoteResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PipelineQualityControlResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PipelineRepair struct {
		ExteriorRepairDescription1  func(childComplexity int) int
		ExteriorRepairDescription10 func(childComplexity int) int
		ExteriorRepairDescription2  func(childComplexity int) int
		ExteriorRepairDescription3  func(childComplexity int) int
		ExteriorRepairDescription4  func(childComplexity int) int
		ExteriorRepairDescription5  func(childComplexity int) int
		ExteriorRepairDescription6  func(childComplexity int) int
		ExteriorRepairDescription7  func(childComplexity int) int
		ExteriorRepairDescription8  func(childComplexity int) int
		ExteriorRepairDescription9  func(childComplexity int) int
		ExteriorRepairPrice1        func(childComplexity int) int
		ExteriorRepairPrice10       func(childComplexity int) int
		ExteriorRepairPrice2        func(childComplexity int) int
		ExteriorRepairPrice3        func(childComplexity int) int
		ExteriorRepairPrice4        func(childComplexity int) int
		ExteriorRepairPrice5        func(childComplexity int) int
		ExteriorRepairPrice6        func(childComplexity int) int
		ExteriorRepairPrice7        func(childComplexity int) int
		ExteriorRepairPrice8        func(childComplexity int) int
		ExteriorRepairPrice9        func(childComplexity int) int
		ExteriorRepairPriceTotal    func(childComplexity int) int
		InteriorRepairDescription1  func(childComplexity int) int
		InteriorRepairDescription10 func(childComplexity int) int
		InteriorRepairDescription2  func(childComplexity int) int
		InteriorRepairDescription3  func(childComplexity int) int
		InteriorRepairDescription4  func(childComplexity int) int
		InteriorRepairDescription5  func(childComplexity int) int
		InteriorRepairDescription6  func(childComplexity int) int
		InteriorRepairDescription7  func(childComplexity int) int
		InteriorRepairDescription8  func(childComplexity int) int
		InteriorRepairDescription9  func(childComplexity int) int
		InteriorRepairPrice1        func(childComplexity int) int
		InteriorRepairPrice10       func(childComplexity int) int
		InteriorRepairPrice2        func(childComplexity int) int
		InteriorRepairPrice3        func(childComplexity int) int
		InteriorRepairPrice4        func(childComplexity int) int
		InteriorRepairPrice5        func(childComplexity int) int
		InteriorRepairPrice6        func(childComplexity int) int
		InteriorRepairPrice7        func(childComplexity int) int
		InteriorRepairPrice8        func(childComplexity int) int
		InteriorRepairPrice9        func(childComplexity int) int
		InteriorRepairPriceTotal    func(childComplexity int) int
	}

	PipelineResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PipelineState struct {
		IsNewOrder          func(childComplexity int) int
		IsRush              func(childComplexity int) int
		MaxDailyVolume      func(childComplexity int) int
		OAIsAutoAssign      func(childComplexity int) int
		OAOfferLimitInMin   func(childComplexity int) int
		OPConditionReport   func(childComplexity int) int
		OPDataEntry         func(childComplexity int) int
		OPExterior          func(childComplexity int) int
		OPInitialBpo        func(childComplexity int) int
		OPInspection        func(childComplexity int) int
		OPInterior          func(childComplexity int) int
		OPRentalAddendum    func(childComplexity int) int
		OPRush              func(childComplexity int) int
		OPSuperRush         func(childComplexity int) int
		OrderMessage        func(childComplexity int) int
		PCIsAcceptOrder     func(childComplexity int) int
		PCcatchTime         func(childComplexity int) int
		QCElapseTime        func(childComplexity int) int
		StandByAutoComplete func(childComplexity int) int
		TLBusy              func(childComplexity int) int
		TLModerate          func(childComplexity int) int
		TLSlow              func(childComplexity int) int
		TTBusy              func(childComplexity int) int
		TTMax               func(childComplexity int) int
		TTModerate          func(childComplexity int) int
		TTSlow              func(childComplexity int) int
		TodayOrderCount     func(childComplexity int) int
	}

	PriceModule struct {
		Credits                  func(childComplexity int) int
		OrderconditionReport     func(childComplexity int) int
		OrderdataEntry           func(childComplexity int) int
		Orderexterior            func(childComplexity int) int
		Orderinterior            func(childComplexity int) int
		OrderrentalAddendum      func(childComplexity int) int
		Orderrush                func(childComplexity int) int
		OrdersuperRush           func(childComplexity int) int
		PhotoExterior            func(childComplexity int) int
		PhotoInteriorAppointment func(childComplexity int) int
		PhotoInteriorVacantLb    func(childComplexity int) int
	}

	ProfileDocResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	QcCompleted struct {
		Dd                 func(childComplexity int) int
		FullRec            func(childComplexity int) int
		Month              func(childComplexity int) int
		Normal             func(childComplexity int) int
		QualityControlName func(childComplexity int) int
		Total              func(childComplexity int) int
		Year               func(childComplexity int) int
	}

	QcHistory struct {
		Address                     func(childComplexity int) int
		Assign                      func(childComplexity int) int
		AssignID                    func(childComplexity int) int
		AuthorID                    func(childComplexity int) int
		AuthorName                  func(childComplexity int) int
		Company                     func(childComplexity int) int
		Country                     func(childComplexity int) int
		CreatedDateTime             func(childComplexity int) int
		ID                          func(childComplexity int) int
		IfillProcessModifiedDate    func(childComplexity int) int
		IsInitialBpo                func(childComplexity int) int
		IsInspection                func(childComplexity int) int
		IsProcessIfill              func(childComplexity int) int
		IsProcessIform              func(childComplexity int) int
		IsProcessReview             func(childComplexity int) int
		IsRushOrder                 func(childComplexity int) int
		IsSuperRush                 func(childComplexity int) int
		IsSyncedToTurboBpo          func(childComplexity int) int
		LastUpdateTime              func(childComplexity int) int
		Location                    func(childComplexity int) int
		Mls                         func(childComplexity int) int
		Objective                   func(childComplexity int) int
		OrderFee                    func(childComplexity int) int
		OrderNumber                 func(childComplexity int) int
		OrderType                   func(childComplexity int) int
		PipelineDocTotal            func(childComplexity int) int
		PipelineID                  func(childComplexity int) int
		PipelineNoteTotal           func(childComplexity int) int
		PipelinePhotoTotal          func(childComplexity int) int
		PipelineQualityControlTotal func(childComplexity int) int
		ProcessIformModifiedDate    func(childComplexity int) int
		ProcessReviewModifiedDate   func(childComplexity int) int
		QcHistory                   func(childComplexity int) int
		RatingFeedback              func(childComplexity int) int
		RatingOverAll               func(childComplexity int) int
		RatingQuality               func(childComplexity int) int
		RatingTimeliness            func(childComplexity int) int
		Status                      func(childComplexity int) int
		TotalFee                    func(childComplexity int) int
		Type                        func(childComplexity int) int
	}

	QcHistoryResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	QcRating struct {
		ContractorName func(childComplexity int) int
		Month          func(childComplexity int) int
		NoOfOders      func(childComplexity int) int
		NoOfQcL        func(childComplexity int) int
		PercentOfQc    func(childComplexity int) int
		Year           func(childComplexity int) int
	}

	QcRequest struct {
		Address         func(childComplexity int) int
		Company         func(childComplexity int) int
		ID              func(childComplexity int) int
		NotesTotal      func(childComplexity int) int
		OrderAssignee   func(childComplexity int) int
		OrderAssigneeID func(childComplexity int) int
		OrderNumber     func(childComplexity int) int
		PipelineID      func(childComplexity int) int
		QcAssignee      func(childComplexity int) int
		QcID            func(childComplexity int) int
		QcTotal         func(childComplexity int) int
		RequestDate     func(childComplexity int) int
		RequestType     func(childComplexity int) int
		Status          func(childComplexity int) int
		Type            func(childComplexity int) int
	}

	QcRequestResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	QualityControl struct {
		Address           func(childComplexity int) int
		Assignee          func(childComplexity int) int
		AssigneeID        func(childComplexity int) int
		ClientName        func(childComplexity int) int
		CreatedDateTime   func(childComplexity int) int
		History           func(childComplexity int) int
		ID                func(childComplexity int) int
		LastUpdateTime    func(childComplexity int) int
		OrderContractor   func(childComplexity int) int
		OrderContractorID func(childComplexity int) int
		OrderNumber       func(childComplexity int) int
		OrderType         func(childComplexity int) int
		PipelineID        func(childComplexity int) int
		Requests          func(childComplexity int) int
		Status            func(childComplexity int) int
	}

	QualityControlHistory struct {
		Cratedby        func(childComplexity int) int
		CurrentAssignee func(childComplexity int) int
		Date            func(childComplexity int) int
		NewAssignee     func(childComplexity int) int
		Reason          func(childComplexity int) int
		Status          func(childComplexity int) int
	}

	QualityControlResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Query struct {
		AllAccount                       func(childComplexity int, filter *models.AccountFilterInput) int
		AllAdjustment                    func(childComplexity int, userID *string) int
		AllAnnouncement                  func(childComplexity int, filter *models.AnnouncementFilterInput) int
		AllBalance                       func(childComplexity int, filter *models.BalanceFilterInput) int
		AllBilling                       func(childComplexity int, filter *models.BillingFilterInput) int
		AllCheckout                      func(childComplexity int, filter *models.CheckoutFilterInput) int
		AllComment                       func(childComplexity int, userID *string) int
		AllCompany                       func(childComplexity int, filter *models.CompanyFilterInput) int
		AllCredit                        func(childComplexity int) int
		AllCreditLedger                  func(childComplexity int, userID *string, filter *models.FilterInput) int
		AllCredits                       func(childComplexity int, filter *models.CreditsFilterInput) int
		AllEmailTemplate                 func(childComplexity int, filter *models.EmailTemplateFilterInput) int
		AllHeader                        func(childComplexity int, filter *models.HeaderFilterInput) int
		AllHeaderDetail                  func(childComplexity int, parentID string, filter *models.HeaderFilterInput) int
		AllIformGrid                     func(childComplexity int, pipelineID string, filter *models.IformGridFilterInput) int
		AllInstruction                   func(childComplexity int, filter *models.InstructionFilterInput) int
		AllInvoice                       func(childComplexity int, filter *models.InvoiceFilterInput) int
		AllInvoiceRequest                func(childComplexity int, filter *models.InvoiceRequestFilterInput) int
		AllInvoiceRequestHistory         func(childComplexity int, filter *models.FilterInput) int
		AllLoginLog                      func(childComplexity int, filter *models.LoginLogFilterInput) int
		AllOrderAnalytics                func(childComplexity int, filter models.OrderAnalyticsFilterInput) int
		AllOrderSubmit                   func(childComplexity int, year int) int
		AllPermissionGroup               func(childComplexity int, filter *models.PermissionGroupFilterInput) int
		AllPipeline                      func(childComplexity int, filter *models.PipelineFilterInput) int
		AllPipelineComparable            func(childComplexity int, pipelineID string, filter *models.PipelineComparableFilterInput) int
		AllPipelineDoc                   func(childComplexity int, pipelineID string, filter *models.FilterInput) int
		AllPipelineNote                  func(childComplexity int, pipelineID string, filter *models.FilterInput) int
		AllPipelinePhoto                 func(childComplexity int, pipelineID string, filter *models.FilterInput) int
		AllPipelineQualityControl        func(childComplexity int, pipelineID string, filter *models.FilterInput) int
		AllPipelineQualityControlAndNote func(childComplexity int, pipelineID string, filter *models.FilterInput) int
		AllProfileDoc                    func(childComplexity int, userID *string, filter *models.FilterInput) int
		AllQcCompleted                   func(childComplexity int, year int) int
		AllQcHistory                     func(childComplexity int, filter *models.QcHistoryFilterInput) int
		AllQcRating                      func(childComplexity int, year int, typeArg *string) int
		AllQcRequest                     func(childComplexity int, filter *models.QcRequestFilterInput) int
		AllQualityControl                func(childComplexity int, filter *models.FilterInput) int
		AllRequest                       func(childComplexity int, filter *models.RequestFilterInput) int
		AllReview                        func(childComplexity int, filter *models.FilterInput) int
		AllSalesAnalytics                func(childComplexity int, filter models.SalesAnalyticsFilterInput) int
		AllSession                       func(childComplexity int, filter *models.SessionFilterInput) int
		AllUser                          func(childComplexity int, filter *models.UserFilterInput) int
		Company                          func(childComplexity int, id string) int
		Default                          func(childComplexity int, userID *string) int
		HeaderCode                       func(childComplexity int, codes []*string) int
		Iform                            func(childComplexity int, pipelineID string) int
		IformTemp                        func(childComplexity int, pipelineID string) int
		Pipeline                         func(childComplexity int, id string) int
		PipelineNeighborhood             func(childComplexity int, pipelineID string) int
		PipelineRepair                   func(childComplexity int, pipelineID string) int
		PipelineState                    func(childComplexity int) int
		PriceModule                      func(childComplexity int) int
		Profile                          func(childComplexity int) int
		User                             func(childComplexity int, id string) int
	}

	Request struct {
		Address         func(childComplexity int) int
		Company         func(childComplexity int) int
		ConditionType   func(childComplexity int) int
		CreatedDateTime func(childComplexity int) int
		ID              func(childComplexity int) int
		OrderNumber     func(childComplexity int) int
		OrderType       func(childComplexity int) int
		PipelineID      func(childComplexity int) int
		Remarks         func(childComplexity int) int
		RequestedBy     func(childComplexity int) int
		RequestedByID   func(childComplexity int) int
		Status          func(childComplexity int) int
		Type            func(childComplexity int) int
	}

	RequestResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Review struct {
		Address           func(childComplexity int) int
		AssignedTo        func(childComplexity int) int
		FileName          func(childComplexity int) int
		ID                func(childComplexity int) int
		OrderNumber       func(childComplexity int) int
		PipelineID        func(childComplexity int) int
		ReviewBy          func(childComplexity int) int
		ReviewDate        func(childComplexity int) int
		ReviewDescription func(childComplexity int) int
		URL               func(childComplexity int) int
	}

	ReviewResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SalesAnalytics struct {
		CompletedOrder func(childComplexity int) int
		Day            func(childComplexity int) int
	}

	Session struct {
		End         func(childComplexity int) int
		ID          func(childComplexity int) int
		InvoiceDate func(childComplexity int) int
		Start       func(childComplexity int) int
	}

	SessionResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Token struct {
		Token func(childComplexity int) int
	}

	User struct {
		About                     func(childComplexity int) int
		Address                   func(childComplexity int) int
		Agent                     func(childComplexity int) int
		AgentLicense              func(childComplexity int) int
		AssignActive              func(childComplexity int) int
		AssignDate                func(childComplexity int) int
		AssignHold                func(childComplexity int) int
		AssignRush                func(childComplexity int) int
		AssignStandby             func(childComplexity int) int
		AssignmentPercentage      func(childComplexity int) int
		Broker                    func(childComplexity int) int
		BrokerLicense             func(childComplexity int) int
		Brokerage                 func(childComplexity int) int
		City                      func(childComplexity int) int
		Company                   func(childComplexity int) int
		CompanyList               func(childComplexity int) int
		CreatedDateTime           func(childComplexity int) int
		Credit                    func(childComplexity int) int
		Disclaimer                func(childComplexity int) int
		Email                     func(childComplexity int) int
		FirstName                 func(childComplexity int) int
		Hdyfu                     func(childComplexity int) int
		ID                        func(childComplexity int) int
		ImABroker                 func(childComplexity int) int
		IsEnableEmailNotification func(childComplexity int) int
		LastName                  func(childComplexity int) int
		LastUpdateTime            func(childComplexity int) int
		LicenseDate               func(childComplexity int) int
		LicenseExpirationDate     func(childComplexity int) int
		Logs                      func(childComplexity int) int
		Mao                       func(childComplexity int) int
		OrderTotal                func(childComplexity int) int
		PermissionGroupID         func(childComplexity int) int
		PermissionList            func(childComplexity int) int
		PhoneConsultation         func(childComplexity int) int
		PhoneNumber               func(childComplexity int) int
		PriceModule               func(childComplexity int) int
		ProfilePicture            func(childComplexity int) int
		Roles                     func(childComplexity int) int
		State                     func(childComplexity int) int
		Status                    func(childComplexity int) int
		Theme                     func(childComplexity int) int
		Tier                      func(childComplexity int) int
		Title                     func(childComplexity int) int
		YearOfExperience          func(childComplexity int) int
		ZipCode                   func(childComplexity int) int
	}

	UserResult struct {
		Results    func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}
}

type MutationResolver interface {
	Login(ctx context.Context, email string, password string) (*models.Token, error)
	RegisterUser(ctx context.Context, input models.RegisterInput) (string, error)
	ForgetPassword(ctx context.Context, email string) (bool, error)
	ResetPassword(ctx context.Context, token string, newPassword string) (bool, error)
	UpdateProfile(ctx context.Context, input models.ProfileInput) (bool, error)
	SaveProfileDoc(ctx context.Context, input models.ProfileDocInput) (string, error)
	DeleteProfileDoc(ctx context.Context, id string) (bool, error)
	SaveAccount(ctx context.Context, input models.AccountInput) (string, error)
	UpdateAccount(ctx context.Context, id string, input models.AccountInput) (bool, error)
	DeleteAccount(ctx context.Context, id string) (bool, error)
	UpdateAdjustment(ctx context.Context, id string, value float64) (bool, error)
	SetAdjustmentDefault(ctx context.Context) (bool, error)
	SaveComment(ctx context.Context, input models.CommentInput) (string, error)
	UpdateComment(ctx context.Context, id string, value string) (bool, error)
	DeleteComment(ctx context.Context, id string) (bool, error)
	SetCommentDefault(ctx context.Context) (bool, error)
	UpdateDefault(ctx context.Context, input models.DefaultInput) (bool, error)
	SavePipeline(ctx context.Context, input models.PipelineInput) (string, error)
	UpdatePipeline(ctx context.Context, id string, input models.UpdatePipelineInput) (bool, error)
	SavePipelineQualityControl(ctx context.Context, pipelineID string, message string) (string, error)
	SavePipelineDoc(ctx context.Context, pipelineID string, input models.PipelineDocInput) (string, error)
	DeletePipelineDoc(ctx context.Context, id string) (bool, error)
	SavePipelinePhoto(ctx context.Context, pipelineID string, input models.PipelinePhotoInput) (string, error)
	DeletePipelinePhoto(ctx context.Context, id string) (bool, error)
	SubmitPipelinePhoto(ctx context.Context, id string, isSubmitPipelinePhoto bool) (bool, error)
	SavePipelineNote(ctx context.Context, pipelineID string, input models.SavePipelineNoteInput) (string, error)
	SaveCredit(ctx context.Context, input models.SaveCreditInput) (string, error)
	AddCreditLedger(ctx context.Context, input models.AddCreditLedgerInput) (string, error)
	SaveCompany(ctx context.Context, input models.CompanyInput) (string, error)
	UpdateCompany(ctx context.Context, id string, input models.CompanyInput) (bool, error)
	DeleteCompany(ctx context.Context, id string) (bool, error)
	SaveUser(ctx context.Context, input models.SaveUserInput) (string, error)
	UpdatePipelineState(ctx context.Context, input models.UpdatePipelineStateInput) (bool, error)
	SaveEmailTemplate(ctx context.Context, input models.SaveEmailTemplateInput) (string, error)
	UpdateEmailTemplate(ctx context.Context, id string, input models.UpdateEmailTemplateInput) (bool, error)
	DeleteEmailTemplate(ctx context.Context, id string) (bool, error)
	SaveHeader(ctx context.Context, name string) (string, error)
	SaveHeaderDetail(ctx context.Context, parentID string, name string) (string, error)
	UpdateHeader(ctx context.Context, id string, name string) (bool, error)
	DeleteHeader(ctx context.Context, id string) (bool, error)
	SaveInstruction(ctx context.Context, input models.SaveInstructionInput) (string, error)
	DeleteInstruction(ctx context.Context, id string) (bool, error)
	SaveQualityControl(ctx context.Context, pipelineID string) (string, error)
	UpdateQualityControl(ctx context.Context, id string, input models.UpdateQualityControlInput) (bool, error)
	UpdatePipelineNeighborhood(ctx context.Context, pipelineID string, input models.UpdatePipelineNeighborhoodInput) (bool, error)
	SaveReview(ctx context.Context, input models.SaveReviewInput) (string, error)
	UpdateReview(ctx context.Context, id string, input models.UpdateReviewInput) (bool, error)
	DeleteReview(ctx context.Context, id string) (bool, error)
	UpdateRequest(ctx context.Context, id string, input models.UpdateRequestInput) (bool, error)
	SaveRequest(ctx context.Context, pipelineID string) (string, error)
	SavePipelineQualityControlAndNote(ctx context.Context, pipelineID string, input models.SavePipelineQualityControlAndNoteInput) (string, error)
	SaveInvoice(ctx context.Context, input models.SaveInvoiceInput) (string, error)
	UpdateInvoice(ctx context.Context, id string, input models.UpdateInvoiceInput) (bool, error)
	CancelInvoice(ctx context.Context, id string, reason *string) (bool, error)
	UpdateIform(ctx context.Context, pipelineID string, input models.UpdateIformInput) (bool, error)
	UpdateIformTemp(ctx context.Context, pipelineID string, input models.UpdateIformTempInput) (bool, error)
	UpdatePipelineRepair(ctx context.Context, pipelineID string, input models.UpdatePipelineRepairInput) (bool, error)
	UpdateUser(ctx context.Context, id string, input models.UpdateUserInput) (bool, error)
	SaveAnnouncement(ctx context.Context, input models.AnnouncementInput) (string, error)
	UpdateAnnouncement(ctx context.Context, id string, input models.AnnouncementInput) (bool, error)
	DeleteAnnouncement(ctx context.Context, id string) (bool, error)
	SaveSession(ctx context.Context, userID string, invoiceDate string) (string, error)
	StopSession(ctx context.Context, userID string) (bool, error)
	UpdateSession(ctx context.Context, id string, input models.UpdateSessionInput) (bool, error)
	SavePermissionGroup(ctx context.Context, input models.PermissionGroupInput) (string, error)
	UpdatePermissionGroup(ctx context.Context, id string, input models.PermissionGroupInput) (bool, error)
	DeletePermissionGroup(ctx context.Context, id string) (bool, error)
	SavePipelineComparable(ctx context.Context, pipelineID string, input models.SavePipelineComparableInput) (string, error)
	UpdatePipelineComparable(ctx context.Context, id string, mls string) (bool, error)
	DeletePipelineComparable(ctx context.Context, id string) (bool, error)
	SaveBilling(ctx context.Context, input models.SaveBillingInput) (string, error)
	UpdateBilling(ctx context.Context, id string, input models.UpdateBillingInput) (bool, error)
	DeleteBilling(ctx context.Context, id string) (bool, error)
	SaveIformGrid(ctx context.Context, pipelineID string, input models.SaveIformGridInput) (string, error)
	DeleteIformGrid(ctx context.Context, id string) (bool, error)
	VerifyPaypalTransaction(ctx context.Context, paypalOrderID string, billingID *string) (bool, error)
	CreateBillingExcel(ctx context.Context, id string) (string, error)
	UpdateQcRequest(ctx context.Context, id string, input models.UpdateQcRequestInput) (bool, error)
	ContinueSession(ctx context.Context, userID string) (bool, error)
}
type QueryResolver interface {
	Profile(ctx context.Context) (*models.User, error)
	AllProfileDoc(ctx context.Context, userID *string, filter *models.FilterInput) (*models.ProfileDocResult, error)
	AllAccount(ctx context.Context, filter *models.AccountFilterInput) (*models.AccountResult, error)
	AllAdjustment(ctx context.Context, userID *string) ([]*models.Adjustment, error)
	AllComment(ctx context.Context, userID *string) ([]*models.Comment, error)
	Default(ctx context.Context, userID *string) (*models.Default, error)
	AllPipeline(ctx context.Context, filter *models.PipelineFilterInput) (*models.PipelineResult, error)
	AllPipelineQualityControl(ctx context.Context, pipelineID string, filter *models.FilterInput) (*models.PipelineQualityControlResult, error)
	AllPipelineDoc(ctx context.Context, pipelineID string, filter *models.FilterInput) (*models.PipelineDocResult, error)
	AllPipelinePhoto(ctx context.Context, pipelineID string, filter *models.FilterInput) (*models.PipelinePhotoResult, error)
	AllPipelineNote(ctx context.Context, pipelineID string, filter *models.FilterInput) (*models.PipelineNoteResult, error)
	AllCredit(ctx context.Context) ([]*models.Credit, error)
	AllCompany(ctx context.Context, filter *models.CompanyFilterInput) (*models.CompanyResult, error)
	Company(ctx context.Context, id string) (*models.Company, error)
	AllUser(ctx context.Context, filter *models.UserFilterInput) (*models.UserResult, error)
	PipelineState(ctx context.Context) (*models.PipelineState, error)
	AllEmailTemplate(ctx context.Context, filter *models.EmailTemplateFilterInput) (*models.EmailTemplateResult, error)
	AllHeader(ctx context.Context, filter *models.HeaderFilterInput) (*models.HeaderResult, error)
	AllHeaderDetail(ctx context.Context, parentID string, filter *models.HeaderFilterInput) (*models.HeaderResult, error)
	HeaderCode(ctx context.Context, codes []*string) ([]*models.HeaderCode, error)
	AllInstruction(ctx context.Context, filter *models.InstructionFilterInput) (*models.InstructionResult, error)
	AllSalesAnalytics(ctx context.Context, filter models.SalesAnalyticsFilterInput) ([]*models.SalesAnalytics, error)
	AllOrderAnalytics(ctx context.Context, filter models.OrderAnalyticsFilterInput) ([]*models.OrderAnalytics, error)
	AllQualityControl(ctx context.Context, filter *models.FilterInput) (*models.QualityControlResult, error)
	User(ctx context.Context, id string) (*models.User, error)
	AllPipelineQualityControlAndNote(ctx context.Context, pipelineID string, filter *models.FilterInput) (*models.PipelineQualityControlAndNoteResult, error)
	PipelineNeighborhood(ctx context.Context, pipelineID string) (*models.PipelineNeighborhood, error)
	AllBalance(ctx context.Context, filter *models.BalanceFilterInput) (*models.BalanceResult, error)
	AllCheckout(ctx context.Context, filter *models.CheckoutFilterInput) (*models.CheckoutResult, error)
	AllCredits(ctx context.Context, filter *models.CreditsFilterInput) (*models.CreditsResult, error)
	AllQcRating(ctx context.Context, year int, typeArg *string) ([]*models.QcRating, error)
	AllOrderSubmit(ctx context.Context, year int) ([]*models.OrderSubmit, error)
	AllQcHistory(ctx context.Context, filter *models.QcHistoryFilterInput) (*models.QcHistoryResult, error)
	AllQcRequest(ctx context.Context, filter *models.QcRequestFilterInput) (*models.QcRequestResult, error)
	AllReview(ctx context.Context, filter *models.FilterInput) (*models.ReviewResult, error)
	AllRequest(ctx context.Context, filter *models.RequestFilterInput) (*models.RequestResult, error)
	AllQcCompleted(ctx context.Context, year int) ([]*models.QcCompleted, error)
	Pipeline(ctx context.Context, id string) (*models.Pipeline, error)
	AllInvoice(ctx context.Context, filter *models.InvoiceFilterInput) ([]*models.Invoice, error)
	AllInvoiceRequest(ctx context.Context, filter *models.InvoiceRequestFilterInput) (*models.InvoiceRequestResult, error)
	AllInvoiceRequestHistory(ctx context.Context, filter *models.FilterInput) (*models.InvoiceRequestHistoryResult, error)
	Iform(ctx context.Context, pipelineID string) (*models.Iform, error)
	IformTemp(ctx context.Context, pipelineID string) (*models.IformTemp, error)
	PipelineRepair(ctx context.Context, pipelineID string) (*models.PipelineRepair, error)
	AllAnnouncement(ctx context.Context, filter *models.AnnouncementFilterInput) (*models.AnnouncementResult, error)
	AllSession(ctx context.Context, filter *models.SessionFilterInput) (*models.SessionResult, error)
	AllPermissionGroup(ctx context.Context, filter *models.PermissionGroupFilterInput) (*models.PermissionGroupResult, error)
	AllLoginLog(ctx context.Context, filter *models.LoginLogFilterInput) (*models.LoginLogResult, error)
	AllPipelineComparable(ctx context.Context, pipelineID string, filter *models.PipelineComparableFilterInput) (*models.PipelineComparableResult, error)
	AllBilling(ctx context.Context, filter *models.BillingFilterInput) (*models.BillingResult, error)
	AllIformGrid(ctx context.Context, pipelineID string, filter *models.IformGridFilterInput) (*models.IformGridResult, error)
	AllCreditLedger(ctx context.Context, userID *string, filter *models.FilterInput) (*models.CreditLedgerResult, error)
	PriceModule(ctx context.Context) (*models.PriceModule, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Account.answer1":
		if e.complexity.Account.Answer1 == nil {
			break
		}

		return e.complexity.Account.Answer1(childComplexity), true

	case "Account.answer2":
		if e.complexity.Account.Answer2 == nil {
			break
		}

		return e.complexity.Account.Answer2(childComplexity), true

	case "Account.answer3":
		if e.complexity.Account.Answer3 == nil {
			break
		}

		return e.complexity.Account.Answer3(childComplexity), true

	case "Account.company":
		if e.complexity.Account.Company == nil {
			break
		}

		return e.complexity.Account.Company(childComplexity), true

	case "Account.createdDateTime":
		if e.complexity.Account.CreatedDateTime == nil {
			break
		}

		return e.complexity.Account.CreatedDateTime(childComplexity), true

	case "Account.id":
		if e.complexity.Account.ID == nil {
			break
		}

		return e.complexity.Account.ID(childComplexity), true

	case "Account.LastUpdateTime":
		if e.complexity.Account.LastUpdateTime == nil {
			break
		}

		return e.complexity.Account.LastUpdateTime(childComplexity), true

	case "Account.logs":
		if e.complexity.Account.Logs == nil {
			break
		}

		return e.complexity.Account.Logs(childComplexity), true

	case "Account.others":
		if e.complexity.Account.Others == nil {
			break
		}

		return e.complexity.Account.Others(childComplexity), true

	case "Account.password":
		if e.complexity.Account.Password == nil {
			break
		}

		return e.complexity.Account.Password(childComplexity), true

	case "Account.question1":
		if e.complexity.Account.Question1 == nil {
			break
		}

		return e.complexity.Account.Question1(childComplexity), true

	case "Account.question2":
		if e.complexity.Account.Question2 == nil {
			break
		}

		return e.complexity.Account.Question2(childComplexity), true

	case "Account.question3":
		if e.complexity.Account.Question3 == nil {
			break
		}

		return e.complexity.Account.Question3(childComplexity), true

	case "Account.recordType":
		if e.complexity.Account.RecordType == nil {
			break
		}

		return e.complexity.Account.RecordType(childComplexity), true

	case "Account.username":
		if e.complexity.Account.Username == nil {
			break
		}

		return e.complexity.Account.Username(childComplexity), true

	case "Account.webSite":
		if e.complexity.Account.WebSite == nil {
			break
		}

		return e.complexity.Account.WebSite(childComplexity), true

	case "AccountResult.results":
		if e.complexity.AccountResult.Results == nil {
			break
		}

		return e.complexity.AccountResult.Results(childComplexity), true

	case "AccountResult.totalCount":
		if e.complexity.AccountResult.TotalCount == nil {
			break
		}

		return e.complexity.AccountResult.TotalCount(childComplexity), true

	case "Adjustment.category":
		if e.complexity.Adjustment.Category == nil {
			break
		}

		return e.complexity.Adjustment.Category(childComplexity), true

	case "Adjustment.from":
		if e.complexity.Adjustment.From == nil {
			break
		}

		return e.complexity.Adjustment.From(childComplexity), true

	case "Adjustment.id":
		if e.complexity.Adjustment.ID == nil {
			break
		}

		return e.complexity.Adjustment.ID(childComplexity), true

	case "Adjustment.label":
		if e.complexity.Adjustment.Label == nil {
			break
		}

		return e.complexity.Adjustment.Label(childComplexity), true

	case "Adjustment.order":
		if e.complexity.Adjustment.Order == nil {
			break
		}

		return e.complexity.Adjustment.Order(childComplexity), true

	case "Adjustment.to":
		if e.complexity.Adjustment.To == nil {
			break
		}

		return e.complexity.Adjustment.To(childComplexity), true

	case "Adjustment.value":
		if e.complexity.Adjustment.Value == nil {
			break
		}

		return e.complexity.Adjustment.Value(childComplexity), true

	case "Announcement.createdBy":
		if e.complexity.Announcement.CreatedBy == nil {
			break
		}

		return e.complexity.Announcement.CreatedBy(childComplexity), true

	case "Announcement.createdDateTime":
		if e.complexity.Announcement.CreatedDateTime == nil {
			break
		}

		return e.complexity.Announcement.CreatedDateTime(childComplexity), true

	case "Announcement.endDate":
		if e.complexity.Announcement.EndDate == nil {
			break
		}

		return e.complexity.Announcement.EndDate(childComplexity), true

	case "Announcement.id":
		if e.complexity.Announcement.ID == nil {
			break
		}

		return e.complexity.Announcement.ID(childComplexity), true

	case "Announcement.message":
		if e.complexity.Announcement.Message == nil {
			break
		}

		return e.complexity.Announcement.Message(childComplexity), true

	case "Announcement.startDate":
		if e.complexity.Announcement.StartDate == nil {
			break
		}

		return e.complexity.Announcement.StartDate(childComplexity), true

	case "Announcement.subject":
		if e.complexity.Announcement.Subject == nil {
			break
		}

		return e.complexity.Announcement.Subject(childComplexity), true

	case "AnnouncementResult.results":
		if e.complexity.AnnouncementResult.Results == nil {
			break
		}

		return e.complexity.AnnouncementResult.Results(childComplexity), true

	case "AnnouncementResult.totalCount":
		if e.complexity.AnnouncementResult.TotalCount == nil {
			break
		}

		return e.complexity.AnnouncementResult.TotalCount(childComplexity), true

	case "Balance.client":
		if e.complexity.Balance.Client == nil {
			break
		}

		return e.complexity.Balance.Client(childComplexity), true

	case "Balance.other":
		if e.complexity.Balance.Other == nil {
			break
		}

		return e.complexity.Balance.Other(childComplexity), true

	case "Balance.paidAmount":
		if e.complexity.Balance.PaidAmount == nil {
			break
		}

		return e.complexity.Balance.PaidAmount(childComplexity), true

	case "Balance.total":
		if e.complexity.Balance.Total == nil {
			break
		}

		return e.complexity.Balance.Total(childComplexity), true

	case "Balance.unpaid":
		if e.complexity.Balance.Unpaid == nil {
			break
		}

		return e.complexity.Balance.Unpaid(childComplexity), true

	case "BalanceResult.results":
		if e.complexity.BalanceResult.Results == nil {
			break
		}

		return e.complexity.BalanceResult.Results(childComplexity), true

	case "BalanceResult.totalCount":
		if e.complexity.BalanceResult.TotalCount == nil {
			break
		}

		return e.complexity.BalanceResult.TotalCount(childComplexity), true

	case "Billing.date":
		if e.complexity.Billing.Date == nil {
			break
		}

		return e.complexity.Billing.Date(childComplexity), true

	case "Billing.dateFrom":
		if e.complexity.Billing.DateFrom == nil {
			break
		}

		return e.complexity.Billing.DateFrom(childComplexity), true

	case "Billing.dateTo":
		if e.complexity.Billing.DateTo == nil {
			break
		}

		return e.complexity.Billing.DateTo(childComplexity), true

	case "Billing.dueDate":
		if e.complexity.Billing.DueDate == nil {
			break
		}

		return e.complexity.Billing.DueDate(childComplexity), true

	case "Billing.entries":
		if e.complexity.Billing.Entries == nil {
			break
		}

		return e.complexity.Billing.Entries(childComplexity), true

	case "Billing.id":
		if e.complexity.Billing.ID == nil {
			break
		}

		return e.complexity.Billing.ID(childComplexity), true

	case "Billing.invoiceNumber":
		if e.complexity.Billing.InvoiceNumber == nil {
			break
		}

		return e.complexity.Billing.InvoiceNumber(childComplexity), true

	case "Billing.status":
		if e.complexity.Billing.Status == nil {
			break
		}

		return e.complexity.Billing.Status(childComplexity), true

	case "Billing.userId":
		if e.complexity.Billing.UserID == nil {
			break
		}

		return e.complexity.Billing.UserID(childComplexity), true

	case "Billing.userName":
		if e.complexity.Billing.UserName == nil {
			break
		}

		return e.complexity.Billing.UserName(childComplexity), true

	case "BillingEntry.amount":
		if e.complexity.BillingEntry.Amount == nil {
			break
		}

		return e.complexity.BillingEntry.Amount(childComplexity), true

	case "BillingEntry.description":
		if e.complexity.BillingEntry.Description == nil {
			break
		}

		return e.complexity.BillingEntry.Description(childComplexity), true

	case "BillingEntry.orderNumber":
		if e.complexity.BillingEntry.OrderNumber == nil {
			break
		}

		return e.complexity.BillingEntry.OrderNumber(childComplexity), true

	case "BillingEntry.type":
		if e.complexity.BillingEntry.Type == nil {
			break
		}

		return e.complexity.BillingEntry.Type(childComplexity), true

	case "BillingResult.results":
		if e.complexity.BillingResult.Results == nil {
			break
		}

		return e.complexity.BillingResult.Results(childComplexity), true

	case "BillingResult.totalCount":
		if e.complexity.BillingResult.TotalCount == nil {
			break
		}

		return e.complexity.BillingResult.TotalCount(childComplexity), true

	case "Checkout.clientName":
		if e.complexity.Checkout.ClientName == nil {
			break
		}

		return e.complexity.Checkout.ClientName(childComplexity), true

	case "Checkout.date":
		if e.complexity.Checkout.Date == nil {
			break
		}

		return e.complexity.Checkout.Date(childComplexity), true

	case "Checkout.invoice":
		if e.complexity.Checkout.Invoice == nil {
			break
		}

		return e.complexity.Checkout.Invoice(childComplexity), true

	case "Checkout.status":
		if e.complexity.Checkout.Status == nil {
			break
		}

		return e.complexity.Checkout.Status(childComplexity), true

	case "Checkout.total":
		if e.complexity.Checkout.Total == nil {
			break
		}

		return e.complexity.Checkout.Total(childComplexity), true

	case "Checkout.url":
		if e.complexity.Checkout.URL == nil {
			break
		}

		return e.complexity.Checkout.URL(childComplexity), true

	case "CheckoutResult.results":
		if e.complexity.CheckoutResult.Results == nil {
			break
		}

		return e.complexity.CheckoutResult.Results(childComplexity), true

	case "CheckoutResult.totalCount":
		if e.complexity.CheckoutResult.TotalCount == nil {
			break
		}

		return e.complexity.CheckoutResult.TotalCount(childComplexity), true

	case "Comment.category":
		if e.complexity.Comment.Category == nil {
			break
		}

		return e.complexity.Comment.Category(childComplexity), true

	case "Comment.createdDateTime":
		if e.complexity.Comment.CreatedDateTime == nil {
			break
		}

		return e.complexity.Comment.CreatedDateTime(childComplexity), true

	case "Comment.id":
		if e.complexity.Comment.ID == nil {
			break
		}

		return e.complexity.Comment.ID(childComplexity), true

	case "Comment.label":
		if e.complexity.Comment.Label == nil {
			break
		}

		return e.complexity.Comment.Label(childComplexity), true

	case "Comment.section":
		if e.complexity.Comment.Section == nil {
			break
		}

		return e.complexity.Comment.Section(childComplexity), true

	case "Comment.value":
		if e.complexity.Comment.Value == nil {
			break
		}

		return e.complexity.Comment.Value(childComplexity), true

	case "Company.forms":
		if e.complexity.Company.Forms == nil {
			break
		}

		return e.complexity.Company.Forms(childComplexity), true

	case "Company.id":
		if e.complexity.Company.ID == nil {
			break
		}

		return e.complexity.Company.ID(childComplexity), true

	case "Company.isAdmin":
		if e.complexity.Company.IsAdmin == nil {
			break
		}

		return e.complexity.Company.IsAdmin(childComplexity), true

	case "Company.isClient":
		if e.complexity.Company.IsClient == nil {
			break
		}

		return e.complexity.Company.IsClient(childComplexity), true

	case "Company.isPremium":
		if e.complexity.Company.IsPremium == nil {
			break
		}

		return e.complexity.Company.IsPremium(childComplexity), true

	case "Company.name":
		if e.complexity.Company.Name == nil {
			break
		}

		return e.complexity.Company.Name(childComplexity), true

	case "Company.webSite":
		if e.complexity.Company.WebSite == nil {
			break
		}

		return e.complexity.Company.WebSite(childComplexity), true

	case "CompanyForm.name":
		if e.complexity.CompanyForm.Name == nil {
			break
		}

		return e.complexity.CompanyForm.Name(childComplexity), true

	case "CompanyForm.style":
		if e.complexity.CompanyForm.Style == nil {
			break
		}

		return e.complexity.CompanyForm.Style(childComplexity), true

	case "CompanyResult.results":
		if e.complexity.CompanyResult.Results == nil {
			break
		}

		return e.complexity.CompanyResult.Results(childComplexity), true

	case "CompanyResult.totalCount":
		if e.complexity.CompanyResult.TotalCount == nil {
			break
		}

		return e.complexity.CompanyResult.TotalCount(childComplexity), true

	case "Credit.amount":
		if e.complexity.Credit.Amount == nil {
			break
		}

		return e.complexity.Credit.Amount(childComplexity), true

	case "Credit.createdDateTime":
		if e.complexity.Credit.CreatedDateTime == nil {
			break
		}

		return e.complexity.Credit.CreatedDateTime(childComplexity), true

	case "Credit.id":
		if e.complexity.Credit.ID == nil {
			break
		}

		return e.complexity.Credit.ID(childComplexity), true

	case "Credit.paypalOrderId":
		if e.complexity.Credit.PaypalOrderID == nil {
			break
		}

		return e.complexity.Credit.PaypalOrderID(childComplexity), true

	case "Credit.paypalToken":
		if e.complexity.Credit.PaypalToken == nil {
			break
		}

		return e.complexity.Credit.PaypalToken(childComplexity), true

	case "CreditLedger.amount":
		if e.complexity.CreditLedger.Amount == nil {
			break
		}

		return e.complexity.CreditLedger.Amount(childComplexity), true

	case "CreditLedger.balance":
		if e.complexity.CreditLedger.Balance == nil {
			break
		}

		return e.complexity.CreditLedger.Balance(childComplexity), true

	case "CreditLedger.clientId":
		if e.complexity.CreditLedger.ClientID == nil {
			break
		}

		return e.complexity.CreditLedger.ClientID(childComplexity), true

	case "CreditLedger.clientName":
		if e.complexity.CreditLedger.ClientName == nil {
			break
		}

		return e.complexity.CreditLedger.ClientName(childComplexity), true

	case "CreditLedger.createdDateTime":
		if e.complexity.CreditLedger.CreatedDateTime == nil {
			break
		}

		return e.complexity.CreditLedger.CreatedDateTime(childComplexity), true

	case "CreditLedger.id":
		if e.complexity.CreditLedger.ID == nil {
			break
		}

		return e.complexity.CreditLedger.ID(childComplexity), true

	case "CreditLedger.iformCharge":
		if e.complexity.CreditLedger.IformCharge == nil {
			break
		}

		return e.complexity.CreditLedger.IformCharge(childComplexity), true

	case "CreditLedger.orderAddress":
		if e.complexity.CreditLedger.OrderAddress == nil {
			break
		}

		return e.complexity.CreditLedger.OrderAddress(childComplexity), true

	case "CreditLedger.orderNumber":
		if e.complexity.CreditLedger.OrderNumber == nil {
			break
		}

		return e.complexity.CreditLedger.OrderNumber(childComplexity), true

	case "CreditLedger.paypalOrderId":
		if e.complexity.CreditLedger.PaypalOrderID == nil {
			break
		}

		return e.complexity.CreditLedger.PaypalOrderID(childComplexity), true

	case "CreditLedger.type":
		if e.complexity.CreditLedger.Type == nil {
			break
		}

		return e.complexity.CreditLedger.Type(childComplexity), true

	case "CreditLedgerResult.results":
		if e.complexity.CreditLedgerResult.Results == nil {
			break
		}

		return e.complexity.CreditLedgerResult.Results(childComplexity), true

	case "CreditLedgerResult.totalCount":
		if e.complexity.CreditLedgerResult.TotalCount == nil {
			break
		}

		return e.complexity.CreditLedgerResult.TotalCount(childComplexity), true

	case "Credits.clientName":
		if e.complexity.Credits.ClientName == nil {
			break
		}

		return e.complexity.Credits.ClientName(childComplexity), true

	case "Credits.credits":
		if e.complexity.Credits.Credits == nil {
			break
		}

		return e.complexity.Credits.Credits(childComplexity), true

	case "Credits.date":
		if e.complexity.Credits.Date == nil {
			break
		}

		return e.complexity.Credits.Date(childComplexity), true

	case "Credits.expiresAt":
		if e.complexity.Credits.ExpiresAt == nil {
			break
		}

		return e.complexity.Credits.ExpiresAt(childComplexity), true

	case "Credits.invoice":
		if e.complexity.Credits.Invoice == nil {
			break
		}

		return e.complexity.Credits.Invoice(childComplexity), true

	case "CreditsResult.results":
		if e.complexity.CreditsResult.Results == nil {
			break
		}

		return e.complexity.CreditsResult.Results(childComplexity), true

	case "CreditsResult.totalCount":
		if e.complexity.CreditsResult.TotalCount == nil {
			break
		}

		return e.complexity.CreditsResult.TotalCount(childComplexity), true

	case "Default.alwayssubmitOrder":
		if e.complexity.Default.AlwayssubmitOrder == nil {
			break
		}

		return e.complexity.Default.AlwayssubmitOrder(childComplexity), true

	case "Default.autoCompleteStandbyOrder":
		if e.complexity.Default.AutoCompleteStandbyOrder == nil {
			break
		}

		return e.complexity.Default.AutoCompleteStandbyOrder(childComplexity), true

	case "Default.basement":
		if e.complexity.Default.Basement == nil {
			break
		}

		return e.complexity.Default.Basement(childComplexity), true

	case "Default.condition":
		if e.complexity.Default.Condition == nil {
			break
		}

		return e.complexity.Default.Condition(childComplexity), true

	case "Default.condo":
		if e.complexity.Default.Condo == nil {
			break
		}

		return e.complexity.Default.Condo(childComplexity), true

	case "Default.exteriorFinish":
		if e.complexity.Default.ExteriorFinish == nil {
			break
		}

		return e.complexity.Default.ExteriorFinish(childComplexity), true

	case "Default.firePlace":
		if e.complexity.Default.FirePlace == nil {
			break
		}

		return e.complexity.Default.FirePlace(childComplexity), true

	case "Default.initialSearchAge":
		if e.complexity.Default.InitialSearchAge == nil {
			break
		}

		return e.complexity.Default.InitialSearchAge(childComplexity), true

	case "Default.initialSearchGla":
		if e.complexity.Default.InitialSearchGla == nil {
			break
		}

		return e.complexity.Default.InitialSearchGla(childComplexity), true

	case "Default.initialSearchProximity":
		if e.complexity.Default.InitialSearchProximity == nil {
			break
		}

		return e.complexity.Default.InitialSearchProximity(childComplexity), true

	case "Default.isEnableEmailNotification":
		if e.complexity.Default.IsEnableEmailNotification == nil {
			break
		}

		return e.complexity.Default.IsEnableEmailNotification(childComplexity), true

	case "Default.listingType":
		if e.complexity.Default.ListingType == nil {
			break
		}

		return e.complexity.Default.ListingType(childComplexity), true

	case "Default.mobileHome":
		if e.complexity.Default.MobileHome == nil {
			break
		}

		return e.complexity.Default.MobileHome(childComplexity), true

	case "Default.multiUnit":
		if e.complexity.Default.MultiUnit == nil {
			break
		}

		return e.complexity.Default.MultiUnit(childComplexity), true

	case "Default.pool":
		if e.complexity.Default.Pool == nil {
			break
		}

		return e.complexity.Default.Pool(childComplexity), true

	case "Default.porchPatioDeck":
		if e.complexity.Default.PorchPatioDeck == nil {
			break
		}

		return e.complexity.Default.PorchPatioDeck(childComplexity), true

	case "Default.quality":
		if e.complexity.Default.Quality == nil {
			break
		}

		return e.complexity.Default.Quality(childComplexity), true

	case "Default.secondSearchAge":
		if e.complexity.Default.SecondSearchAge == nil {
			break
		}

		return e.complexity.Default.SecondSearchAge(childComplexity), true

	case "Default.secondSearchGla":
		if e.complexity.Default.SecondSearchGla == nil {
			break
		}

		return e.complexity.Default.SecondSearchGla(childComplexity), true

	case "Default.secondSearchProximity":
		if e.complexity.Default.SecondSearchProximity == nil {
			break
		}

		return e.complexity.Default.SecondSearchProximity(childComplexity), true

	case "Default.secondSearchSaleDates":
		if e.complexity.Default.SecondSearchSaleDates == nil {
			break
		}

		return e.complexity.Default.SecondSearchSaleDates(childComplexity), true

	case "Default.sfaTownhouse":
		if e.complexity.Default.SfaTownhouse == nil {
			break
		}

		return e.complexity.Default.SfaTownhouse(childComplexity), true

	case "Default.sfd":
		if e.complexity.Default.Sfd == nil {
			break
		}

		return e.complexity.Default.Sfd(childComplexity), true

	case "Default.styleDesign":
		if e.complexity.Default.StyleDesign == nil {
			break
		}

		return e.complexity.Default.StyleDesign(childComplexity), true

	case "Default.subjectType":
		if e.complexity.Default.SubjectType == nil {
			break
		}

		return e.complexity.Default.SubjectType(childComplexity), true

	case "Default.theme":
		if e.complexity.Default.Theme == nil {
			break
		}

		return e.complexity.Default.Theme(childComplexity), true

	case "Default.thirdSearchAge":
		if e.complexity.Default.ThirdSearchAge == nil {
			break
		}

		return e.complexity.Default.ThirdSearchAge(childComplexity), true

	case "Default.thirdSearchFilterByCity":
		if e.complexity.Default.ThirdSearchFilterByCity == nil {
			break
		}

		return e.complexity.Default.ThirdSearchFilterByCity(childComplexity), true

	case "Default.thirdSearchFilterByComplexName":
		if e.complexity.Default.ThirdSearchFilterByComplexName == nil {
			break
		}

		return e.complexity.Default.ThirdSearchFilterByComplexName(childComplexity), true

	case "Default.thirdSearchFilterByCountry":
		if e.complexity.Default.ThirdSearchFilterByCountry == nil {
			break
		}

		return e.complexity.Default.ThirdSearchFilterByCountry(childComplexity), true

	case "Default.thirdSearchFilterByZip":
		if e.complexity.Default.ThirdSearchFilterByZip == nil {
			break
		}

		return e.complexity.Default.ThirdSearchFilterByZip(childComplexity), true

	case "Default.thirdSearchGla":
		if e.complexity.Default.ThirdSearchGla == nil {
			break
		}

		return e.complexity.Default.ThirdSearchGla(childComplexity), true

	case "Default.thirdSearchProximity":
		if e.complexity.Default.ThirdSearchProximity == nil {
			break
		}

		return e.complexity.Default.ThirdSearchProximity(childComplexity), true

	case "Default.thirdSearchSaleDates":
		if e.complexity.Default.ThirdSearchSaleDates == nil {
			break
		}

		return e.complexity.Default.ThirdSearchSaleDates(childComplexity), true

	case "Default.useDefaults":
		if e.complexity.Default.UseDefaults == nil {
			break
		}

		return e.complexity.Default.UseDefaults(childComplexity), true

	case "Default.useIformValidations":
		if e.complexity.Default.UseIformValidations == nil {
			break
		}

		return e.complexity.Default.UseIformValidations(childComplexity), true

	case "Default.view":
		if e.complexity.Default.View == nil {
			break
		}

		return e.complexity.Default.View(childComplexity), true

	case "Doc.createdDateTime":
		if e.complexity.Doc.CreatedDateTime == nil {
			break
		}

		return e.complexity.Doc.CreatedDateTime(childComplexity), true

	case "Doc.fileName":
		if e.complexity.Doc.FileName == nil {
			break
		}

		return e.complexity.Doc.FileName(childComplexity), true

	case "Doc.id":
		if e.complexity.Doc.ID == nil {
			break
		}

		return e.complexity.Doc.ID(childComplexity), true

	case "Doc.type":
		if e.complexity.Doc.Type == nil {
			break
		}

		return e.complexity.Doc.Type(childComplexity), true

	case "Doc.url":
		if e.complexity.Doc.URL == nil {
			break
		}

		return e.complexity.Doc.URL(childComplexity), true

	case "EmailTemplate.id":
		if e.complexity.EmailTemplate.ID == nil {
			break
		}

		return e.complexity.EmailTemplate.ID(childComplexity), true

	case "EmailTemplate.message":
		if e.complexity.EmailTemplate.Message == nil {
			break
		}

		return e.complexity.EmailTemplate.Message(childComplexity), true

	case "EmailTemplate.subject":
		if e.complexity.EmailTemplate.Subject == nil {
			break
		}

		return e.complexity.EmailTemplate.Subject(childComplexity), true

	case "EmailTemplate.template":
		if e.complexity.EmailTemplate.Template == nil {
			break
		}

		return e.complexity.EmailTemplate.Template(childComplexity), true

	case "EmailTemplate.type":
		if e.complexity.EmailTemplate.Type == nil {
			break
		}

		return e.complexity.EmailTemplate.Type(childComplexity), true

	case "EmailTemplateResult.results":
		if e.complexity.EmailTemplateResult.Results == nil {
			break
		}

		return e.complexity.EmailTemplateResult.Results(childComplexity), true

	case "EmailTemplateResult.totalCount":
		if e.complexity.EmailTemplateResult.TotalCount == nil {
			break
		}

		return e.complexity.EmailTemplateResult.TotalCount(childComplexity), true

	case "Header.id":
		if e.complexity.Header.ID == nil {
			break
		}

		return e.complexity.Header.ID(childComplexity), true

	case "Header.name":
		if e.complexity.Header.Name == nil {
			break
		}

		return e.complexity.Header.Name(childComplexity), true

	case "HeaderCode.code":
		if e.complexity.HeaderCode.Code == nil {
			break
		}

		return e.complexity.HeaderCode.Code(childComplexity), true

	case "HeaderCode.value":
		if e.complexity.HeaderCode.Value == nil {
			break
		}

		return e.complexity.HeaderCode.Value(childComplexity), true

	case "HeaderResult.results":
		if e.complexity.HeaderResult.Results == nil {
			break
		}

		return e.complexity.HeaderResult.Results(childComplexity), true

	case "HeaderResult.totalCount":
		if e.complexity.HeaderResult.TotalCount == nil {
			break
		}

		return e.complexity.HeaderResult.TotalCount(childComplexity), true

	case "Iform.adjustmentPrice":
		if e.complexity.Iform.AdjustmentPrice == nil {
			break
		}

		return e.complexity.Iform.AdjustmentPrice(childComplexity), true

	case "Iform.ageException":
		if e.complexity.Iform.AgeException == nil {
			break
		}

		return e.complexity.Iform.AgeException(childComplexity), true

	case "Iform.bathException":
		if e.complexity.Iform.BathException == nil {
			break
		}

		return e.complexity.Iform.BathException(childComplexity), true

	case "Iform.bedException":
		if e.complexity.Iform.BedException == nil {
			break
		}

		return e.complexity.Iform.BedException(childComplexity), true

	case "Iform.cmbDemand":
		if e.complexity.Iform.CmbDemand == nil {
			break
		}

		return e.complexity.Iform.CmbDemand(childComplexity), true

	case "Iform.cmbExtra":
		if e.complexity.Iform.CmbExtra == nil {
			break
		}

		return e.complexity.Iform.CmbExtra(childComplexity), true

	case "Iform.cmbForm":
		if e.complexity.Iform.CmbForm == nil {
			break
		}

		return e.complexity.Iform.CmbForm(childComplexity), true

	case "Iform.cmbForm2":
		if e.complexity.Iform.CmbForm2 == nil {
			break
		}

		return e.complexity.Iform.CmbForm2(childComplexity), true

	case "Iform.cmbHouse":
		if e.complexity.Iform.CmbHouse == nil {
			break
		}

		return e.complexity.Iform.CmbHouse(childComplexity), true

	case "Iform.cmbIsListed":
		if e.complexity.Iform.CmbIsListed == nil {
			break
		}

		return e.complexity.Iform.CmbIsListed(childComplexity), true

	case "Iform.cmbListComp1Basement":
		if e.complexity.Iform.CmbListComp1Basement == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1Basement(childComplexity), true

	case "Iform.cmbListComp1CommentType":
		if e.complexity.Iform.CmbListComp1CommentType == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1CommentType(childComplexity), true

	case "Iform.cmbListComp1Condition":
		if e.complexity.Iform.CmbListComp1Condition == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1Condition(childComplexity), true

	case "Iform.cmbListComp1ExtFinish":
		if e.complexity.Iform.CmbListComp1ExtFinish == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1ExtFinish(childComplexity), true

	case "Iform.cmbListComp1Financing":
		if e.complexity.Iform.CmbListComp1Financing == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1Financing(childComplexity), true

	case "Iform.cmbListComp1Fireplace":
		if e.complexity.Iform.CmbListComp1Fireplace == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1Fireplace(childComplexity), true

	case "Iform.cmbListComp1Garage":
		if e.complexity.Iform.CmbListComp1Garage == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1Garage(childComplexity), true

	case "Iform.cmbListComp1IsFinished":
		if e.complexity.Iform.CmbListComp1IsFinished == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1IsFinished(childComplexity), true

	case "Iform.cmbListComp1PercentFinished":
		if e.complexity.Iform.CmbListComp1PercentFinished == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1PercentFinished(childComplexity), true

	case "Iform.cmbListComp1Pool":
		if e.complexity.Iform.CmbListComp1Pool == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1Pool(childComplexity), true

	case "Iform.cmbListComp1PorchPatioDeck":
		if e.complexity.Iform.CmbListComp1PorchPatioDeck == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1PorchPatioDeck(childComplexity), true

	case "Iform.cmbListComp1Quality":
		if e.complexity.Iform.CmbListComp1Quality == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1Quality(childComplexity), true

	case "Iform.cmbListComp1SaleType":
		if e.complexity.Iform.CmbListComp1SaleType == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1SaleType(childComplexity), true

	case "Iform.cmbListComp1Style":
		if e.complexity.Iform.CmbListComp1Style == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1Style(childComplexity), true

	case "Iform.cmbListComp1Type":
		if e.complexity.Iform.CmbListComp1Type == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1Type(childComplexity), true

	case "Iform.cmbListComp1View":
		if e.complexity.Iform.CmbListComp1View == nil {
			break
		}

		return e.complexity.Iform.CmbListComp1View(childComplexity), true

	case "Iform.cmbListComp2Basement":
		if e.complexity.Iform.CmbListComp2Basement == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2Basement(childComplexity), true

	case "Iform.cmbListComp2CommentType":
		if e.complexity.Iform.CmbListComp2CommentType == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2CommentType(childComplexity), true

	case "Iform.cmbListComp2Condition":
		if e.complexity.Iform.CmbListComp2Condition == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2Condition(childComplexity), true

	case "Iform.cmbListComp2ExtFinish":
		if e.complexity.Iform.CmbListComp2ExtFinish == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2ExtFinish(childComplexity), true

	case "Iform.cmbListComp2Financing":
		if e.complexity.Iform.CmbListComp2Financing == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2Financing(childComplexity), true

	case "Iform.cmbListComp2Fireplace":
		if e.complexity.Iform.CmbListComp2Fireplace == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2Fireplace(childComplexity), true

	case "Iform.cmbListComp2Garage":
		if e.complexity.Iform.CmbListComp2Garage == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2Garage(childComplexity), true

	case "Iform.cmbListComp2IsFinished":
		if e.complexity.Iform.CmbListComp2IsFinished == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2IsFinished(childComplexity), true

	case "Iform.cmbListComp2PercentFinished":
		if e.complexity.Iform.CmbListComp2PercentFinished == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2PercentFinished(childComplexity), true

	case "Iform.cmbListComp2Pool":
		if e.complexity.Iform.CmbListComp2Pool == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2Pool(childComplexity), true

	case "Iform.cmbListComp2PorchPatioDeck":
		if e.complexity.Iform.CmbListComp2PorchPatioDeck == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2PorchPatioDeck(childComplexity), true

	case "Iform.cmbListComp2Quality":
		if e.complexity.Iform.CmbListComp2Quality == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2Quality(childComplexity), true

	case "Iform.cmbListComp2SaleType":
		if e.complexity.Iform.CmbListComp2SaleType == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2SaleType(childComplexity), true

	case "Iform.cmbListComp2Style":
		if e.complexity.Iform.CmbListComp2Style == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2Style(childComplexity), true

	case "Iform.cmbListComp2Type":
		if e.complexity.Iform.CmbListComp2Type == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2Type(childComplexity), true

	case "Iform.cmbListComp2View":
		if e.complexity.Iform.CmbListComp2View == nil {
			break
		}

		return e.complexity.Iform.CmbListComp2View(childComplexity), true

	case "Iform.cmbListComp3Basement":
		if e.complexity.Iform.CmbListComp3Basement == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3Basement(childComplexity), true

	case "Iform.cmbListComp3CommentType":
		if e.complexity.Iform.CmbListComp3CommentType == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3CommentType(childComplexity), true

	case "Iform.cmbListComp3Condition":
		if e.complexity.Iform.CmbListComp3Condition == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3Condition(childComplexity), true

	case "Iform.cmbListComp3ExtFinish":
		if e.complexity.Iform.CmbListComp3ExtFinish == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3ExtFinish(childComplexity), true

	case "Iform.cmbListComp3Financing":
		if e.complexity.Iform.CmbListComp3Financing == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3Financing(childComplexity), true

	case "Iform.cmbListComp3Fireplace":
		if e.complexity.Iform.CmbListComp3Fireplace == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3Fireplace(childComplexity), true

	case "Iform.cmbListComp3Garage":
		if e.complexity.Iform.CmbListComp3Garage == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3Garage(childComplexity), true

	case "Iform.cmbListComp3IsFinished":
		if e.complexity.Iform.CmbListComp3IsFinished == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3IsFinished(childComplexity), true

	case "Iform.cmbListComp3PercentFinished":
		if e.complexity.Iform.CmbListComp3PercentFinished == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3PercentFinished(childComplexity), true

	case "Iform.cmbListComp3Pool":
		if e.complexity.Iform.CmbListComp3Pool == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3Pool(childComplexity), true

	case "Iform.cmbListComp3PorchPatioDeck":
		if e.complexity.Iform.CmbListComp3PorchPatioDeck == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3PorchPatioDeck(childComplexity), true

	case "Iform.cmbListComp3Quality":
		if e.complexity.Iform.CmbListComp3Quality == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3Quality(childComplexity), true

	case "Iform.cmbListComp3SaleType":
		if e.complexity.Iform.CmbListComp3SaleType == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3SaleType(childComplexity), true

	case "Iform.cmbListComp3Style":
		if e.complexity.Iform.CmbListComp3Style == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3Style(childComplexity), true

	case "Iform.cmbListComp3Type":
		if e.complexity.Iform.CmbListComp3Type == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3Type(childComplexity), true

	case "Iform.cmbListComp3View":
		if e.complexity.Iform.CmbListComp3View == nil {
			break
		}

		return e.complexity.Iform.CmbListComp3View(childComplexity), true

	case "Iform.cmbListing":
		if e.complexity.Iform.CmbListing == nil {
			break
		}

		return e.complexity.Iform.CmbListing(childComplexity), true

	case "Iform.cmbLocation":
		if e.complexity.Iform.CmbLocation == nil {
			break
		}

		return e.complexity.Iform.CmbLocation(childComplexity), true

	case "Iform.cmbMarket":
		if e.complexity.Iform.CmbMarket == nil {
			break
		}

		return e.complexity.Iform.CmbMarket(childComplexity), true

	case "Iform.cmbNegative":
		if e.complexity.Iform.CmbNegative == nil {
			break
		}

		return e.complexity.Iform.CmbNegative(childComplexity), true

	case "Iform.cmbNeighborhoodTrend":
		if e.complexity.Iform.CmbNeighborhoodTrend == nil {
			break
		}

		return e.complexity.Iform.CmbNeighborhoodTrend(childComplexity), true

	case "Iform.cmbOrderType":
		if e.complexity.Iform.CmbOrderType == nil {
			break
		}

		return e.complexity.Iform.CmbOrderType(childComplexity), true

	case "Iform.cmbPositive":
		if e.complexity.Iform.CmbPositive == nil {
			break
		}

		return e.complexity.Iform.CmbPositive(childComplexity), true

	case "Iform.cmbPricing":
		if e.complexity.Iform.CmbPricing == nil {
			break
		}

		return e.complexity.Iform.CmbPricing(childComplexity), true

	case "Iform.cmbREOTrend":
		if e.complexity.Iform.CmbREOTrend == nil {
			break
		}

		return e.complexity.Iform.CmbREOTrend(childComplexity), true

	case "Iform.cmbSaleComp1Basement":
		if e.complexity.Iform.CmbSaleComp1Basement == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1Basement(childComplexity), true

	case "Iform.cmbSaleComp1CommentType":
		if e.complexity.Iform.CmbSaleComp1CommentType == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1CommentType(childComplexity), true

	case "Iform.cmbSaleComp1Condition":
		if e.complexity.Iform.CmbSaleComp1Condition == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1Condition(childComplexity), true

	case "Iform.cmbSaleComp1ExtFinish":
		if e.complexity.Iform.CmbSaleComp1ExtFinish == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1ExtFinish(childComplexity), true

	case "Iform.cmbSaleComp1Financing":
		if e.complexity.Iform.CmbSaleComp1Financing == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1Financing(childComplexity), true

	case "Iform.cmbSaleComp1Fireplace":
		if e.complexity.Iform.CmbSaleComp1Fireplace == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1Fireplace(childComplexity), true

	case "Iform.cmbSaleComp1Garage":
		if e.complexity.Iform.CmbSaleComp1Garage == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1Garage(childComplexity), true

	case "Iform.cmbSaleComp1IsFinished":
		if e.complexity.Iform.CmbSaleComp1IsFinished == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1IsFinished(childComplexity), true

	case "Iform.cmbSaleComp1PercentFinished":
		if e.complexity.Iform.CmbSaleComp1PercentFinished == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1PercentFinished(childComplexity), true

	case "Iform.cmbSaleComp1Pool":
		if e.complexity.Iform.CmbSaleComp1Pool == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1Pool(childComplexity), true

	case "Iform.cmbSaleComp1PorchPatioDeck":
		if e.complexity.Iform.CmbSaleComp1PorchPatioDeck == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1PorchPatioDeck(childComplexity), true

	case "Iform.cmbSaleComp1Quality":
		if e.complexity.Iform.CmbSaleComp1Quality == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1Quality(childComplexity), true

	case "Iform.cmbSaleComp1SaleType":
		if e.complexity.Iform.CmbSaleComp1SaleType == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1SaleType(childComplexity), true

	case "Iform.cmbSaleComp1Style":
		if e.complexity.Iform.CmbSaleComp1Style == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1Style(childComplexity), true

	case "Iform.cmbSaleComp1Type":
		if e.complexity.Iform.CmbSaleComp1Type == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1Type(childComplexity), true

	case "Iform.cmbSaleComp1View":
		if e.complexity.Iform.CmbSaleComp1View == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp1View(childComplexity), true

	case "Iform.cmbSaleComp2Basement":
		if e.complexity.Iform.CmbSaleComp2Basement == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2Basement(childComplexity), true

	case "Iform.cmbSaleComp2CommentType":
		if e.complexity.Iform.CmbSaleComp2CommentType == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2CommentType(childComplexity), true

	case "Iform.cmbSaleComp2Condition":
		if e.complexity.Iform.CmbSaleComp2Condition == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2Condition(childComplexity), true

	case "Iform.cmbSaleComp2ExtFinish":
		if e.complexity.Iform.CmbSaleComp2ExtFinish == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2ExtFinish(childComplexity), true

	case "Iform.cmbSaleComp2Financing":
		if e.complexity.Iform.CmbSaleComp2Financing == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2Financing(childComplexity), true

	case "Iform.cmbSaleComp2Fireplace":
		if e.complexity.Iform.CmbSaleComp2Fireplace == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2Fireplace(childComplexity), true

	case "Iform.cmbSaleComp2Garage":
		if e.complexity.Iform.CmbSaleComp2Garage == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2Garage(childComplexity), true

	case "Iform.cmbSaleComp2IsFinished":
		if e.complexity.Iform.CmbSaleComp2IsFinished == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2IsFinished(childComplexity), true

	case "Iform.cmbSaleComp2PercentFinished":
		if e.complexity.Iform.CmbSaleComp2PercentFinished == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2PercentFinished(childComplexity), true

	case "Iform.cmbSaleComp2Pool":
		if e.complexity.Iform.CmbSaleComp2Pool == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2Pool(childComplexity), true

	case "Iform.cmbSaleComp2PorchPatioDeck":
		if e.complexity.Iform.CmbSaleComp2PorchPatioDeck == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2PorchPatioDeck(childComplexity), true

	case "Iform.cmbSaleComp2Quality":
		if e.complexity.Iform.CmbSaleComp2Quality == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2Quality(childComplexity), true

	case "Iform.cmbSaleComp2SaleType":
		if e.complexity.Iform.CmbSaleComp2SaleType == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2SaleType(childComplexity), true

	case "Iform.cmbSaleComp2Style":
		if e.complexity.Iform.CmbSaleComp2Style == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2Style(childComplexity), true

	case "Iform.cmbSaleComp2Type":
		if e.complexity.Iform.CmbSaleComp2Type == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2Type(childComplexity), true

	case "Iform.cmbSaleComp2View":
		if e.complexity.Iform.CmbSaleComp2View == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp2View(childComplexity), true

	case "Iform.cmbSaleComp3Basement":
		if e.complexity.Iform.CmbSaleComp3Basement == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3Basement(childComplexity), true

	case "Iform.cmbSaleComp3CommentType":
		if e.complexity.Iform.CmbSaleComp3CommentType == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3CommentType(childComplexity), true

	case "Iform.cmbSaleComp3Condition":
		if e.complexity.Iform.CmbSaleComp3Condition == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3Condition(childComplexity), true

	case "Iform.cmbSaleComp3ExtFinish":
		if e.complexity.Iform.CmbSaleComp3ExtFinish == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3ExtFinish(childComplexity), true

	case "Iform.cmbSaleComp3Financing":
		if e.complexity.Iform.CmbSaleComp3Financing == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3Financing(childComplexity), true

	case "Iform.cmbSaleComp3Fireplace":
		if e.complexity.Iform.CmbSaleComp3Fireplace == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3Fireplace(childComplexity), true

	case "Iform.cmbSaleComp3Garage":
		if e.complexity.Iform.CmbSaleComp3Garage == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3Garage(childComplexity), true

	case "Iform.cmbSaleComp3IsFinished":
		if e.complexity.Iform.CmbSaleComp3IsFinished == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3IsFinished(childComplexity), true

	case "Iform.cmbSaleComp3PercentFinished":
		if e.complexity.Iform.CmbSaleComp3PercentFinished == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3PercentFinished(childComplexity), true

	case "Iform.cmbSaleComp3Pool":
		if e.complexity.Iform.CmbSaleComp3Pool == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3Pool(childComplexity), true

	case "Iform.cmbSaleComp3PorchPatioDeck":
		if e.complexity.Iform.CmbSaleComp3PorchPatioDeck == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3PorchPatioDeck(childComplexity), true

	case "Iform.cmbSaleComp3Quality":
		if e.complexity.Iform.CmbSaleComp3Quality == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3Quality(childComplexity), true

	case "Iform.cmbSaleComp3SaleType":
		if e.complexity.Iform.CmbSaleComp3SaleType == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3SaleType(childComplexity), true

	case "Iform.cmbSaleComp3Style":
		if e.complexity.Iform.CmbSaleComp3Style == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3Style(childComplexity), true

	case "Iform.cmbSaleComp3Type":
		if e.complexity.Iform.CmbSaleComp3Type == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3Type(childComplexity), true

	case "Iform.cmbSaleComp3View":
		if e.complexity.Iform.CmbSaleComp3View == nil {
			break
		}

		return e.complexity.Iform.CmbSaleComp3View(childComplexity), true

	case "Iform.cmbSubjectBasement":
		if e.complexity.Iform.CmbSubjectBasement == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectBasement(childComplexity), true

	case "Iform.cmbSubjectCondition":
		if e.complexity.Iform.CmbSubjectCondition == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectCondition(childComplexity), true

	case "Iform.cmbSubjectExtFinish":
		if e.complexity.Iform.CmbSubjectExtFinish == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectExtFinish(childComplexity), true

	case "Iform.cmbSubjectFinancing":
		if e.complexity.Iform.CmbSubjectFinancing == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectFinancing(childComplexity), true

	case "Iform.cmbSubjectFireplace":
		if e.complexity.Iform.CmbSubjectFireplace == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectFireplace(childComplexity), true

	case "Iform.cmbSubjectGarage":
		if e.complexity.Iform.CmbSubjectGarage == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectGarage(childComplexity), true

	case "Iform.cmbSubjectIsFinished":
		if e.complexity.Iform.CmbSubjectIsFinished == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectIsFinished(childComplexity), true

	case "Iform.cmbSubjectPercentFinished":
		if e.complexity.Iform.CmbSubjectPercentFinished == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectPercentFinished(childComplexity), true

	case "Iform.cmbSubjectPool":
		if e.complexity.Iform.CmbSubjectPool == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectPool(childComplexity), true

	case "Iform.cmbSubjectPorchPatioDeck":
		if e.complexity.Iform.CmbSubjectPorchPatioDeck == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectPorchPatioDeck(childComplexity), true

	case "Iform.cmbSubjectQuality":
		if e.complexity.Iform.CmbSubjectQuality == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectQuality(childComplexity), true

	case "Iform.cmbSubjectSaleType":
		if e.complexity.Iform.CmbSubjectSaleType == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectSaleType(childComplexity), true

	case "Iform.cmbSubjectStyle":
		if e.complexity.Iform.CmbSubjectStyle == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectStyle(childComplexity), true

	case "Iform.cmbSubjectType":
		if e.complexity.Iform.CmbSubjectType == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectType(childComplexity), true

	case "Iform.cmbSubjectView":
		if e.complexity.Iform.CmbSubjectView == nil {
			break
		}

		return e.complexity.Iform.CmbSubjectView(childComplexity), true

	case "Iform.cmbSupply":
		if e.complexity.Iform.CmbSupply == nil {
			break
		}

		return e.complexity.Iform.CmbSupply(childComplexity), true

	case "Iform.cmbView":
		if e.complexity.Iform.CmbView == nil {
			break
		}

		return e.complexity.Iform.CmbView(childComplexity), true

	case "Iform.condException":
		if e.complexity.Iform.CondException == nil {
			break
		}

		return e.complexity.Iform.CondException(childComplexity), true

	case "Iform.formType":
		if e.complexity.Iform.FormType == nil {
			break
		}

		return e.complexity.Iform.FormType(childComplexity), true

	case "Iform.glaException":
		if e.complexity.Iform.GlaException == nil {
			break
		}

		return e.complexity.Iform.GlaException(childComplexity), true

	case "Iform.history":
		if e.complexity.Iform.History == nil {
			break
		}

		return e.complexity.Iform.History(childComplexity), true

	case "Iform.id":
		if e.complexity.Iform.ID == nil {
			break
		}

		return e.complexity.Iform.ID(childComplexity), true

	case "Iform.lotException":
		if e.complexity.Iform.LotException == nil {
			break
		}

		return e.complexity.Iform.LotException(childComplexity), true

	case "Iform.pipelineId":
		if e.complexity.Iform.PipelineID == nil {
			break
		}

		return e.complexity.Iform.PipelineID(childComplexity), true

	case "Iform.priceComment":
		if e.complexity.Iform.PriceComment == nil {
			break
		}

		return e.complexity.Iform.PriceComment(childComplexity), true

	case "Iform.proxException":
		if e.complexity.Iform.ProxException == nil {
			break
		}

		return e.complexity.Iform.ProxException(childComplexity), true

	case "Iform.rangeComment":
		if e.complexity.Iform.RangeComment == nil {
			break
		}

		return e.complexity.Iform.RangeComment(childComplexity), true

	case "Iform.rdbmarketedtext":
		if e.complexity.Iform.Rdbmarketedtext == nil {
			break
		}

		return e.complexity.Iform.Rdbmarketedtext(childComplexity), true

	case "Iform.rdbresaletext":
		if e.complexity.Iform.Rdbresaletext == nil {
			break
		}

		return e.complexity.Iform.Rdbresaletext(childComplexity), true

	case "Iform.styleException":
		if e.complexity.Iform.StyleException == nil {
			break
		}

		return e.complexity.Iform.StyleException(childComplexity), true

	case "Iform.txt120DayQuickSale":
		if e.complexity.Iform.Txt120DayQuickSale == nil {
			break
		}

		return e.complexity.Iform.Txt120DayQuickSale(childComplexity), true

	case "Iform.txt120DayQuickSaleRepaired":
		if e.complexity.Iform.Txt120DayQuickSaleRepaired == nil {
			break
		}

		return e.complexity.Iform.Txt120DayQuickSaleRepaired(childComplexity), true

	case "Iform.txt180DayQuickSale":
		if e.complexity.Iform.Txt180DayQuickSale == nil {
			break
		}

		return e.complexity.Iform.Txt180DayQuickSale(childComplexity), true

	case "Iform.txt180DayQuickSaleRepaired":
		if e.complexity.Iform.Txt180DayQuickSaleRepaired == nil {
			break
		}

		return e.complexity.Iform.Txt180DayQuickSaleRepaired(childComplexity), true

	case "Iform.txt30DayListPriceFinalValues":
		if e.complexity.Iform.Txt30DayListPriceFinalValues == nil {
			break
		}

		return e.complexity.Iform.Txt30DayListPriceFinalValues(childComplexity), true

	case "Iform.txt30DayListPriceRepaired":
		if e.complexity.Iform.Txt30DayListPriceRepaired == nil {
			break
		}

		return e.complexity.Iform.Txt30DayListPriceRepaired(childComplexity), true

	case "Iform.txt30DayQuickSale":
		if e.complexity.Iform.Txt30DayQuickSale == nil {
			break
		}

		return e.complexity.Iform.Txt30DayQuickSale(childComplexity), true

	case "Iform.txt30DayQuickSaleRepaired":
		if e.complexity.Iform.Txt30DayQuickSaleRepaired == nil {
			break
		}

		return e.complexity.Iform.Txt30DayQuickSaleRepaired(childComplexity), true

	case "Iform.txt60DayQuickSale":
		if e.complexity.Iform.Txt60DayQuickSale == nil {
			break
		}

		return e.complexity.Iform.Txt60DayQuickSale(childComplexity), true

	case "Iform.txt60DayQuickSaleRepaired":
		if e.complexity.Iform.Txt60DayQuickSaleRepaired == nil {
			break
		}

		return e.complexity.Iform.Txt60DayQuickSaleRepaired(childComplexity), true

	case "Iform.txt6MonthPecent":
		if e.complexity.Iform.Txt6MonthPecent == nil {
			break
		}

		return e.complexity.Iform.Txt6MonthPecent(childComplexity), true

	case "Iform.txt90DayAsIsValue":
		if e.complexity.Iform.Txt90DayAsIsValue == nil {
			break
		}

		return e.complexity.Iform.Txt90DayAsIsValue(childComplexity), true

	case "Iform.txt90DayAsIsValueRepaired":
		if e.complexity.Iform.Txt90DayAsIsValueRepaired == nil {
			break
		}

		return e.complexity.Iform.Txt90DayAsIsValueRepaired(childComplexity), true

	case "Iform.txtAddress":
		if e.complexity.Iform.TxtAddress == nil {
			break
		}

		return e.complexity.Iform.TxtAddress(childComplexity), true

	case "Iform.txtAgentCity":
		if e.complexity.Iform.TxtAgentCity == nil {
			break
		}

		return e.complexity.Iform.TxtAgentCity(childComplexity), true

	case "Iform.txtAgentState":
		if e.complexity.Iform.TxtAgentState == nil {
			break
		}

		return e.complexity.Iform.TxtAgentState(childComplexity), true

	case "Iform.txtAgentZip":
		if e.complexity.Iform.TxtAgentZip == nil {
			break
		}

		return e.complexity.Iform.TxtAgentZip(childComplexity), true

	case "Iform.txtAnnualPecent":
		if e.complexity.Iform.TxtAnnualPecent == nil {
			break
		}

		return e.complexity.Iform.TxtAnnualPecent(childComplexity), true

	case "Iform.txtAverage":
		if e.complexity.Iform.TxtAverage == nil {
			break
		}

		return e.complexity.Iform.TxtAverage(childComplexity), true

	case "Iform.txtBrokerChecker":
		if e.complexity.Iform.TxtBrokerChecker == nil {
			break
		}

		return e.complexity.Iform.TxtBrokerChecker(childComplexity), true

	case "Iform.txtBrokerComments":
		if e.complexity.Iform.TxtBrokerComments == nil {
			break
		}

		return e.complexity.Iform.TxtBrokerComments(childComplexity), true

	case "Iform.txtCalculatedAge":
		if e.complexity.Iform.TxtCalculatedAge == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedAge(childComplexity), true

	case "Iform.txtCalculatedAges":
		if e.complexity.Iform.TxtCalculatedAges == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedAges(childComplexity), true

	case "Iform.txtCalculatedBath":
		if e.complexity.Iform.TxtCalculatedBath == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedBath(childComplexity), true

	case "Iform.txtCalculatedBeds":
		if e.complexity.Iform.TxtCalculatedBeds == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedBeds(childComplexity), true

	case "Iform.txtCalculatedCond":
		if e.complexity.Iform.TxtCalculatedCond == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedCond(childComplexity), true

	case "Iform.txtCalculatedGLAs":
		if e.complexity.Iform.TxtCalculatedGLAs == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedGLAs(childComplexity), true

	case "Iform.txtCalculatedGLA":
		if e.complexity.Iform.TxtCalculatedGla == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedGla(childComplexity), true

	case "Iform.txtCalculatedLots":
		if e.complexity.Iform.TxtCalculatedLots == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedLots(childComplexity), true

	case "Iform.txtCalculatedMonthsSupply":
		if e.complexity.Iform.TxtCalculatedMonthsSupply == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedMonthsSupply(childComplexity), true

	case "Iform.txtCalculatedProxim":
		if e.complexity.Iform.TxtCalculatedProxim == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedProxim(childComplexity), true

	case "Iform.txtCalculatedProximity":
		if e.complexity.Iform.TxtCalculatedProximity == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedProximity(childComplexity), true

	case "Iform.txtCalculatedSaleDates":
		if e.complexity.Iform.TxtCalculatedSaleDates == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedSaleDates(childComplexity), true

	case "Iform.txtCalculatedStyle":
		if e.complexity.Iform.TxtCalculatedStyle == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedStyle(childComplexity), true

	case "Iform.txtCalculatedStyle1":
		if e.complexity.Iform.TxtCalculatedStyle1 == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedStyle1(childComplexity), true

	case "Iform.txtCalculatedView":
		if e.complexity.Iform.TxtCalculatedView == nil {
			break
		}

		return e.complexity.Iform.TxtCalculatedView(childComplexity), true

	case "Iform.txtClient":
		if e.complexity.Iform.TxtClient == nil {
			break
		}

		return e.complexity.Iform.TxtClient(childComplexity), true

	case "Iform.txtCompany":
		if e.complexity.Iform.TxtCompany == nil {
			break
		}

		return e.complexity.Iform.TxtCompany(childComplexity), true

	case "Iform.txtCounty":
		if e.complexity.Iform.TxtCounty == nil {
			break
		}

		return e.complexity.Iform.TxtCounty(childComplexity), true

	case "Iform.txtDisclaimer":
		if e.complexity.Iform.TxtDisclaimer == nil {
			break
		}

		return e.complexity.Iform.TxtDisclaimer(childComplexity), true

	case "Iform.txtDisclaimer2":
		if e.complexity.Iform.TxtDisclaimer2 == nil {
			break
		}

		return e.complexity.Iform.TxtDisclaimer2(childComplexity), true

	case "Iform.txtEstimatedDaysOnMarket":
		if e.complexity.Iform.TxtEstimatedDaysOnMarket == nil {
			break
		}

		return e.complexity.Iform.TxtEstimatedDaysOnMarket(childComplexity), true

	case "Iform.txtEstimatedRent":
		if e.complexity.Iform.TxtEstimatedRent == nil {
			break
		}

		return e.complexity.Iform.TxtEstimatedRent(childComplexity), true

	case "Iform.txtFindcompsnow":
		if e.complexity.Iform.TxtFindcompsnow == nil {
			break
		}

		return e.complexity.Iform.TxtFindcompsnow(childComplexity), true

	case "Iform.txtLastSaleDate":
		if e.complexity.Iform.TxtLastSaleDate == nil {
			break
		}

		return e.complexity.Iform.TxtLastSaleDate(childComplexity), true

	case "Iform.txtLastSalePrice":
		if e.complexity.Iform.TxtLastSalePrice == nil {
			break
		}

		return e.complexity.Iform.TxtLastSalePrice(childComplexity), true

	case "Iform.txtListComp1Acres":
		if e.complexity.Iform.TxtListComp1Acres == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1Acres(childComplexity), true

	case "Iform.txtListComp1AcresAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1AcresAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1AcresAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1Address":
		if e.complexity.Iform.TxtListComp1Address == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1Address(childComplexity), true

	case "Iform.txtListComp1Adjustments":
		if e.complexity.Iform.TxtListComp1Adjustments == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1Adjustments(childComplexity), true

	case "Iform.txtListComp1Age":
		if e.complexity.Iform.TxtListComp1Age == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1Age(childComplexity), true

	case "Iform.txtListComp1BasementAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1BasementAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1BasementAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1BasementSqFt":
		if e.complexity.Iform.TxtListComp1BasementSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1BasementSqFt(childComplexity), true

	case "Iform.txtListComp1BasementSqFtAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1BasementSqFtAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1BasementSqFtAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1Bedrooms":
		if e.complexity.Iform.TxtListComp1Bedrooms == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1Bedrooms(childComplexity), true

	case "Iform.txtListComp1BedroomsAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1BedroomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1BedroomsAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1City":
		if e.complexity.Iform.TxtListComp1City == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1City(childComplexity), true

	case "Iform.txtListComp1CompTotals":
		if e.complexity.Iform.TxtListComp1CompTotals == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1CompTotals(childComplexity), true

	case "Iform.txtListComp1ComparableComments":
		if e.complexity.Iform.TxtListComp1ComparableComments == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1ComparableComments(childComplexity), true

	case "Iform.txtListComp1ConditionAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1ConditionAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1ConditionAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1CurrentListDate":
		if e.complexity.Iform.TxtListComp1CurrentListDate == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1CurrentListDate(childComplexity), true

	case "Iform.txtListComp1DataSource":
		if e.complexity.Iform.TxtListComp1DataSource == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1DataSource(childComplexity), true

	case "Iform.txtListComp1ExtFinishAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1ExtFinishAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1ExtFinishAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1FireplaceAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1FireplaceAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1FireplaceAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1FormatAdjustments":
		if e.complexity.Iform.TxtListComp1FormatAdjustments == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1FormatAdjustments(childComplexity), true

	case "Iform.txtListComp1FullBaths":
		if e.complexity.Iform.TxtListComp1FullBaths == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1FullBaths(childComplexity), true

	case "Iform.txtListComp1FullBathsAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1FullBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1FullBathsAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1GLAAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1GLAAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1GLAAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1GarageAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1GarageAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1GarageAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1HOAFee":
		if e.complexity.Iform.TxtListComp1HOAFee == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1HOAFee(childComplexity), true

	case "Iform.txtListComp1HalfBaths":
		if e.complexity.Iform.TxtListComp1HalfBaths == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1HalfBaths(childComplexity), true

	case "Iform.txtListComp1HalfBathsAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1HalfBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1HalfBathsAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1IsFinishedAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1IsFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1IsFinishedAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1ListPrice":
		if e.complexity.Iform.TxtListComp1ListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1ListPrice(childComplexity), true

	case "Iform.txtListComp1MLSComments":
		if e.complexity.Iform.TxtListComp1MLSComments == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1MLSComments(childComplexity), true

	case "Iform.txtListComp1MLSNumber":
		if e.complexity.Iform.TxtListComp1MLSNumber == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1MLSNumber(childComplexity), true

	case "Iform.txtListComp1OriginalListDate":
		if e.complexity.Iform.TxtListComp1OriginalListDate == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1OriginalListDate(childComplexity), true

	case "Iform.txtListComp1OriginalListPrice":
		if e.complexity.Iform.TxtListComp1OriginalListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1OriginalListPrice(childComplexity), true

	case "Iform.txtListComp1PercentFinishedAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1PercentFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1PercentFinishedAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1PoolAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1PoolAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1PoolAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1PorchPatioDeckAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1PorchPatioDeckAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1PorchPatioDeckAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1PricePerSqFt":
		if e.complexity.Iform.TxtListComp1PricePerSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1PricePerSqFt(childComplexity), true

	case "Iform.txtListComp1Proximity":
		if e.complexity.Iform.TxtListComp1Proximity == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1Proximity(childComplexity), true

	case "Iform.txtListComp1QualityAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1QualityAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1QualityAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1SquareFeet":
		if e.complexity.Iform.TxtListComp1SquareFeet == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1SquareFeet(childComplexity), true

	case "Iform.txtListComp1State":
		if e.complexity.Iform.TxtListComp1State == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1State(childComplexity), true

	case "Iform.txtListComp1StyleAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1StyleAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1StyleAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1Subdivision":
		if e.complexity.Iform.TxtListComp1Subdivision == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1Subdivision(childComplexity), true

	case "Iform.txtListComp1TotalRooms":
		if e.complexity.Iform.TxtListComp1TotalRooms == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1TotalRooms(childComplexity), true

	case "Iform.txtListComp1TotalRoomsAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1TotalRoomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1TotalRoomsAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1UnitNo":
		if e.complexity.Iform.TxtListComp1UnitNo == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1UnitNo(childComplexity), true

	case "Iform.txtListComp1Units":
		if e.complexity.Iform.TxtListComp1Units == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1Units(childComplexity), true

	case "Iform.txtListComp1ViewAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1ViewAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1ViewAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1YearBuilt":
		if e.complexity.Iform.TxtListComp1YearBuilt == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1YearBuilt(childComplexity), true

	case "Iform.txtListComp1YearBuiltAdjBuiltIn":
		if e.complexity.Iform.TxtListComp1YearBuiltAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1YearBuiltAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp1Zip":
		if e.complexity.Iform.TxtListComp1Zip == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1Zip(childComplexity), true

	case "Iform.txtListComp1DOM":
		if e.complexity.Iform.TxtListComp1dom == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1dom(childComplexity), true

	case "Iform.txtListComp1GLA":
		if e.complexity.Iform.TxtListComp1gla == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1gla(childComplexity), true

	case "Iform.txtListComp1noUnit":
		if e.complexity.Iform.TxtListComp1noUnit == nil {
			break
		}

		return e.complexity.Iform.TxtListComp1noUnit(childComplexity), true

	case "Iform.txtListComp2Acres":
		if e.complexity.Iform.TxtListComp2Acres == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2Acres(childComplexity), true

	case "Iform.txtListComp2AcresAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2AcresAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2AcresAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2Address":
		if e.complexity.Iform.TxtListComp2Address == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2Address(childComplexity), true

	case "Iform.txtListComp2Adjustments":
		if e.complexity.Iform.TxtListComp2Adjustments == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2Adjustments(childComplexity), true

	case "Iform.txtListComp2Age":
		if e.complexity.Iform.TxtListComp2Age == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2Age(childComplexity), true

	case "Iform.txtListComp2BasementAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2BasementAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2BasementAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2BasementSqFt":
		if e.complexity.Iform.TxtListComp2BasementSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2BasementSqFt(childComplexity), true

	case "Iform.txtListComp2BasementSqFtAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2BasementSqFtAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2BasementSqFtAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2Bedrooms":
		if e.complexity.Iform.TxtListComp2Bedrooms == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2Bedrooms(childComplexity), true

	case "Iform.txtListComp2BedroomsAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2BedroomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2BedroomsAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2City":
		if e.complexity.Iform.TxtListComp2City == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2City(childComplexity), true

	case "Iform.txtListComp2CompTotals":
		if e.complexity.Iform.TxtListComp2CompTotals == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2CompTotals(childComplexity), true

	case "Iform.txtListComp2ComparableComments":
		if e.complexity.Iform.TxtListComp2ComparableComments == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2ComparableComments(childComplexity), true

	case "Iform.txtListComp2ConditionAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2ConditionAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2ConditionAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2CurrentListDate":
		if e.complexity.Iform.TxtListComp2CurrentListDate == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2CurrentListDate(childComplexity), true

	case "Iform.txtListComp2DataSource":
		if e.complexity.Iform.TxtListComp2DataSource == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2DataSource(childComplexity), true

	case "Iform.txtListComp2ExtFinishAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2ExtFinishAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2ExtFinishAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2FireplaceAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2FireplaceAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2FireplaceAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2FormatAdjustments":
		if e.complexity.Iform.TxtListComp2FormatAdjustments == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2FormatAdjustments(childComplexity), true

	case "Iform.txtListComp2FullBaths":
		if e.complexity.Iform.TxtListComp2FullBaths == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2FullBaths(childComplexity), true

	case "Iform.txtListComp2FullBathsAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2FullBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2FullBathsAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2GLAAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2GLAAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2GLAAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2GarageAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2GarageAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2GarageAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2HOAFee":
		if e.complexity.Iform.TxtListComp2HOAFee == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2HOAFee(childComplexity), true

	case "Iform.txtListComp2HalfBaths":
		if e.complexity.Iform.TxtListComp2HalfBaths == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2HalfBaths(childComplexity), true

	case "Iform.txtListComp2HalfBathsAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2HalfBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2HalfBathsAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2IsFinishedAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2IsFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2IsFinishedAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2ListPrice":
		if e.complexity.Iform.TxtListComp2ListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2ListPrice(childComplexity), true

	case "Iform.txtListComp2MLSComments":
		if e.complexity.Iform.TxtListComp2MLSComments == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2MLSComments(childComplexity), true

	case "Iform.txtListComp2MLSNumber":
		if e.complexity.Iform.TxtListComp2MLSNumber == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2MLSNumber(childComplexity), true

	case "Iform.txtListComp2OriginalListDate":
		if e.complexity.Iform.TxtListComp2OriginalListDate == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2OriginalListDate(childComplexity), true

	case "Iform.txtListComp2OriginalListPrice":
		if e.complexity.Iform.TxtListComp2OriginalListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2OriginalListPrice(childComplexity), true

	case "Iform.txtListComp2PercentFinishedAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2PercentFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2PercentFinishedAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2PoolAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2PoolAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2PoolAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2PorchPatioDeckAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2PorchPatioDeckAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2PorchPatioDeckAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2PricePerSqFt":
		if e.complexity.Iform.TxtListComp2PricePerSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2PricePerSqFt(childComplexity), true

	case "Iform.txtListComp2Proximity":
		if e.complexity.Iform.TxtListComp2Proximity == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2Proximity(childComplexity), true

	case "Iform.txtListComp2QualityAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2QualityAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2QualityAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2SquareFeet":
		if e.complexity.Iform.TxtListComp2SquareFeet == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2SquareFeet(childComplexity), true

	case "Iform.txtListComp2State":
		if e.complexity.Iform.TxtListComp2State == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2State(childComplexity), true

	case "Iform.txtListComp2StyleAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2StyleAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2StyleAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2Subdivision":
		if e.complexity.Iform.TxtListComp2Subdivision == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2Subdivision(childComplexity), true

	case "Iform.txtListComp2TotalRooms":
		if e.complexity.Iform.TxtListComp2TotalRooms == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2TotalRooms(childComplexity), true

	case "Iform.txtListComp2TotalRoomsAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2TotalRoomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2TotalRoomsAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2UnitNo":
		if e.complexity.Iform.TxtListComp2UnitNo == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2UnitNo(childComplexity), true

	case "Iform.txtListComp2Units":
		if e.complexity.Iform.TxtListComp2Units == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2Units(childComplexity), true

	case "Iform.txtListComp2ViewAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2ViewAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2ViewAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2YearBuilt":
		if e.complexity.Iform.TxtListComp2YearBuilt == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2YearBuilt(childComplexity), true

	case "Iform.txtListComp2YearBuiltAdjBuiltIn":
		if e.complexity.Iform.TxtListComp2YearBuiltAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2YearBuiltAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp2Zip":
		if e.complexity.Iform.TxtListComp2Zip == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2Zip(childComplexity), true

	case "Iform.txtListComp2DOM":
		if e.complexity.Iform.TxtListComp2dom == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2dom(childComplexity), true

	case "Iform.txtListComp2GLA":
		if e.complexity.Iform.TxtListComp2gla == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2gla(childComplexity), true

	case "Iform.txtListComp2noUnit":
		if e.complexity.Iform.TxtListComp2noUnit == nil {
			break
		}

		return e.complexity.Iform.TxtListComp2noUnit(childComplexity), true

	case "Iform.txtListComp3Acres":
		if e.complexity.Iform.TxtListComp3Acres == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3Acres(childComplexity), true

	case "Iform.txtListComp3AcresAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3AcresAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3AcresAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3Address":
		if e.complexity.Iform.TxtListComp3Address == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3Address(childComplexity), true

	case "Iform.txtListComp3Adjustments":
		if e.complexity.Iform.TxtListComp3Adjustments == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3Adjustments(childComplexity), true

	case "Iform.txtListComp3Age":
		if e.complexity.Iform.TxtListComp3Age == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3Age(childComplexity), true

	case "Iform.txtListComp3BasementAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3BasementAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3BasementAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3BasementSqFt":
		if e.complexity.Iform.TxtListComp3BasementSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3BasementSqFt(childComplexity), true

	case "Iform.txtListComp3BasementSqFtAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3BasementSqFtAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3BasementSqFtAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3Bedrooms":
		if e.complexity.Iform.TxtListComp3Bedrooms == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3Bedrooms(childComplexity), true

	case "Iform.txtListComp3BedroomsAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3BedroomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3BedroomsAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3City":
		if e.complexity.Iform.TxtListComp3City == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3City(childComplexity), true

	case "Iform.txtListComp3CompTotals":
		if e.complexity.Iform.TxtListComp3CompTotals == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3CompTotals(childComplexity), true

	case "Iform.txtListComp3ComparableComments":
		if e.complexity.Iform.TxtListComp3ComparableComments == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3ComparableComments(childComplexity), true

	case "Iform.txtListComp3ConditionAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3ConditionAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3ConditionAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3CurrentListDate":
		if e.complexity.Iform.TxtListComp3CurrentListDate == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3CurrentListDate(childComplexity), true

	case "Iform.txtListComp3DataSource":
		if e.complexity.Iform.TxtListComp3DataSource == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3DataSource(childComplexity), true

	case "Iform.txtListComp3ExtFinishAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3ExtFinishAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3ExtFinishAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3FireplaceAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3FireplaceAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3FireplaceAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3FormatAdjustments":
		if e.complexity.Iform.TxtListComp3FormatAdjustments == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3FormatAdjustments(childComplexity), true

	case "Iform.txtListComp3FullBaths":
		if e.complexity.Iform.TxtListComp3FullBaths == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3FullBaths(childComplexity), true

	case "Iform.txtListComp3FullBathsAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3FullBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3FullBathsAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3GLAAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3GLAAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3GLAAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3GarageAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3GarageAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3GarageAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3HOAFee":
		if e.complexity.Iform.TxtListComp3HOAFee == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3HOAFee(childComplexity), true

	case "Iform.txtListComp3HalfBaths":
		if e.complexity.Iform.TxtListComp3HalfBaths == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3HalfBaths(childComplexity), true

	case "Iform.txtListComp3HalfBathsAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3HalfBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3HalfBathsAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3IsFinishedAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3IsFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3IsFinishedAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3ListPrice":
		if e.complexity.Iform.TxtListComp3ListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3ListPrice(childComplexity), true

	case "Iform.txtListComp3MLSComments":
		if e.complexity.Iform.TxtListComp3MLSComments == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3MLSComments(childComplexity), true

	case "Iform.txtListComp3MLSNumber":
		if e.complexity.Iform.TxtListComp3MLSNumber == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3MLSNumber(childComplexity), true

	case "Iform.txtListComp3OriginalListDate":
		if e.complexity.Iform.TxtListComp3OriginalListDate == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3OriginalListDate(childComplexity), true

	case "Iform.txtListComp3OriginalListPrice":
		if e.complexity.Iform.TxtListComp3OriginalListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3OriginalListPrice(childComplexity), true

	case "Iform.txtListComp3PercentFinishedAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3PercentFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3PercentFinishedAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3PoolAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3PoolAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3PoolAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3PorchPatioDeckAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3PorchPatioDeckAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3PorchPatioDeckAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3PricePerSqFt":
		if e.complexity.Iform.TxtListComp3PricePerSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3PricePerSqFt(childComplexity), true

	case "Iform.txtListComp3Proximity":
		if e.complexity.Iform.TxtListComp3Proximity == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3Proximity(childComplexity), true

	case "Iform.txtListComp3QualityAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3QualityAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3QualityAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3SquareFeet":
		if e.complexity.Iform.TxtListComp3SquareFeet == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3SquareFeet(childComplexity), true

	case "Iform.txtListComp3State":
		if e.complexity.Iform.TxtListComp3State == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3State(childComplexity), true

	case "Iform.txtListComp3StyleAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3StyleAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3StyleAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3Subdivision":
		if e.complexity.Iform.TxtListComp3Subdivision == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3Subdivision(childComplexity), true

	case "Iform.txtListComp3TotalRooms":
		if e.complexity.Iform.TxtListComp3TotalRooms == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3TotalRooms(childComplexity), true

	case "Iform.txtListComp3TotalRoomsAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3TotalRoomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3TotalRoomsAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3UnitNo":
		if e.complexity.Iform.TxtListComp3UnitNo == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3UnitNo(childComplexity), true

	case "Iform.txtListComp3Units":
		if e.complexity.Iform.TxtListComp3Units == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3Units(childComplexity), true

	case "Iform.txtListComp3ViewAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3ViewAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3ViewAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3YearBuilt":
		if e.complexity.Iform.TxtListComp3YearBuilt == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3YearBuilt(childComplexity), true

	case "Iform.txtListComp3YearBuiltAdjBuiltIn":
		if e.complexity.Iform.TxtListComp3YearBuiltAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3YearBuiltAdjBuiltIn(childComplexity), true

	case "Iform.txtListComp3Zip":
		if e.complexity.Iform.TxtListComp3Zip == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3Zip(childComplexity), true

	case "Iform.txtListComp3DOM":
		if e.complexity.Iform.TxtListComp3dom == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3dom(childComplexity), true

	case "Iform.txtListComp3GLA":
		if e.complexity.Iform.TxtListComp3gla == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3gla(childComplexity), true

	case "Iform.txtListComp3noUnit":
		if e.complexity.Iform.TxtListComp3noUnit == nil {
			break
		}

		return e.complexity.Iform.TxtListComp3noUnit(childComplexity), true

	case "Iform.txtListPriceFinalValues":
		if e.complexity.Iform.TxtListPriceFinalValues == nil {
			break
		}

		return e.complexity.Iform.TxtListPriceFinalValues(childComplexity), true

	case "Iform.txtListPriceRepaired":
		if e.complexity.Iform.TxtListPriceRepaired == nil {
			break
		}

		return e.complexity.Iform.TxtListPriceRepaired(childComplexity), true

	case "Iform.txtListings":
		if e.complexity.Iform.TxtListings == nil {
			break
		}

		return e.complexity.Iform.TxtListings(childComplexity), true

	case "Iform.txtListingsDOMRange1":
		if e.complexity.Iform.TxtListingsDOMRange1 == nil {
			break
		}

		return e.complexity.Iform.TxtListingsDOMRange1(childComplexity), true

	case "Iform.txtListingsDOMRange2":
		if e.complexity.Iform.TxtListingsDOMRange2 == nil {
			break
		}

		return e.complexity.Iform.TxtListingsDOMRange2(childComplexity), true

	case "Iform.txtListingsDOM":
		if e.complexity.Iform.TxtListingsDom == nil {
			break
		}

		return e.complexity.Iform.TxtListingsDom(childComplexity), true

	case "Iform.txtListingsMaxValue":
		if e.complexity.Iform.TxtListingsMaxValue == nil {
			break
		}

		return e.complexity.Iform.TxtListingsMaxValue(childComplexity), true

	case "Iform.txtListingsMedValue":
		if e.complexity.Iform.TxtListingsMedValue == nil {
			break
		}

		return e.complexity.Iform.TxtListingsMedValue(childComplexity), true

	case "Iform.txtListingsMinValue":
		if e.complexity.Iform.TxtListingsMinValue == nil {
			break
		}

		return e.complexity.Iform.TxtListingsMinValue(childComplexity), true

	case "Iform.txtListingsRange1":
		if e.complexity.Iform.TxtListingsRange1 == nil {
			break
		}

		return e.complexity.Iform.TxtListingsRange1(childComplexity), true

	case "Iform.txtListingsRange2":
		if e.complexity.Iform.TxtListingsRange2 == nil {
			break
		}

		return e.complexity.Iform.TxtListingsRange2(childComplexity), true

	case "Iform.txtLocation":
		if e.complexity.Iform.TxtLocation == nil {
			break
		}

		return e.complexity.Iform.TxtLocation(childComplexity), true

	case "Iform.txtMarketRent":
		if e.complexity.Iform.TxtMarketRent == nil {
			break
		}

		return e.complexity.Iform.TxtMarketRent(childComplexity), true

	case "Iform.txtMarketingStrategy":
		if e.complexity.Iform.TxtMarketingStrategy == nil {
			break
		}

		return e.complexity.Iform.TxtMarketingStrategy(childComplexity), true

	case "Iform.txtMonthlyPecent":
		if e.complexity.Iform.TxtMonthlyPecent == nil {
			break
		}

		return e.complexity.Iform.TxtMonthlyPecent(childComplexity), true

	case "Iform.txtNeighborhoodComments":
		if e.complexity.Iform.TxtNeighborhoodComments == nil {
			break
		}

		return e.complexity.Iform.TxtNeighborhoodComments(childComplexity), true

	case "Iform.txtNeighborhoodTrend":
		if e.complexity.Iform.TxtNeighborhoodTrend == nil {
			break
		}

		return e.complexity.Iform.TxtNeighborhoodTrend(childComplexity), true

	case "Iform.txtNeighborhoodTrendComments":
		if e.complexity.Iform.TxtNeighborhoodTrendComments == nil {
			break
		}

		return e.complexity.Iform.TxtNeighborhoodTrendComments(childComplexity), true

	case "Iform.txtNoBoarded":
		if e.complexity.Iform.TxtNoBoarded == nil {
			break
		}

		return e.complexity.Iform.TxtNoBoarded(childComplexity), true

	case "Iform.txtNoOfActive":
		if e.complexity.Iform.TxtNoOfActive == nil {
			break
		}

		return e.complexity.Iform.TxtNoOfActive(childComplexity), true

	case "Iform.txtNoOfDistressed":
		if e.complexity.Iform.TxtNoOfDistressed == nil {
			break
		}

		return e.complexity.Iform.TxtNoOfDistressed(childComplexity), true

	case "Iform.txtNoOfFM":
		if e.complexity.Iform.TxtNoOfFm == nil {
			break
		}

		return e.complexity.Iform.TxtNoOfFm(childComplexity), true

	case "Iform.txtNoOfREOListings":
		if e.complexity.Iform.TxtNoOfREOListings == nil {
			break
		}

		return e.complexity.Iform.TxtNoOfREOListings(childComplexity), true

	case "Iform.txtNoOfREOSales":
		if e.complexity.Iform.TxtNoOfREOSales == nil {
			break
		}

		return e.complexity.Iform.TxtNoOfREOSales(childComplexity), true

	case "Iform.txtNoOfRentals":
		if e.complexity.Iform.TxtNoOfRentals == nil {
			break
		}

		return e.complexity.Iform.TxtNoOfRentals(childComplexity), true

	case "Iform.txtNoOfREO":
		if e.complexity.Iform.TxtNoOfReo == nil {
			break
		}

		return e.complexity.Iform.TxtNoOfReo(childComplexity), true

	case "Iform.txtNoOfSSListings":
		if e.complexity.Iform.TxtNoOfSSListings == nil {
			break
		}

		return e.complexity.Iform.TxtNoOfSSListings(childComplexity), true

	case "Iform.txtNoOfSSSales":
		if e.complexity.Iform.TxtNoOfSSSales == nil {
			break
		}

		return e.complexity.Iform.TxtNoOfSSSales(childComplexity), true

	case "Iform.txtNoOfSS":
		if e.complexity.Iform.TxtNoOfSs == nil {
			break
		}

		return e.complexity.Iform.TxtNoOfSs(childComplexity), true

	case "Iform.txtNoRentHomes":
		if e.complexity.Iform.TxtNoRentHomes == nil {
			break
		}

		return e.complexity.Iform.TxtNoRentHomes(childComplexity), true

	case "Iform.txtOrderNumber":
		if e.complexity.Iform.TxtOrderNumber == nil {
			break
		}

		return e.complexity.Iform.TxtOrderNumber(childComplexity), true

	case "Iform.txtOtherComments":
		if e.complexity.Iform.TxtOtherComments == nil {
			break
		}

		return e.complexity.Iform.TxtOtherComments(childComplexity), true

	case "Iform.txtOwnerOccupied":
		if e.complexity.Iform.TxtOwnerOccupied == nil {
			break
		}

		return e.complexity.Iform.TxtOwnerOccupied(childComplexity), true

	case "Iform.txtPreparerInfoAddress":
		if e.complexity.Iform.TxtPreparerInfoAddress == nil {
			break
		}

		return e.complexity.Iform.TxtPreparerInfoAddress(childComplexity), true

	case "Iform.txtPreparerInfoAgent":
		if e.complexity.Iform.TxtPreparerInfoAgent == nil {
			break
		}

		return e.complexity.Iform.TxtPreparerInfoAgent(childComplexity), true

	case "Iform.txtPreparerInfoAgentCompany":
		if e.complexity.Iform.TxtPreparerInfoAgentCompany == nil {
			break
		}

		return e.complexity.Iform.TxtPreparerInfoAgentCompany(childComplexity), true

	case "Iform.txtPreparerInfoAgentLicense":
		if e.complexity.Iform.TxtPreparerInfoAgentLicense == nil {
			break
		}

		return e.complexity.Iform.TxtPreparerInfoAgentLicense(childComplexity), true

	case "Iform.txtPreparerInfoBroker":
		if e.complexity.Iform.TxtPreparerInfoBroker == nil {
			break
		}

		return e.complexity.Iform.TxtPreparerInfoBroker(childComplexity), true

	case "Iform.txtPreparerInfoBrokerLicense":
		if e.complexity.Iform.TxtPreparerInfoBrokerLicense == nil {
			break
		}

		return e.complexity.Iform.TxtPreparerInfoBrokerLicense(childComplexity), true

	case "Iform.txtPreparerInfoBrokerage":
		if e.complexity.Iform.TxtPreparerInfoBrokerage == nil {
			break
		}

		return e.complexity.Iform.TxtPreparerInfoBrokerage(childComplexity), true

	case "Iform.txtPreparerInfoEmail":
		if e.complexity.Iform.TxtPreparerInfoEmail == nil {
			break
		}

		return e.complexity.Iform.TxtPreparerInfoEmail(childComplexity), true

	case "Iform.txtPreparerInfoMilesAwayFromSubject":
		if e.complexity.Iform.TxtPreparerInfoMilesAwayFromSubject == nil {
			break
		}

		return e.complexity.Iform.TxtPreparerInfoMilesAwayFromSubject(childComplexity), true

	case "Iform.txtPreparerInfoPhone":
		if e.complexity.Iform.TxtPreparerInfoPhone == nil {
			break
		}

		return e.complexity.Iform.TxtPreparerInfoPhone(childComplexity), true

	case "Iform.txtPreparerInfoYearsOfExperience":
		if e.complexity.Iform.TxtPreparerInfoYearsOfExperience == nil {
			break
		}

		return e.complexity.Iform.TxtPreparerInfoYearsOfExperience(childComplexity), true

	case "Iform.txtRenterOccupied":
		if e.complexity.Iform.TxtRenterOccupied == nil {
			break
		}

		return e.complexity.Iform.TxtRenterOccupied(childComplexity), true

	case "Iform.txtSaleComp1Acres":
		if e.complexity.Iform.TxtSaleComp1Acres == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1Acres(childComplexity), true

	case "Iform.txtSaleComp1AcresAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1AcresAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1AcresAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1Address":
		if e.complexity.Iform.TxtSaleComp1Address == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1Address(childComplexity), true

	case "Iform.txtSaleComp1Adjustments":
		if e.complexity.Iform.TxtSaleComp1Adjustments == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1Adjustments(childComplexity), true

	case "Iform.txtSaleComp1Age":
		if e.complexity.Iform.TxtSaleComp1Age == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1Age(childComplexity), true

	case "Iform.txtSaleComp1BasementAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1BasementAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1BasementAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1BasementSqFt":
		if e.complexity.Iform.TxtSaleComp1BasementSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1BasementSqFt(childComplexity), true

	case "Iform.txtSaleComp1BasementSqFtAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1BasementSqFtAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1BasementSqFtAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1Bedrooms":
		if e.complexity.Iform.TxtSaleComp1Bedrooms == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1Bedrooms(childComplexity), true

	case "Iform.txtSaleComp1BedroomsAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1BedroomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1BedroomsAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1City":
		if e.complexity.Iform.TxtSaleComp1City == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1City(childComplexity), true

	case "Iform.txtSaleComp1CompTotals":
		if e.complexity.Iform.TxtSaleComp1CompTotals == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1CompTotals(childComplexity), true

	case "Iform.txtSaleComp1ComparableComments":
		if e.complexity.Iform.TxtSaleComp1ComparableComments == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1ComparableComments(childComplexity), true

	case "Iform.txtSaleComp1ConditionAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1ConditionAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1ConditionAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1CurrentListDate":
		if e.complexity.Iform.TxtSaleComp1CurrentListDate == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1CurrentListDate(childComplexity), true

	case "Iform.txtSaleComp1DataSource":
		if e.complexity.Iform.TxtSaleComp1DataSource == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1DataSource(childComplexity), true

	case "Iform.txtSaleComp1ExtFinishAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1ExtFinishAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1ExtFinishAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1FireplaceAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1FireplaceAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1FireplaceAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1FormatAdjustments":
		if e.complexity.Iform.TxtSaleComp1FormatAdjustments == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1FormatAdjustments(childComplexity), true

	case "Iform.txtSaleComp1FullBaths":
		if e.complexity.Iform.TxtSaleComp1FullBaths == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1FullBaths(childComplexity), true

	case "Iform.txtSaleComp1FullBathsAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1FullBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1FullBathsAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1GLAAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1GLAAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1GLAAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1GarageAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1GarageAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1GarageAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1HOAFee":
		if e.complexity.Iform.TxtSaleComp1HOAFee == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1HOAFee(childComplexity), true

	case "Iform.txtSaleComp1HalfBaths":
		if e.complexity.Iform.TxtSaleComp1HalfBaths == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1HalfBaths(childComplexity), true

	case "Iform.txtSaleComp1HalfBathsAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1HalfBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1HalfBathsAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1IsFinishedAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1IsFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1IsFinishedAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1ListPrice":
		if e.complexity.Iform.TxtSaleComp1ListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1ListPrice(childComplexity), true

	case "Iform.txtSaleComp1MLSComments":
		if e.complexity.Iform.TxtSaleComp1MLSComments == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1MLSComments(childComplexity), true

	case "Iform.txtSaleComp1MLSNumber":
		if e.complexity.Iform.TxtSaleComp1MLSNumber == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1MLSNumber(childComplexity), true

	case "Iform.txtSaleComp1OriginalListDate":
		if e.complexity.Iform.TxtSaleComp1OriginalListDate == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1OriginalListDate(childComplexity), true

	case "Iform.txtSaleComp1OriginalListPrice":
		if e.complexity.Iform.TxtSaleComp1OriginalListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1OriginalListPrice(childComplexity), true

	case "Iform.txtSaleComp1PercentFinishedAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1PercentFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1PercentFinishedAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1PoolAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1PoolAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1PoolAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1PorchPatioDeckAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1PorchPatioDeckAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1PorchPatioDeckAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1PricePerSqFt":
		if e.complexity.Iform.TxtSaleComp1PricePerSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1PricePerSqFt(childComplexity), true

	case "Iform.txtSaleComp1Proximity":
		if e.complexity.Iform.TxtSaleComp1Proximity == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1Proximity(childComplexity), true

	case "Iform.txtSaleComp1QualityAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1QualityAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1QualityAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1SaleDate":
		if e.complexity.Iform.TxtSaleComp1SaleDate == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1SaleDate(childComplexity), true

	case "Iform.txtSaleComp1SalePrice":
		if e.complexity.Iform.TxtSaleComp1SalePrice == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1SalePrice(childComplexity), true

	case "Iform.txtSaleComp1SquareFeet":
		if e.complexity.Iform.TxtSaleComp1SquareFeet == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1SquareFeet(childComplexity), true

	case "Iform.txtSaleComp1State":
		if e.complexity.Iform.TxtSaleComp1State == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1State(childComplexity), true

	case "Iform.txtSaleComp1StyleAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1StyleAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1StyleAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1Subdivision":
		if e.complexity.Iform.TxtSaleComp1Subdivision == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1Subdivision(childComplexity), true

	case "Iform.txtSaleComp1TotalRooms":
		if e.complexity.Iform.TxtSaleComp1TotalRooms == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1TotalRooms(childComplexity), true

	case "Iform.txtSaleComp1TotalRoomsAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1TotalRoomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1TotalRoomsAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1UnitNo":
		if e.complexity.Iform.TxtSaleComp1UnitNo == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1UnitNo(childComplexity), true

	case "Iform.txtSaleComp1Units":
		if e.complexity.Iform.TxtSaleComp1Units == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1Units(childComplexity), true

	case "Iform.txtSaleComp1ViewAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1ViewAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1ViewAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1YearBuilt":
		if e.complexity.Iform.TxtSaleComp1YearBuilt == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1YearBuilt(childComplexity), true

	case "Iform.txtSaleComp1YearBuiltAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp1YearBuiltAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1YearBuiltAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp1Zip":
		if e.complexity.Iform.TxtSaleComp1Zip == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1Zip(childComplexity), true

	case "Iform.txtSaleComp1DOM":
		if e.complexity.Iform.TxtSaleComp1dom == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1dom(childComplexity), true

	case "Iform.txtSaleComp1GLA":
		if e.complexity.Iform.TxtSaleComp1gla == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1gla(childComplexity), true

	case "Iform.txtSaleComp1noUnit":
		if e.complexity.Iform.TxtSaleComp1noUnit == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp1noUnit(childComplexity), true

	case "Iform.txtSaleComp2Acres":
		if e.complexity.Iform.TxtSaleComp2Acres == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2Acres(childComplexity), true

	case "Iform.txtSaleComp2AcresAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2AcresAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2AcresAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2Address":
		if e.complexity.Iform.TxtSaleComp2Address == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2Address(childComplexity), true

	case "Iform.txtSaleComp2Adjustments":
		if e.complexity.Iform.TxtSaleComp2Adjustments == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2Adjustments(childComplexity), true

	case "Iform.txtSaleComp2Age":
		if e.complexity.Iform.TxtSaleComp2Age == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2Age(childComplexity), true

	case "Iform.txtSaleComp2BasementAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2BasementAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2BasementAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2BasementSqFt":
		if e.complexity.Iform.TxtSaleComp2BasementSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2BasementSqFt(childComplexity), true

	case "Iform.txtSaleComp2BasementSqFtAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2BasementSqFtAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2BasementSqFtAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2Bedrooms":
		if e.complexity.Iform.TxtSaleComp2Bedrooms == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2Bedrooms(childComplexity), true

	case "Iform.txtSaleComp2BedroomsAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2BedroomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2BedroomsAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2City":
		if e.complexity.Iform.TxtSaleComp2City == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2City(childComplexity), true

	case "Iform.txtSaleComp2CompTotals":
		if e.complexity.Iform.TxtSaleComp2CompTotals == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2CompTotals(childComplexity), true

	case "Iform.txtSaleComp2ComparableComments":
		if e.complexity.Iform.TxtSaleComp2ComparableComments == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2ComparableComments(childComplexity), true

	case "Iform.txtSaleComp2ConditionAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2ConditionAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2ConditionAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2CurrentListDate":
		if e.complexity.Iform.TxtSaleComp2CurrentListDate == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2CurrentListDate(childComplexity), true

	case "Iform.txtSaleComp2DataSource":
		if e.complexity.Iform.TxtSaleComp2DataSource == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2DataSource(childComplexity), true

	case "Iform.txtSaleComp2ExtFinishAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2ExtFinishAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2ExtFinishAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2FireplaceAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2FireplaceAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2FireplaceAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2FormatAdjustments":
		if e.complexity.Iform.TxtSaleComp2FormatAdjustments == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2FormatAdjustments(childComplexity), true

	case "Iform.txtSaleComp2FullBaths":
		if e.complexity.Iform.TxtSaleComp2FullBaths == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2FullBaths(childComplexity), true

	case "Iform.txtSaleComp2FullBathsAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2FullBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2FullBathsAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2GLAAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2GLAAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2GLAAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2GarageAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2GarageAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2GarageAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2HOAFee":
		if e.complexity.Iform.TxtSaleComp2HOAFee == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2HOAFee(childComplexity), true

	case "Iform.txtSaleComp2HalfBaths":
		if e.complexity.Iform.TxtSaleComp2HalfBaths == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2HalfBaths(childComplexity), true

	case "Iform.txtSaleComp2HalfBathsAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2HalfBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2HalfBathsAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2IsFinishedAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2IsFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2IsFinishedAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2ListPrice":
		if e.complexity.Iform.TxtSaleComp2ListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2ListPrice(childComplexity), true

	case "Iform.txtSaleComp2MLSComments":
		if e.complexity.Iform.TxtSaleComp2MLSComments == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2MLSComments(childComplexity), true

	case "Iform.txtSaleComp2MLSNumber":
		if e.complexity.Iform.TxtSaleComp2MLSNumber == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2MLSNumber(childComplexity), true

	case "Iform.txtSaleComp2OriginalListDate":
		if e.complexity.Iform.TxtSaleComp2OriginalListDate == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2OriginalListDate(childComplexity), true

	case "Iform.txtSaleComp2OriginalListPrice":
		if e.complexity.Iform.TxtSaleComp2OriginalListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2OriginalListPrice(childComplexity), true

	case "Iform.txtSaleComp2PercentFinishedAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2PercentFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2PercentFinishedAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2PoolAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2PoolAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2PoolAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2PorchPatioDeckAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2PorchPatioDeckAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2PorchPatioDeckAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2PricePerSqFt":
		if e.complexity.Iform.TxtSaleComp2PricePerSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2PricePerSqFt(childComplexity), true

	case "Iform.txtSaleComp2Proximity":
		if e.complexity.Iform.TxtSaleComp2Proximity == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2Proximity(childComplexity), true

	case "Iform.txtSaleComp2QualityAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2QualityAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2QualityAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2SaleDate":
		if e.complexity.Iform.TxtSaleComp2SaleDate == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2SaleDate(childComplexity), true

	case "Iform.txtSaleComp2SalePrice":
		if e.complexity.Iform.TxtSaleComp2SalePrice == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2SalePrice(childComplexity), true

	case "Iform.txtSaleComp2SquareFeet":
		if e.complexity.Iform.TxtSaleComp2SquareFeet == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2SquareFeet(childComplexity), true

	case "Iform.txtSaleComp2State":
		if e.complexity.Iform.TxtSaleComp2State == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2State(childComplexity), true

	case "Iform.txtSaleComp2StyleAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2StyleAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2StyleAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2Subdivision":
		if e.complexity.Iform.TxtSaleComp2Subdivision == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2Subdivision(childComplexity), true

	case "Iform.txtSaleComp2TotalRooms":
		if e.complexity.Iform.TxtSaleComp2TotalRooms == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2TotalRooms(childComplexity), true

	case "Iform.txtSaleComp2TotalRoomsAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2TotalRoomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2TotalRoomsAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2UnitNo":
		if e.complexity.Iform.TxtSaleComp2UnitNo == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2UnitNo(childComplexity), true

	case "Iform.txtSaleComp2Units":
		if e.complexity.Iform.TxtSaleComp2Units == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2Units(childComplexity), true

	case "Iform.txtSaleComp2ViewAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2ViewAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2ViewAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2YearBuilt":
		if e.complexity.Iform.TxtSaleComp2YearBuilt == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2YearBuilt(childComplexity), true

	case "Iform.txtSaleComp2YearBuiltAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp2YearBuiltAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2YearBuiltAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp2Zip":
		if e.complexity.Iform.TxtSaleComp2Zip == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2Zip(childComplexity), true

	case "Iform.txtSaleComp2DOM":
		if e.complexity.Iform.TxtSaleComp2dom == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2dom(childComplexity), true

	case "Iform.txtSaleComp2GLA":
		if e.complexity.Iform.TxtSaleComp2gla == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2gla(childComplexity), true

	case "Iform.txtSaleComp2noUnit":
		if e.complexity.Iform.TxtSaleComp2noUnit == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp2noUnit(childComplexity), true

	case "Iform.txtSaleComp3Acres":
		if e.complexity.Iform.TxtSaleComp3Acres == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3Acres(childComplexity), true

	case "Iform.txtSaleComp3AcresAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3AcresAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3AcresAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3Address":
		if e.complexity.Iform.TxtSaleComp3Address == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3Address(childComplexity), true

	case "Iform.txtSaleComp3Adjustments":
		if e.complexity.Iform.TxtSaleComp3Adjustments == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3Adjustments(childComplexity), true

	case "Iform.txtSaleComp3Age":
		if e.complexity.Iform.TxtSaleComp3Age == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3Age(childComplexity), true

	case "Iform.txtSaleComp3BasementAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3BasementAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3BasementAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3BasementSqFt":
		if e.complexity.Iform.TxtSaleComp3BasementSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3BasementSqFt(childComplexity), true

	case "Iform.txtSaleComp3BasementSqFtAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3BasementSqFtAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3BasementSqFtAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3Bedrooms":
		if e.complexity.Iform.TxtSaleComp3Bedrooms == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3Bedrooms(childComplexity), true

	case "Iform.txtSaleComp3BedroomsAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3BedroomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3BedroomsAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3City":
		if e.complexity.Iform.TxtSaleComp3City == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3City(childComplexity), true

	case "Iform.txtSaleComp3CompTotals":
		if e.complexity.Iform.TxtSaleComp3CompTotals == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3CompTotals(childComplexity), true

	case "Iform.txtSaleComp3ComparableComments":
		if e.complexity.Iform.TxtSaleComp3ComparableComments == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3ComparableComments(childComplexity), true

	case "Iform.txtSaleComp3ConditionAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3ConditionAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3ConditionAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3CurrentListDate":
		if e.complexity.Iform.TxtSaleComp3CurrentListDate == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3CurrentListDate(childComplexity), true

	case "Iform.txtSaleComp3DataSource":
		if e.complexity.Iform.TxtSaleComp3DataSource == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3DataSource(childComplexity), true

	case "Iform.txtSaleComp3ExtFinishAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3ExtFinishAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3ExtFinishAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3FireplaceAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3FireplaceAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3FireplaceAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3FormatAdjustments":
		if e.complexity.Iform.TxtSaleComp3FormatAdjustments == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3FormatAdjustments(childComplexity), true

	case "Iform.txtSaleComp3FullBaths":
		if e.complexity.Iform.TxtSaleComp3FullBaths == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3FullBaths(childComplexity), true

	case "Iform.txtSaleComp3FullBathsAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3FullBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3FullBathsAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3GLAAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3GLAAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3GLAAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3GarageAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3GarageAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3GarageAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3HOAFee":
		if e.complexity.Iform.TxtSaleComp3HOAFee == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3HOAFee(childComplexity), true

	case "Iform.txtSaleComp3HalfBaths":
		if e.complexity.Iform.TxtSaleComp3HalfBaths == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3HalfBaths(childComplexity), true

	case "Iform.txtSaleComp3HalfBathsAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3HalfBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3HalfBathsAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3IsFinishedAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3IsFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3IsFinishedAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3ListPrice":
		if e.complexity.Iform.TxtSaleComp3ListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3ListPrice(childComplexity), true

	case "Iform.txtSaleComp3MLSComments":
		if e.complexity.Iform.TxtSaleComp3MLSComments == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3MLSComments(childComplexity), true

	case "Iform.txtSaleComp3MLSNumber":
		if e.complexity.Iform.TxtSaleComp3MLSNumber == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3MLSNumber(childComplexity), true

	case "Iform.txtSaleComp3OriginalListDate":
		if e.complexity.Iform.TxtSaleComp3OriginalListDate == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3OriginalListDate(childComplexity), true

	case "Iform.txtSaleComp3OriginalListPrice":
		if e.complexity.Iform.TxtSaleComp3OriginalListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3OriginalListPrice(childComplexity), true

	case "Iform.txtSaleComp3PercentFinishedAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3PercentFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3PercentFinishedAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3PoolAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3PoolAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3PoolAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3PorchPatioDeckAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3PorchPatioDeckAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3PorchPatioDeckAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3PricePerSqFt":
		if e.complexity.Iform.TxtSaleComp3PricePerSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3PricePerSqFt(childComplexity), true

	case "Iform.txtSaleComp3Proximity":
		if e.complexity.Iform.TxtSaleComp3Proximity == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3Proximity(childComplexity), true

	case "Iform.txtSaleComp3QualityAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3QualityAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3QualityAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3SaleDate":
		if e.complexity.Iform.TxtSaleComp3SaleDate == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3SaleDate(childComplexity), true

	case "Iform.txtSaleComp3SalePrice":
		if e.complexity.Iform.TxtSaleComp3SalePrice == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3SalePrice(childComplexity), true

	case "Iform.txtSaleComp3SquareFeet":
		if e.complexity.Iform.TxtSaleComp3SquareFeet == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3SquareFeet(childComplexity), true

	case "Iform.txtSaleComp3State":
		if e.complexity.Iform.TxtSaleComp3State == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3State(childComplexity), true

	case "Iform.txtSaleComp3StyleAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3StyleAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3StyleAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3Subdivision":
		if e.complexity.Iform.TxtSaleComp3Subdivision == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3Subdivision(childComplexity), true

	case "Iform.txtSaleComp3TotalRooms":
		if e.complexity.Iform.TxtSaleComp3TotalRooms == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3TotalRooms(childComplexity), true

	case "Iform.txtSaleComp3TotalRoomsAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3TotalRoomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3TotalRoomsAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3UnitNo":
		if e.complexity.Iform.TxtSaleComp3UnitNo == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3UnitNo(childComplexity), true

	case "Iform.txtSaleComp3Units":
		if e.complexity.Iform.TxtSaleComp3Units == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3Units(childComplexity), true

	case "Iform.txtSaleComp3ViewAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3ViewAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3ViewAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3YearBuilt":
		if e.complexity.Iform.TxtSaleComp3YearBuilt == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3YearBuilt(childComplexity), true

	case "Iform.txtSaleComp3YearBuiltAdjBuiltIn":
		if e.complexity.Iform.TxtSaleComp3YearBuiltAdjBuiltIn == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3YearBuiltAdjBuiltIn(childComplexity), true

	case "Iform.txtSaleComp3Zip":
		if e.complexity.Iform.TxtSaleComp3Zip == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3Zip(childComplexity), true

	case "Iform.txtSaleComp3DOM":
		if e.complexity.Iform.TxtSaleComp3dom == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3dom(childComplexity), true

	case "Iform.txtSaleComp3GLA":
		if e.complexity.Iform.TxtSaleComp3gla == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3gla(childComplexity), true

	case "Iform.txtSaleComp3noUnit":
		if e.complexity.Iform.TxtSaleComp3noUnit == nil {
			break
		}

		return e.complexity.Iform.TxtSaleComp3noUnit(childComplexity), true

	case "Iform.txtSales":
		if e.complexity.Iform.TxtSales == nil {
			break
		}

		return e.complexity.Iform.TxtSales(childComplexity), true

	case "Iform.txtSalesDOMRange1":
		if e.complexity.Iform.TxtSalesDOMRange1 == nil {
			break
		}

		return e.complexity.Iform.TxtSalesDOMRange1(childComplexity), true

	case "Iform.txtSalesDOMRange2":
		if e.complexity.Iform.TxtSalesDOMRange2 == nil {
			break
		}

		return e.complexity.Iform.TxtSalesDOMRange2(childComplexity), true

	case "Iform.txtSalesDOM":
		if e.complexity.Iform.TxtSalesDom == nil {
			break
		}

		return e.complexity.Iform.TxtSalesDom(childComplexity), true

	case "Iform.txtSalesMedValue":
		if e.complexity.Iform.TxtSalesMedValue == nil {
			break
		}

		return e.complexity.Iform.TxtSalesMedValue(childComplexity), true

	case "Iform.txtSalesRange1":
		if e.complexity.Iform.TxtSalesRange1 == nil {
			break
		}

		return e.complexity.Iform.TxtSalesRange1(childComplexity), true

	case "Iform.txtSalesRange2":
		if e.complexity.Iform.TxtSalesRange2 == nil {
			break
		}

		return e.complexity.Iform.TxtSalesRange2(childComplexity), true

	case "Iform.txtSubjectAcres":
		if e.complexity.Iform.TxtSubjectAcres == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectAcres(childComplexity), true

	case "Iform.txtSubjectAddress":
		if e.complexity.Iform.TxtSubjectAddress == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectAddress(childComplexity), true

	case "Iform.txtSubjectAdjustments":
		if e.complexity.Iform.TxtSubjectAdjustments == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectAdjustments(childComplexity), true

	case "Iform.txtSubjectAge":
		if e.complexity.Iform.TxtSubjectAge == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectAge(childComplexity), true

	case "Iform.txtSubjectBasementSqFt":
		if e.complexity.Iform.TxtSubjectBasementSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectBasementSqFt(childComplexity), true

	case "Iform.txtSubjectBedrooms":
		if e.complexity.Iform.TxtSubjectBedrooms == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectBedrooms(childComplexity), true

	case "Iform.txtSubjectCity":
		if e.complexity.Iform.TxtSubjectCity == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectCity(childComplexity), true

	case "Iform.txtSubjectComments":
		if e.complexity.Iform.TxtSubjectComments == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectComments(childComplexity), true

	case "Iform.txtSubjectCompTotals":
		if e.complexity.Iform.TxtSubjectCompTotals == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectCompTotals(childComplexity), true

	case "Iform.txtSubjectCurrentListDate":
		if e.complexity.Iform.TxtSubjectCurrentListDate == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectCurrentListDate(childComplexity), true

	case "Iform.txtSubjectDataSource":
		if e.complexity.Iform.TxtSubjectDataSource == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectDataSource(childComplexity), true

	case "Iform.txtSubjectDOM":
		if e.complexity.Iform.TxtSubjectDom == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectDom(childComplexity), true

	case "Iform.txtSubjectFullBaths":
		if e.complexity.Iform.TxtSubjectFullBaths == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectFullBaths(childComplexity), true

	case "Iform.txtSubjectGLA":
		if e.complexity.Iform.TxtSubjectGla == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectGla(childComplexity), true

	case "Iform.txtSubjectHOAFee":
		if e.complexity.Iform.TxtSubjectHOAFee == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectHOAFee(childComplexity), true

	case "Iform.txtSubjectHalfBaths":
		if e.complexity.Iform.TxtSubjectHalfBaths == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectHalfBaths(childComplexity), true

	case "Iform.txtSubjectListPrice":
		if e.complexity.Iform.TxtSubjectListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectListPrice(childComplexity), true

	case "Iform.txtSubjectMLSNumber":
		if e.complexity.Iform.TxtSubjectMLSNumber == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectMLSNumber(childComplexity), true

	case "Iform.txtSubjectOriginalListDate":
		if e.complexity.Iform.TxtSubjectOriginalListDate == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectOriginalListDate(childComplexity), true

	case "Iform.txtSubjectOriginalListPrice":
		if e.complexity.Iform.TxtSubjectOriginalListPrice == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectOriginalListPrice(childComplexity), true

	case "Iform.txtSubjectPricePerSqFt":
		if e.complexity.Iform.TxtSubjectPricePerSqFt == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectPricePerSqFt(childComplexity), true

	case "Iform.txtSubjectProximity":
		if e.complexity.Iform.TxtSubjectProximity == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectProximity(childComplexity), true

	case "Iform.txtSubjectSaleDate":
		if e.complexity.Iform.TxtSubjectSaleDate == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectSaleDate(childComplexity), true

	case "Iform.txtSubjectSalePrice":
		if e.complexity.Iform.TxtSubjectSalePrice == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectSalePrice(childComplexity), true

	case "Iform.txtSubjectSquareFeet":
		if e.complexity.Iform.TxtSubjectSquareFeet == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectSquareFeet(childComplexity), true

	case "Iform.txtSubjectState":
		if e.complexity.Iform.TxtSubjectState == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectState(childComplexity), true

	case "Iform.txtSubjectSubdivision":
		if e.complexity.Iform.TxtSubjectSubdivision == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectSubdivision(childComplexity), true

	case "Iform.txtSubjectTotalRooms":
		if e.complexity.Iform.TxtSubjectTotalRooms == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectTotalRooms(childComplexity), true

	case "Iform.txtSubjectUnitNo":
		if e.complexity.Iform.TxtSubjectUnitNo == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectUnitNo(childComplexity), true

	case "Iform.txtSubjectUnits":
		if e.complexity.Iform.TxtSubjectUnits == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectUnits(childComplexity), true

	case "Iform.txtSubjectYearBuilt":
		if e.complexity.Iform.TxtSubjectYearBuilt == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectYearBuilt(childComplexity), true

	case "Iform.txtSubjectZip":
		if e.complexity.Iform.TxtSubjectZip == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectZip(childComplexity), true

	case "Iform.txtSubjectnoUnit":
		if e.complexity.Iform.TxtSubjectnoUnit == nil {
			break
		}

		return e.complexity.Iform.TxtSubjectnoUnit(childComplexity), true

	case "Iform.txtTaxID":
		if e.complexity.Iform.TxtTaxID == nil {
			break
		}

		return e.complexity.Iform.TxtTaxID(childComplexity), true

	case "Iform.txtTotalListings":
		if e.complexity.Iform.TxtTotalListings == nil {
			break
		}

		return e.complexity.Iform.TxtTotalListings(childComplexity), true

	case "Iform.txtTotalSales":
		if e.complexity.Iform.TxtTotalSales == nil {
			break
		}

		return e.complexity.Iform.TxtTotalSales(childComplexity), true

	case "Iform.txtTrullia":
		if e.complexity.Iform.TxtTrullia == nil {
			break
		}

		return e.complexity.Iform.TxtTrullia(childComplexity), true

	case "Iform.txtTypicalDOM":
		if e.complexity.Iform.TxtTypicalDom == nil {
			break
		}

		return e.complexity.Iform.TxtTypicalDom(childComplexity), true

	case "Iform.txtTypicalRentalRates":
		if e.complexity.Iform.TxtTypicalRentalRates == nil {
			break
		}

		return e.complexity.Iform.TxtTypicalRentalRates(childComplexity), true

	case "Iform.txtUnique":
		if e.complexity.Iform.TxtUnique == nil {
			break
		}

		return e.complexity.Iform.TxtUnique(childComplexity), true

	case "Iform.txtUniqueComments":
		if e.complexity.Iform.TxtUniqueComments == nil {
			break
		}

		return e.complexity.Iform.TxtUniqueComments(childComplexity), true

	case "Iform.txtValidation":
		if e.complexity.Iform.TxtValidation == nil {
			break
		}

		return e.complexity.Iform.TxtValidation(childComplexity), true

	case "Iform.txtValidation1":
		if e.complexity.Iform.TxtValidation1 == nil {
			break
		}

		return e.complexity.Iform.TxtValidation1(childComplexity), true

	case "Iform.txtZillow":
		if e.complexity.Iform.TxtZillow == nil {
			break
		}

		return e.complexity.Iform.TxtZillow(childComplexity), true

	case "Iform.txtZillowNeighborhoodTrend":
		if e.complexity.Iform.TxtZillowNeighborhoodTrend == nil {
			break
		}

		return e.complexity.Iform.TxtZillowNeighborhoodTrend(childComplexity), true

	case "Iform.txtcbdamage":
		if e.complexity.Iform.Txtcbdamage == nil {
			break
		}

		return e.complexity.Iform.Txtcbdamage(childComplexity), true

	case "Iform.txtcbinfluence":
		if e.complexity.Iform.Txtcbinfluence == nil {
			break
		}

		return e.complexity.Iform.Txtcbinfluence(childComplexity), true

	case "Iform.txtcblot":
		if e.complexity.Iform.Txtcblot == nil {
			break
		}

		return e.complexity.Iform.Txtcblot(childComplexity), true

	case "Iform.txtcbnew":
		if e.complexity.Iform.Txtcbnew == nil {
			break
		}

		return e.complexity.Iform.Txtcbnew(childComplexity), true

	case "Iform.txtcbold":
		if e.complexity.Iform.Txtcbold == nil {
			break
		}

		return e.complexity.Iform.Txtcbold(childComplexity), true

	case "Iform.txtcbstyle":
		if e.complexity.Iform.Txtcbstyle == nil {
			break
		}

		return e.complexity.Iform.Txtcbstyle(childComplexity), true

	case "Iform.txtcbupgrade":
		if e.complexity.Iform.Txtcbupgrade == nil {
			break
		}

		return e.complexity.Iform.Txtcbupgrade(childComplexity), true

	case "Iform.txtcbview":
		if e.complexity.Iform.Txtcbview == nil {
			break
		}

		return e.complexity.Iform.Txtcbview(childComplexity), true

	case "Iform.txtpmi":
		if e.complexity.Iform.Txtpmi == nil {
			break
		}

		return e.complexity.Iform.Txtpmi(childComplexity), true

	case "Iform.viewException":
		if e.complexity.Iform.ViewException == nil {
			break
		}

		return e.complexity.Iform.ViewException(childComplexity), true

	case "IformGrid.address":
		if e.complexity.IformGrid.Address == nil {
			break
		}

		return e.complexity.IformGrid.Address(childComplexity), true

	case "IformGrid.age":
		if e.complexity.IformGrid.Age == nil {
			break
		}

		return e.complexity.IformGrid.Age(childComplexity), true

	case "IformGrid.basementFinishedSqFt":
		if e.complexity.IformGrid.BasementFinishedSqFt == nil {
			break
		}

		return e.complexity.IformGrid.BasementFinishedSqFt(childComplexity), true

	case "IformGrid.basementSquareFeet":
		if e.complexity.IformGrid.BasementSquareFeet == nil {
			break
		}

		return e.complexity.IformGrid.BasementSquareFeet(childComplexity), true

	case "IformGrid.basementType":
		if e.complexity.IformGrid.BasementType == nil {
			break
		}

		return e.complexity.IformGrid.BasementType(childComplexity), true

	case "IformGrid.bathrooms":
		if e.complexity.IformGrid.Bathrooms == nil {
			break
		}

		return e.complexity.IformGrid.Bathrooms(childComplexity), true

	case "IformGrid.bedrooms":
		if e.complexity.IformGrid.Bedrooms == nil {
			break
		}

		return e.complexity.IformGrid.Bedrooms(childComplexity), true

	case "IformGrid.carport":
		if e.complexity.IformGrid.Carport == nil {
			break
		}

		return e.complexity.IformGrid.Carport(childComplexity), true

	case "IformGrid.city":
		if e.complexity.IformGrid.City == nil {
			break
		}

		return e.complexity.IformGrid.City(childComplexity), true

	case "IformGrid.construction":
		if e.complexity.IformGrid.Construction == nil {
			break
		}

		return e.complexity.IformGrid.Construction(childComplexity), true

	case "IformGrid.daysOnMarket":
		if e.complexity.IformGrid.DaysOnMarket == nil {
			break
		}

		return e.complexity.IformGrid.DaysOnMarket(childComplexity), true

	case "IformGrid.exterior":
		if e.complexity.IformGrid.Exterior == nil {
			break
		}

		return e.complexity.IformGrid.Exterior(childComplexity), true

	case "IformGrid.exteriorFeatures":
		if e.complexity.IformGrid.ExteriorFeatures == nil {
			break
		}

		return e.complexity.IformGrid.ExteriorFeatures(childComplexity), true

	case "IformGrid.fireplace":
		if e.complexity.IformGrid.Fireplace == nil {
			break
		}

		return e.complexity.IformGrid.Fireplace(childComplexity), true

	case "IformGrid.fullBaths":
		if e.complexity.IformGrid.FullBaths == nil {
			break
		}

		return e.complexity.IformGrid.FullBaths(childComplexity), true

	case "IformGrid.garage":
		if e.complexity.IformGrid.Garage == nil {
			break
		}

		return e.complexity.IformGrid.Garage(childComplexity), true

	case "IformGrid.garageDescription":
		if e.complexity.IformGrid.GarageDescription == nil {
			break
		}

		return e.complexity.IformGrid.GarageDescription(childComplexity), true

	case "IformGrid.hOAFee":
		if e.complexity.IformGrid.HOAFee == nil {
			break
		}

		return e.complexity.IformGrid.HOAFee(childComplexity), true

	case "IformGrid.halfBaths":
		if e.complexity.IformGrid.HalfBaths == nil {
			break
		}

		return e.complexity.IformGrid.HalfBaths(childComplexity), true

	case "IformGrid.id":
		if e.complexity.IformGrid.ID == nil {
			break
		}

		return e.complexity.IformGrid.ID(childComplexity), true

	case "IformGrid.listDate":
		if e.complexity.IformGrid.ListDate == nil {
			break
		}

		return e.complexity.IformGrid.ListDate(childComplexity), true

	case "IformGrid.listPrice":
		if e.complexity.IformGrid.ListPrice == nil {
			break
		}

		return e.complexity.IformGrid.ListPrice(childComplexity), true

	case "IformGrid.lotSize":
		if e.complexity.IformGrid.LotSize == nil {
			break
		}

		return e.complexity.IformGrid.LotSize(childComplexity), true

	case "IformGrid.mlsComments":
		if e.complexity.IformGrid.MlsComments == nil {
			break
		}

		return e.complexity.IformGrid.MlsComments(childComplexity), true

	case "IformGrid.mlsNumber":
		if e.complexity.IformGrid.MlsNumber == nil {
			break
		}

		return e.complexity.IformGrid.MlsNumber(childComplexity), true

	case "IformGrid.originalListDate":
		if e.complexity.IformGrid.OriginalListDate == nil {
			break
		}

		return e.complexity.IformGrid.OriginalListDate(childComplexity), true

	case "IformGrid.originalListPrice":
		if e.complexity.IformGrid.OriginalListPrice == nil {
			break
		}

		return e.complexity.IformGrid.OriginalListPrice(childComplexity), true

	case "IformGrid.parkingSpacesCarport":
		if e.complexity.IformGrid.ParkingSpacesCarport == nil {
			break
		}

		return e.complexity.IformGrid.ParkingSpacesCarport(childComplexity), true

	case "IformGrid.parkingSpacesGarage":
		if e.complexity.IformGrid.ParkingSpacesGarage == nil {
			break
		}

		return e.complexity.IformGrid.ParkingSpacesGarage(childComplexity), true

	case "IformGrid.pool":
		if e.complexity.IformGrid.Pool == nil {
			break
		}

		return e.complexity.IformGrid.Pool(childComplexity), true

	case "IformGrid.porch":
		if e.complexity.IformGrid.Porch == nil {
			break
		}

		return e.complexity.IformGrid.Porch(childComplexity), true

	case "IformGrid.priceClosed":
		if e.complexity.IformGrid.PriceClosed == nil {
			break
		}

		return e.complexity.IformGrid.PriceClosed(childComplexity), true

	case "IformGrid.priceList":
		if e.complexity.IformGrid.PriceList == nil {
			break
		}

		return e.complexity.IformGrid.PriceList(childComplexity), true

	case "IformGrid.propertyStyle":
		if e.complexity.IformGrid.PropertyStyle == nil {
			break
		}

		return e.complexity.IformGrid.PropertyStyle(childComplexity), true

	case "IformGrid.proplmg":
		if e.complexity.IformGrid.Proplmg == nil {
			break
		}

		return e.complexity.IformGrid.Proplmg(childComplexity), true

	case "IformGrid.proximity":
		if e.complexity.IformGrid.Proximity == nil {
			break
		}

		return e.complexity.IformGrid.Proximity(childComplexity), true

	case "IformGrid.realEstateOwned":
		if e.complexity.IformGrid.RealEstateOwned == nil {
			break
		}

		return e.complexity.IformGrid.RealEstateOwned(childComplexity), true

	case "IformGrid.saleDate":
		if e.complexity.IformGrid.SaleDate == nil {
			break
		}

		return e.complexity.IformGrid.SaleDate(childComplexity), true

	case "IformGrid.salePrice":
		if e.complexity.IformGrid.SalePrice == nil {
			break
		}

		return e.complexity.IformGrid.SalePrice(childComplexity), true

	case "IformGrid.saleType":
		if e.complexity.IformGrid.SaleType == nil {
			break
		}

		return e.complexity.IformGrid.SaleType(childComplexity), true

	case "IformGrid.selType":
		if e.complexity.IformGrid.SelType == nil {
			break
		}

		return e.complexity.IformGrid.SelType(childComplexity), true

	case "IformGrid.shortSale":
		if e.complexity.IformGrid.ShortSale == nil {
			break
		}

		return e.complexity.IformGrid.ShortSale(childComplexity), true

	case "IformGrid.squareFootage":
		if e.complexity.IformGrid.SquareFootage == nil {
			break
		}

		return e.complexity.IformGrid.SquareFootage(childComplexity), true

	case "IformGrid.status":
		if e.complexity.IformGrid.Status == nil {
			break
		}

		return e.complexity.IformGrid.Status(childComplexity), true

	case "IformGrid.streetDirection":
		if e.complexity.IformGrid.StreetDirection == nil {
			break
		}

		return e.complexity.IformGrid.StreetDirection(childComplexity), true

	case "IformGrid.streetName":
		if e.complexity.IformGrid.StreetName == nil {
			break
		}

		return e.complexity.IformGrid.StreetName(childComplexity), true

	case "IformGrid.streetNumber":
		if e.complexity.IformGrid.StreetNumber == nil {
			break
		}

		return e.complexity.IformGrid.StreetNumber(childComplexity), true

	case "IformGrid.streetType":
		if e.complexity.IformGrid.StreetType == nil {
			break
		}

		return e.complexity.IformGrid.StreetType(childComplexity), true

	case "IformGrid.subdivision":
		if e.complexity.IformGrid.Subdivision == nil {
			break
		}

		return e.complexity.IformGrid.Subdivision(childComplexity), true

	case "IformGrid.termsOfSale":
		if e.complexity.IformGrid.TermsOfSale == nil {
			break
		}

		return e.complexity.IformGrid.TermsOfSale(childComplexity), true

	case "IformGrid.totalRooms":
		if e.complexity.IformGrid.TotalRooms == nil {
			break
		}

		return e.complexity.IformGrid.TotalRooms(childComplexity), true

	case "IformGrid.totalUnits":
		if e.complexity.IformGrid.TotalUnits == nil {
			break
		}

		return e.complexity.IformGrid.TotalUnits(childComplexity), true

	case "IformGrid.unitNumber":
		if e.complexity.IformGrid.UnitNumber == nil {
			break
		}

		return e.complexity.IformGrid.UnitNumber(childComplexity), true

	case "IformGrid.view":
		if e.complexity.IformGrid.View == nil {
			break
		}

		return e.complexity.IformGrid.View(childComplexity), true

	case "IformGrid.waterfront":
		if e.complexity.IformGrid.Waterfront == nil {
			break
		}

		return e.complexity.IformGrid.Waterfront(childComplexity), true

	case "IformGrid.yearBuilt":
		if e.complexity.IformGrid.YearBuilt == nil {
			break
		}

		return e.complexity.IformGrid.YearBuilt(childComplexity), true

	case "IformGrid.zip":
		if e.complexity.IformGrid.Zip == nil {
			break
		}

		return e.complexity.IformGrid.Zip(childComplexity), true

	case "IformGridResult.results":
		if e.complexity.IformGridResult.Results == nil {
			break
		}

		return e.complexity.IformGridResult.Results(childComplexity), true

	case "IformGridResult.totalCount":
		if e.complexity.IformGridResult.TotalCount == nil {
			break
		}

		return e.complexity.IformGridResult.TotalCount(childComplexity), true

	case "IformHistory.createdDate":
		if e.complexity.IformHistory.CreatedDate == nil {
			break
		}

		return e.complexity.IformHistory.CreatedDate(childComplexity), true

	case "IformHistory.modifiedBy":
		if e.complexity.IformHistory.ModifiedBy == nil {
			break
		}

		return e.complexity.IformHistory.ModifiedBy(childComplexity), true

	case "IformHistory.url":
		if e.complexity.IformHistory.URL == nil {
			break
		}

		return e.complexity.IformHistory.URL(childComplexity), true

	case "IformHistory.updatedDate":
		if e.complexity.IformHistory.UpdatedDate == nil {
			break
		}

		return e.complexity.IformHistory.UpdatedDate(childComplexity), true

	case "IformTemp.adjustmentPrice":
		if e.complexity.IformTemp.AdjustmentPrice == nil {
			break
		}

		return e.complexity.IformTemp.AdjustmentPrice(childComplexity), true

	case "IformTemp.ageException":
		if e.complexity.IformTemp.AgeException == nil {
			break
		}

		return e.complexity.IformTemp.AgeException(childComplexity), true

	case "IformTemp.bathException":
		if e.complexity.IformTemp.BathException == nil {
			break
		}

		return e.complexity.IformTemp.BathException(childComplexity), true

	case "IformTemp.bedException":
		if e.complexity.IformTemp.BedException == nil {
			break
		}

		return e.complexity.IformTemp.BedException(childComplexity), true

	case "IformTemp.cmbDemand":
		if e.complexity.IformTemp.CmbDemand == nil {
			break
		}

		return e.complexity.IformTemp.CmbDemand(childComplexity), true

	case "IformTemp.cmbExtra":
		if e.complexity.IformTemp.CmbExtra == nil {
			break
		}

		return e.complexity.IformTemp.CmbExtra(childComplexity), true

	case "IformTemp.cmbForm":
		if e.complexity.IformTemp.CmbForm == nil {
			break
		}

		return e.complexity.IformTemp.CmbForm(childComplexity), true

	case "IformTemp.cmbForm2":
		if e.complexity.IformTemp.CmbForm2 == nil {
			break
		}

		return e.complexity.IformTemp.CmbForm2(childComplexity), true

	case "IformTemp.cmbHouse":
		if e.complexity.IformTemp.CmbHouse == nil {
			break
		}

		return e.complexity.IformTemp.CmbHouse(childComplexity), true

	case "IformTemp.cmbIsListed":
		if e.complexity.IformTemp.CmbIsListed == nil {
			break
		}

		return e.complexity.IformTemp.CmbIsListed(childComplexity), true

	case "IformTemp.cmbListComp1Basement":
		if e.complexity.IformTemp.CmbListComp1Basement == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1Basement(childComplexity), true

	case "IformTemp.cmbListComp1CommentType":
		if e.complexity.IformTemp.CmbListComp1CommentType == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1CommentType(childComplexity), true

	case "IformTemp.cmbListComp1Condition":
		if e.complexity.IformTemp.CmbListComp1Condition == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1Condition(childComplexity), true

	case "IformTemp.cmbListComp1ExtFinish":
		if e.complexity.IformTemp.CmbListComp1ExtFinish == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1ExtFinish(childComplexity), true

	case "IformTemp.cmbListComp1Financing":
		if e.complexity.IformTemp.CmbListComp1Financing == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1Financing(childComplexity), true

	case "IformTemp.cmbListComp1Fireplace":
		if e.complexity.IformTemp.CmbListComp1Fireplace == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1Fireplace(childComplexity), true

	case "IformTemp.cmbListComp1Garage":
		if e.complexity.IformTemp.CmbListComp1Garage == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1Garage(childComplexity), true

	case "IformTemp.cmbListComp1IsFinished":
		if e.complexity.IformTemp.CmbListComp1IsFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1IsFinished(childComplexity), true

	case "IformTemp.cmbListComp1PercentFinished":
		if e.complexity.IformTemp.CmbListComp1PercentFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1PercentFinished(childComplexity), true

	case "IformTemp.cmbListComp1Pool":
		if e.complexity.IformTemp.CmbListComp1Pool == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1Pool(childComplexity), true

	case "IformTemp.cmbListComp1PorchPatioDeck":
		if e.complexity.IformTemp.CmbListComp1PorchPatioDeck == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1PorchPatioDeck(childComplexity), true

	case "IformTemp.cmbListComp1Quality":
		if e.complexity.IformTemp.CmbListComp1Quality == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1Quality(childComplexity), true

	case "IformTemp.cmbListComp1SaleType":
		if e.complexity.IformTemp.CmbListComp1SaleType == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1SaleType(childComplexity), true

	case "IformTemp.cmbListComp1Style":
		if e.complexity.IformTemp.CmbListComp1Style == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1Style(childComplexity), true

	case "IformTemp.cmbListComp1Type":
		if e.complexity.IformTemp.CmbListComp1Type == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1Type(childComplexity), true

	case "IformTemp.cmbListComp1View":
		if e.complexity.IformTemp.CmbListComp1View == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp1View(childComplexity), true

	case "IformTemp.cmbListComp2Basement":
		if e.complexity.IformTemp.CmbListComp2Basement == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2Basement(childComplexity), true

	case "IformTemp.cmbListComp2CommentType":
		if e.complexity.IformTemp.CmbListComp2CommentType == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2CommentType(childComplexity), true

	case "IformTemp.cmbListComp2Condition":
		if e.complexity.IformTemp.CmbListComp2Condition == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2Condition(childComplexity), true

	case "IformTemp.cmbListComp2ExtFinish":
		if e.complexity.IformTemp.CmbListComp2ExtFinish == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2ExtFinish(childComplexity), true

	case "IformTemp.cmbListComp2Financing":
		if e.complexity.IformTemp.CmbListComp2Financing == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2Financing(childComplexity), true

	case "IformTemp.cmbListComp2Fireplace":
		if e.complexity.IformTemp.CmbListComp2Fireplace == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2Fireplace(childComplexity), true

	case "IformTemp.cmbListComp2Garage":
		if e.complexity.IformTemp.CmbListComp2Garage == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2Garage(childComplexity), true

	case "IformTemp.cmbListComp2IsFinished":
		if e.complexity.IformTemp.CmbListComp2IsFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2IsFinished(childComplexity), true

	case "IformTemp.cmbListComp2PercentFinished":
		if e.complexity.IformTemp.CmbListComp2PercentFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2PercentFinished(childComplexity), true

	case "IformTemp.cmbListComp2Pool":
		if e.complexity.IformTemp.CmbListComp2Pool == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2Pool(childComplexity), true

	case "IformTemp.cmbListComp2PorchPatioDeck":
		if e.complexity.IformTemp.CmbListComp2PorchPatioDeck == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2PorchPatioDeck(childComplexity), true

	case "IformTemp.cmbListComp2Quality":
		if e.complexity.IformTemp.CmbListComp2Quality == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2Quality(childComplexity), true

	case "IformTemp.cmbListComp2SaleType":
		if e.complexity.IformTemp.CmbListComp2SaleType == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2SaleType(childComplexity), true

	case "IformTemp.cmbListComp2Style":
		if e.complexity.IformTemp.CmbListComp2Style == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2Style(childComplexity), true

	case "IformTemp.cmbListComp2Type":
		if e.complexity.IformTemp.CmbListComp2Type == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2Type(childComplexity), true

	case "IformTemp.cmbListComp2View":
		if e.complexity.IformTemp.CmbListComp2View == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp2View(childComplexity), true

	case "IformTemp.cmbListComp3Basement":
		if e.complexity.IformTemp.CmbListComp3Basement == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3Basement(childComplexity), true

	case "IformTemp.cmbListComp3CommentType":
		if e.complexity.IformTemp.CmbListComp3CommentType == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3CommentType(childComplexity), true

	case "IformTemp.cmbListComp3Condition":
		if e.complexity.IformTemp.CmbListComp3Condition == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3Condition(childComplexity), true

	case "IformTemp.cmbListComp3ExtFinish":
		if e.complexity.IformTemp.CmbListComp3ExtFinish == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3ExtFinish(childComplexity), true

	case "IformTemp.cmbListComp3Financing":
		if e.complexity.IformTemp.CmbListComp3Financing == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3Financing(childComplexity), true

	case "IformTemp.cmbListComp3Fireplace":
		if e.complexity.IformTemp.CmbListComp3Fireplace == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3Fireplace(childComplexity), true

	case "IformTemp.cmbListComp3Garage":
		if e.complexity.IformTemp.CmbListComp3Garage == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3Garage(childComplexity), true

	case "IformTemp.cmbListComp3IsFinished":
		if e.complexity.IformTemp.CmbListComp3IsFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3IsFinished(childComplexity), true

	case "IformTemp.cmbListComp3PercentFinished":
		if e.complexity.IformTemp.CmbListComp3PercentFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3PercentFinished(childComplexity), true

	case "IformTemp.cmbListComp3Pool":
		if e.complexity.IformTemp.CmbListComp3Pool == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3Pool(childComplexity), true

	case "IformTemp.cmbListComp3PorchPatioDeck":
		if e.complexity.IformTemp.CmbListComp3PorchPatioDeck == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3PorchPatioDeck(childComplexity), true

	case "IformTemp.cmbListComp3Quality":
		if e.complexity.IformTemp.CmbListComp3Quality == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3Quality(childComplexity), true

	case "IformTemp.cmbListComp3SaleType":
		if e.complexity.IformTemp.CmbListComp3SaleType == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3SaleType(childComplexity), true

	case "IformTemp.cmbListComp3Style":
		if e.complexity.IformTemp.CmbListComp3Style == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3Style(childComplexity), true

	case "IformTemp.cmbListComp3Type":
		if e.complexity.IformTemp.CmbListComp3Type == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3Type(childComplexity), true

	case "IformTemp.cmbListComp3View":
		if e.complexity.IformTemp.CmbListComp3View == nil {
			break
		}

		return e.complexity.IformTemp.CmbListComp3View(childComplexity), true

	case "IformTemp.cmbListing":
		if e.complexity.IformTemp.CmbListing == nil {
			break
		}

		return e.complexity.IformTemp.CmbListing(childComplexity), true

	case "IformTemp.cmbLocation":
		if e.complexity.IformTemp.CmbLocation == nil {
			break
		}

		return e.complexity.IformTemp.CmbLocation(childComplexity), true

	case "IformTemp.cmbMarket":
		if e.complexity.IformTemp.CmbMarket == nil {
			break
		}

		return e.complexity.IformTemp.CmbMarket(childComplexity), true

	case "IformTemp.cmbNegative":
		if e.complexity.IformTemp.CmbNegative == nil {
			break
		}

		return e.complexity.IformTemp.CmbNegative(childComplexity), true

	case "IformTemp.cmbNeighborhoodTrend":
		if e.complexity.IformTemp.CmbNeighborhoodTrend == nil {
			break
		}

		return e.complexity.IformTemp.CmbNeighborhoodTrend(childComplexity), true

	case "IformTemp.cmbOrderType":
		if e.complexity.IformTemp.CmbOrderType == nil {
			break
		}

		return e.complexity.IformTemp.CmbOrderType(childComplexity), true

	case "IformTemp.cmbPositive":
		if e.complexity.IformTemp.CmbPositive == nil {
			break
		}

		return e.complexity.IformTemp.CmbPositive(childComplexity), true

	case "IformTemp.cmbPricing":
		if e.complexity.IformTemp.CmbPricing == nil {
			break
		}

		return e.complexity.IformTemp.CmbPricing(childComplexity), true

	case "IformTemp.cmbREOTrend":
		if e.complexity.IformTemp.CmbREOTrend == nil {
			break
		}

		return e.complexity.IformTemp.CmbREOTrend(childComplexity), true

	case "IformTemp.cmbSaleComp1Basement":
		if e.complexity.IformTemp.CmbSaleComp1Basement == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1Basement(childComplexity), true

	case "IformTemp.cmbSaleComp1CommentType":
		if e.complexity.IformTemp.CmbSaleComp1CommentType == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1CommentType(childComplexity), true

	case "IformTemp.cmbSaleComp1Condition":
		if e.complexity.IformTemp.CmbSaleComp1Condition == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1Condition(childComplexity), true

	case "IformTemp.cmbSaleComp1ExtFinish":
		if e.complexity.IformTemp.CmbSaleComp1ExtFinish == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1ExtFinish(childComplexity), true

	case "IformTemp.cmbSaleComp1Financing":
		if e.complexity.IformTemp.CmbSaleComp1Financing == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1Financing(childComplexity), true

	case "IformTemp.cmbSaleComp1Fireplace":
		if e.complexity.IformTemp.CmbSaleComp1Fireplace == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1Fireplace(childComplexity), true

	case "IformTemp.cmbSaleComp1Garage":
		if e.complexity.IformTemp.CmbSaleComp1Garage == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1Garage(childComplexity), true

	case "IformTemp.cmbSaleComp1IsFinished":
		if e.complexity.IformTemp.CmbSaleComp1IsFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1IsFinished(childComplexity), true

	case "IformTemp.cmbSaleComp1PercentFinished":
		if e.complexity.IformTemp.CmbSaleComp1PercentFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1PercentFinished(childComplexity), true

	case "IformTemp.cmbSaleComp1Pool":
		if e.complexity.IformTemp.CmbSaleComp1Pool == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1Pool(childComplexity), true

	case "IformTemp.cmbSaleComp1PorchPatioDeck":
		if e.complexity.IformTemp.CmbSaleComp1PorchPatioDeck == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1PorchPatioDeck(childComplexity), true

	case "IformTemp.cmbSaleComp1Quality":
		if e.complexity.IformTemp.CmbSaleComp1Quality == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1Quality(childComplexity), true

	case "IformTemp.cmbSaleComp1SaleType":
		if e.complexity.IformTemp.CmbSaleComp1SaleType == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1SaleType(childComplexity), true

	case "IformTemp.cmbSaleComp1Style":
		if e.complexity.IformTemp.CmbSaleComp1Style == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1Style(childComplexity), true

	case "IformTemp.cmbSaleComp1Type":
		if e.complexity.IformTemp.CmbSaleComp1Type == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1Type(childComplexity), true

	case "IformTemp.cmbSaleComp1View":
		if e.complexity.IformTemp.CmbSaleComp1View == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp1View(childComplexity), true

	case "IformTemp.cmbSaleComp2Basement":
		if e.complexity.IformTemp.CmbSaleComp2Basement == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2Basement(childComplexity), true

	case "IformTemp.cmbSaleComp2CommentType":
		if e.complexity.IformTemp.CmbSaleComp2CommentType == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2CommentType(childComplexity), true

	case "IformTemp.cmbSaleComp2Condition":
		if e.complexity.IformTemp.CmbSaleComp2Condition == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2Condition(childComplexity), true

	case "IformTemp.cmbSaleComp2ExtFinish":
		if e.complexity.IformTemp.CmbSaleComp2ExtFinish == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2ExtFinish(childComplexity), true

	case "IformTemp.cmbSaleComp2Financing":
		if e.complexity.IformTemp.CmbSaleComp2Financing == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2Financing(childComplexity), true

	case "IformTemp.cmbSaleComp2Fireplace":
		if e.complexity.IformTemp.CmbSaleComp2Fireplace == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2Fireplace(childComplexity), true

	case "IformTemp.cmbSaleComp2Garage":
		if e.complexity.IformTemp.CmbSaleComp2Garage == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2Garage(childComplexity), true

	case "IformTemp.cmbSaleComp2IsFinished":
		if e.complexity.IformTemp.CmbSaleComp2IsFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2IsFinished(childComplexity), true

	case "IformTemp.cmbSaleComp2PercentFinished":
		if e.complexity.IformTemp.CmbSaleComp2PercentFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2PercentFinished(childComplexity), true

	case "IformTemp.cmbSaleComp2Pool":
		if e.complexity.IformTemp.CmbSaleComp2Pool == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2Pool(childComplexity), true

	case "IformTemp.cmbSaleComp2PorchPatioDeck":
		if e.complexity.IformTemp.CmbSaleComp2PorchPatioDeck == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2PorchPatioDeck(childComplexity), true

	case "IformTemp.cmbSaleComp2Quality":
		if e.complexity.IformTemp.CmbSaleComp2Quality == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2Quality(childComplexity), true

	case "IformTemp.cmbSaleComp2SaleType":
		if e.complexity.IformTemp.CmbSaleComp2SaleType == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2SaleType(childComplexity), true

	case "IformTemp.cmbSaleComp2Style":
		if e.complexity.IformTemp.CmbSaleComp2Style == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2Style(childComplexity), true

	case "IformTemp.cmbSaleComp2Type":
		if e.complexity.IformTemp.CmbSaleComp2Type == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2Type(childComplexity), true

	case "IformTemp.cmbSaleComp2View":
		if e.complexity.IformTemp.CmbSaleComp2View == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp2View(childComplexity), true

	case "IformTemp.cmbSaleComp3Basement":
		if e.complexity.IformTemp.CmbSaleComp3Basement == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3Basement(childComplexity), true

	case "IformTemp.cmbSaleComp3CommentType":
		if e.complexity.IformTemp.CmbSaleComp3CommentType == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3CommentType(childComplexity), true

	case "IformTemp.cmbSaleComp3Condition":
		if e.complexity.IformTemp.CmbSaleComp3Condition == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3Condition(childComplexity), true

	case "IformTemp.cmbSaleComp3ExtFinish":
		if e.complexity.IformTemp.CmbSaleComp3ExtFinish == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3ExtFinish(childComplexity), true

	case "IformTemp.cmbSaleComp3Financing":
		if e.complexity.IformTemp.CmbSaleComp3Financing == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3Financing(childComplexity), true

	case "IformTemp.cmbSaleComp3Fireplace":
		if e.complexity.IformTemp.CmbSaleComp3Fireplace == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3Fireplace(childComplexity), true

	case "IformTemp.cmbSaleComp3Garage":
		if e.complexity.IformTemp.CmbSaleComp3Garage == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3Garage(childComplexity), true

	case "IformTemp.cmbSaleComp3IsFinished":
		if e.complexity.IformTemp.CmbSaleComp3IsFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3IsFinished(childComplexity), true

	case "IformTemp.cmbSaleComp3PercentFinished":
		if e.complexity.IformTemp.CmbSaleComp3PercentFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3PercentFinished(childComplexity), true

	case "IformTemp.cmbSaleComp3Pool":
		if e.complexity.IformTemp.CmbSaleComp3Pool == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3Pool(childComplexity), true

	case "IformTemp.cmbSaleComp3PorchPatioDeck":
		if e.complexity.IformTemp.CmbSaleComp3PorchPatioDeck == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3PorchPatioDeck(childComplexity), true

	case "IformTemp.cmbSaleComp3Quality":
		if e.complexity.IformTemp.CmbSaleComp3Quality == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3Quality(childComplexity), true

	case "IformTemp.cmbSaleComp3SaleType":
		if e.complexity.IformTemp.CmbSaleComp3SaleType == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3SaleType(childComplexity), true

	case "IformTemp.cmbSaleComp3Style":
		if e.complexity.IformTemp.CmbSaleComp3Style == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3Style(childComplexity), true

	case "IformTemp.cmbSaleComp3Type":
		if e.complexity.IformTemp.CmbSaleComp3Type == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3Type(childComplexity), true

	case "IformTemp.cmbSaleComp3View":
		if e.complexity.IformTemp.CmbSaleComp3View == nil {
			break
		}

		return e.complexity.IformTemp.CmbSaleComp3View(childComplexity), true

	case "IformTemp.cmbSubjectBasement":
		if e.complexity.IformTemp.CmbSubjectBasement == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectBasement(childComplexity), true

	case "IformTemp.cmbSubjectCondition":
		if e.complexity.IformTemp.CmbSubjectCondition == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectCondition(childComplexity), true

	case "IformTemp.cmbSubjectExtFinish":
		if e.complexity.IformTemp.CmbSubjectExtFinish == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectExtFinish(childComplexity), true

	case "IformTemp.cmbSubjectFinancing":
		if e.complexity.IformTemp.CmbSubjectFinancing == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectFinancing(childComplexity), true

	case "IformTemp.cmbSubjectFireplace":
		if e.complexity.IformTemp.CmbSubjectFireplace == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectFireplace(childComplexity), true

	case "IformTemp.cmbSubjectGarage":
		if e.complexity.IformTemp.CmbSubjectGarage == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectGarage(childComplexity), true

	case "IformTemp.cmbSubjectIsFinished":
		if e.complexity.IformTemp.CmbSubjectIsFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectIsFinished(childComplexity), true

	case "IformTemp.cmbSubjectPercentFinished":
		if e.complexity.IformTemp.CmbSubjectPercentFinished == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectPercentFinished(childComplexity), true

	case "IformTemp.cmbSubjectPool":
		if e.complexity.IformTemp.CmbSubjectPool == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectPool(childComplexity), true

	case "IformTemp.cmbSubjectPorchPatioDeck":
		if e.complexity.IformTemp.CmbSubjectPorchPatioDeck == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectPorchPatioDeck(childComplexity), true

	case "IformTemp.cmbSubjectQuality":
		if e.complexity.IformTemp.CmbSubjectQuality == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectQuality(childComplexity), true

	case "IformTemp.cmbSubjectSaleType":
		if e.complexity.IformTemp.CmbSubjectSaleType == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectSaleType(childComplexity), true

	case "IformTemp.cmbSubjectStyle":
		if e.complexity.IformTemp.CmbSubjectStyle == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectStyle(childComplexity), true

	case "IformTemp.cmbSubjectType":
		if e.complexity.IformTemp.CmbSubjectType == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectType(childComplexity), true

	case "IformTemp.cmbSubjectView":
		if e.complexity.IformTemp.CmbSubjectView == nil {
			break
		}

		return e.complexity.IformTemp.CmbSubjectView(childComplexity), true

	case "IformTemp.cmbSupply":
		if e.complexity.IformTemp.CmbSupply == nil {
			break
		}

		return e.complexity.IformTemp.CmbSupply(childComplexity), true

	case "IformTemp.cmbView":
		if e.complexity.IformTemp.CmbView == nil {
			break
		}

		return e.complexity.IformTemp.CmbView(childComplexity), true

	case "IformTemp.condException":
		if e.complexity.IformTemp.CondException == nil {
			break
		}

		return e.complexity.IformTemp.CondException(childComplexity), true

	case "IformTemp.formType":
		if e.complexity.IformTemp.FormType == nil {
			break
		}

		return e.complexity.IformTemp.FormType(childComplexity), true

	case "IformTemp.glaException":
		if e.complexity.IformTemp.GlaException == nil {
			break
		}

		return e.complexity.IformTemp.GlaException(childComplexity), true

	case "IformTemp.history":
		if e.complexity.IformTemp.History == nil {
			break
		}

		return e.complexity.IformTemp.History(childComplexity), true

	case "IformTemp.id":
		if e.complexity.IformTemp.ID == nil {
			break
		}

		return e.complexity.IformTemp.ID(childComplexity), true

	case "IformTemp.lotException":
		if e.complexity.IformTemp.LotException == nil {
			break
		}

		return e.complexity.IformTemp.LotException(childComplexity), true

	case "IformTemp.pipelineId":
		if e.complexity.IformTemp.PipelineID == nil {
			break
		}

		return e.complexity.IformTemp.PipelineID(childComplexity), true

	case "IformTemp.priceComment":
		if e.complexity.IformTemp.PriceComment == nil {
			break
		}

		return e.complexity.IformTemp.PriceComment(childComplexity), true

	case "IformTemp.proxException":
		if e.complexity.IformTemp.ProxException == nil {
			break
		}

		return e.complexity.IformTemp.ProxException(childComplexity), true

	case "IformTemp.rangeComment":
		if e.complexity.IformTemp.RangeComment == nil {
			break
		}

		return e.complexity.IformTemp.RangeComment(childComplexity), true

	case "IformTemp.rdbmarketedtext":
		if e.complexity.IformTemp.Rdbmarketedtext == nil {
			break
		}

		return e.complexity.IformTemp.Rdbmarketedtext(childComplexity), true

	case "IformTemp.rdbresaletext":
		if e.complexity.IformTemp.Rdbresaletext == nil {
			break
		}

		return e.complexity.IformTemp.Rdbresaletext(childComplexity), true

	case "IformTemp.styleException":
		if e.complexity.IformTemp.StyleException == nil {
			break
		}

		return e.complexity.IformTemp.StyleException(childComplexity), true

	case "IformTemp.txt120DayQuickSale":
		if e.complexity.IformTemp.Txt120DayQuickSale == nil {
			break
		}

		return e.complexity.IformTemp.Txt120DayQuickSale(childComplexity), true

	case "IformTemp.txt120DayQuickSaleRepaired":
		if e.complexity.IformTemp.Txt120DayQuickSaleRepaired == nil {
			break
		}

		return e.complexity.IformTemp.Txt120DayQuickSaleRepaired(childComplexity), true

	case "IformTemp.txt180DayQuickSale":
		if e.complexity.IformTemp.Txt180DayQuickSale == nil {
			break
		}

		return e.complexity.IformTemp.Txt180DayQuickSale(childComplexity), true

	case "IformTemp.txt180DayQuickSaleRepaired":
		if e.complexity.IformTemp.Txt180DayQuickSaleRepaired == nil {
			break
		}

		return e.complexity.IformTemp.Txt180DayQuickSaleRepaired(childComplexity), true

	case "IformTemp.txt30DayListPriceFinalValues":
		if e.complexity.IformTemp.Txt30DayListPriceFinalValues == nil {
			break
		}

		return e.complexity.IformTemp.Txt30DayListPriceFinalValues(childComplexity), true

	case "IformTemp.txt30DayListPriceRepaired":
		if e.complexity.IformTemp.Txt30DayListPriceRepaired == nil {
			break
		}

		return e.complexity.IformTemp.Txt30DayListPriceRepaired(childComplexity), true

	case "IformTemp.txt30DayQuickSale":
		if e.complexity.IformTemp.Txt30DayQuickSale == nil {
			break
		}

		return e.complexity.IformTemp.Txt30DayQuickSale(childComplexity), true

	case "IformTemp.txt30DayQuickSaleRepaired":
		if e.complexity.IformTemp.Txt30DayQuickSaleRepaired == nil {
			break
		}

		return e.complexity.IformTemp.Txt30DayQuickSaleRepaired(childComplexity), true

	case "IformTemp.txt60DayQuickSale":
		if e.complexity.IformTemp.Txt60DayQuickSale == nil {
			break
		}

		return e.complexity.IformTemp.Txt60DayQuickSale(childComplexity), true

	case "IformTemp.txt60DayQuickSaleRepaired":
		if e.complexity.IformTemp.Txt60DayQuickSaleRepaired == nil {
			break
		}

		return e.complexity.IformTemp.Txt60DayQuickSaleRepaired(childComplexity), true

	case "IformTemp.txt6MonthPecent":
		if e.complexity.IformTemp.Txt6MonthPecent == nil {
			break
		}

		return e.complexity.IformTemp.Txt6MonthPecent(childComplexity), true

	case "IformTemp.txt90DayAsIsValue":
		if e.complexity.IformTemp.Txt90DayAsIsValue == nil {
			break
		}

		return e.complexity.IformTemp.Txt90DayAsIsValue(childComplexity), true

	case "IformTemp.txt90DayAsIsValueRepaired":
		if e.complexity.IformTemp.Txt90DayAsIsValueRepaired == nil {
			break
		}

		return e.complexity.IformTemp.Txt90DayAsIsValueRepaired(childComplexity), true

	case "IformTemp.txtAddress":
		if e.complexity.IformTemp.TxtAddress == nil {
			break
		}

		return e.complexity.IformTemp.TxtAddress(childComplexity), true

	case "IformTemp.txtAgentCity":
		if e.complexity.IformTemp.TxtAgentCity == nil {
			break
		}

		return e.complexity.IformTemp.TxtAgentCity(childComplexity), true

	case "IformTemp.txtAgentState":
		if e.complexity.IformTemp.TxtAgentState == nil {
			break
		}

		return e.complexity.IformTemp.TxtAgentState(childComplexity), true

	case "IformTemp.txtAgentZip":
		if e.complexity.IformTemp.TxtAgentZip == nil {
			break
		}

		return e.complexity.IformTemp.TxtAgentZip(childComplexity), true

	case "IformTemp.txtAnnualPecent":
		if e.complexity.IformTemp.TxtAnnualPecent == nil {
			break
		}

		return e.complexity.IformTemp.TxtAnnualPecent(childComplexity), true

	case "IformTemp.txtAverage":
		if e.complexity.IformTemp.TxtAverage == nil {
			break
		}

		return e.complexity.IformTemp.TxtAverage(childComplexity), true

	case "IformTemp.txtBrokerChecker":
		if e.complexity.IformTemp.TxtBrokerChecker == nil {
			break
		}

		return e.complexity.IformTemp.TxtBrokerChecker(childComplexity), true

	case "IformTemp.txtBrokerComments":
		if e.complexity.IformTemp.TxtBrokerComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtBrokerComments(childComplexity), true

	case "IformTemp.txtCalculatedAge":
		if e.complexity.IformTemp.TxtCalculatedAge == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedAge(childComplexity), true

	case "IformTemp.txtCalculatedAges":
		if e.complexity.IformTemp.TxtCalculatedAges == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedAges(childComplexity), true

	case "IformTemp.txtCalculatedBath":
		if e.complexity.IformTemp.TxtCalculatedBath == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedBath(childComplexity), true

	case "IformTemp.txtCalculatedBeds":
		if e.complexity.IformTemp.TxtCalculatedBeds == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedBeds(childComplexity), true

	case "IformTemp.txtCalculatedCond":
		if e.complexity.IformTemp.TxtCalculatedCond == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedCond(childComplexity), true

	case "IformTemp.txtCalculatedGLAs":
		if e.complexity.IformTemp.TxtCalculatedGLAs == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedGLAs(childComplexity), true

	case "IformTemp.txtCalculatedGLA":
		if e.complexity.IformTemp.TxtCalculatedGla == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedGla(childComplexity), true

	case "IformTemp.txtCalculatedLots":
		if e.complexity.IformTemp.TxtCalculatedLots == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedLots(childComplexity), true

	case "IformTemp.txtCalculatedMonthsSupply":
		if e.complexity.IformTemp.TxtCalculatedMonthsSupply == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedMonthsSupply(childComplexity), true

	case "IformTemp.txtCalculatedProxim":
		if e.complexity.IformTemp.TxtCalculatedProxim == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedProxim(childComplexity), true

	case "IformTemp.txtCalculatedProximity":
		if e.complexity.IformTemp.TxtCalculatedProximity == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedProximity(childComplexity), true

	case "IformTemp.txtCalculatedSaleDates":
		if e.complexity.IformTemp.TxtCalculatedSaleDates == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedSaleDates(childComplexity), true

	case "IformTemp.txtCalculatedStyle":
		if e.complexity.IformTemp.TxtCalculatedStyle == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedStyle(childComplexity), true

	case "IformTemp.txtCalculatedStyle1":
		if e.complexity.IformTemp.TxtCalculatedStyle1 == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedStyle1(childComplexity), true

	case "IformTemp.txtCalculatedView":
		if e.complexity.IformTemp.TxtCalculatedView == nil {
			break
		}

		return e.complexity.IformTemp.TxtCalculatedView(childComplexity), true

	case "IformTemp.txtClient":
		if e.complexity.IformTemp.TxtClient == nil {
			break
		}

		return e.complexity.IformTemp.TxtClient(childComplexity), true

	case "IformTemp.txtCompany":
		if e.complexity.IformTemp.TxtCompany == nil {
			break
		}

		return e.complexity.IformTemp.TxtCompany(childComplexity), true

	case "IformTemp.txtCounty":
		if e.complexity.IformTemp.TxtCounty == nil {
			break
		}

		return e.complexity.IformTemp.TxtCounty(childComplexity), true

	case "IformTemp.txtDisclaimer":
		if e.complexity.IformTemp.TxtDisclaimer == nil {
			break
		}

		return e.complexity.IformTemp.TxtDisclaimer(childComplexity), true

	case "IformTemp.txtDisclaimer2":
		if e.complexity.IformTemp.TxtDisclaimer2 == nil {
			break
		}

		return e.complexity.IformTemp.TxtDisclaimer2(childComplexity), true

	case "IformTemp.txtEstimatedDaysOnMarket":
		if e.complexity.IformTemp.TxtEstimatedDaysOnMarket == nil {
			break
		}

		return e.complexity.IformTemp.TxtEstimatedDaysOnMarket(childComplexity), true

	case "IformTemp.txtEstimatedRent":
		if e.complexity.IformTemp.TxtEstimatedRent == nil {
			break
		}

		return e.complexity.IformTemp.TxtEstimatedRent(childComplexity), true

	case "IformTemp.txtFindcompsnow":
		if e.complexity.IformTemp.TxtFindcompsnow == nil {
			break
		}

		return e.complexity.IformTemp.TxtFindcompsnow(childComplexity), true

	case "IformTemp.txtLastSaleDate":
		if e.complexity.IformTemp.TxtLastSaleDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtLastSaleDate(childComplexity), true

	case "IformTemp.txtLastSalePrice":
		if e.complexity.IformTemp.TxtLastSalePrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtLastSalePrice(childComplexity), true

	case "IformTemp.txtListComp1Acres":
		if e.complexity.IformTemp.TxtListComp1Acres == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1Acres(childComplexity), true

	case "IformTemp.txtListComp1AcresAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1AcresAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1AcresAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1Address":
		if e.complexity.IformTemp.TxtListComp1Address == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1Address(childComplexity), true

	case "IformTemp.txtListComp1Adjustments":
		if e.complexity.IformTemp.TxtListComp1Adjustments == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1Adjustments(childComplexity), true

	case "IformTemp.txtListComp1Age":
		if e.complexity.IformTemp.TxtListComp1Age == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1Age(childComplexity), true

	case "IformTemp.txtListComp1BasementAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1BasementAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1BasementAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1BasementSqFt":
		if e.complexity.IformTemp.TxtListComp1BasementSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1BasementSqFt(childComplexity), true

	case "IformTemp.txtListComp1BasementSqFtAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1BasementSqFtAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1BasementSqFtAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1Bedrooms":
		if e.complexity.IformTemp.TxtListComp1Bedrooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1Bedrooms(childComplexity), true

	case "IformTemp.txtListComp1BedroomsAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1BedroomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1BedroomsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1City":
		if e.complexity.IformTemp.TxtListComp1City == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1City(childComplexity), true

	case "IformTemp.txtListComp1CompTotals":
		if e.complexity.IformTemp.TxtListComp1CompTotals == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1CompTotals(childComplexity), true

	case "IformTemp.txtListComp1ComparableComments":
		if e.complexity.IformTemp.TxtListComp1ComparableComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1ComparableComments(childComplexity), true

	case "IformTemp.txtListComp1ConditionAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1ConditionAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1ConditionAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1CurrentListDate":
		if e.complexity.IformTemp.TxtListComp1CurrentListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1CurrentListDate(childComplexity), true

	case "IformTemp.txtListComp1DataSource":
		if e.complexity.IformTemp.TxtListComp1DataSource == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1DataSource(childComplexity), true

	case "IformTemp.txtListComp1ExtFinishAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1ExtFinishAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1ExtFinishAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1FireplaceAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1FireplaceAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1FireplaceAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1FormatAdjustments":
		if e.complexity.IformTemp.TxtListComp1FormatAdjustments == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1FormatAdjustments(childComplexity), true

	case "IformTemp.txtListComp1FullBaths":
		if e.complexity.IformTemp.TxtListComp1FullBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1FullBaths(childComplexity), true

	case "IformTemp.txtListComp1FullBathsAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1FullBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1FullBathsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1GLAAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1GLAAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1GLAAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1GarageAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1GarageAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1GarageAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1HOAFee":
		if e.complexity.IformTemp.TxtListComp1HOAFee == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1HOAFee(childComplexity), true

	case "IformTemp.txtListComp1HalfBaths":
		if e.complexity.IformTemp.TxtListComp1HalfBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1HalfBaths(childComplexity), true

	case "IformTemp.txtListComp1HalfBathsAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1HalfBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1HalfBathsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1IsFinishedAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1IsFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1IsFinishedAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1ListPrice":
		if e.complexity.IformTemp.TxtListComp1ListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1ListPrice(childComplexity), true

	case "IformTemp.txtListComp1MLSComments":
		if e.complexity.IformTemp.TxtListComp1MLSComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1MLSComments(childComplexity), true

	case "IformTemp.txtListComp1MLSNumber":
		if e.complexity.IformTemp.TxtListComp1MLSNumber == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1MLSNumber(childComplexity), true

	case "IformTemp.txtListComp1OriginalListDate":
		if e.complexity.IformTemp.TxtListComp1OriginalListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1OriginalListDate(childComplexity), true

	case "IformTemp.txtListComp1OriginalListPrice":
		if e.complexity.IformTemp.TxtListComp1OriginalListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1OriginalListPrice(childComplexity), true

	case "IformTemp.txtListComp1PercentFinishedAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1PercentFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1PercentFinishedAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1PoolAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1PoolAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1PoolAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1PorchPatioDeckAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1PorchPatioDeckAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1PorchPatioDeckAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1PricePerSqFt":
		if e.complexity.IformTemp.TxtListComp1PricePerSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1PricePerSqFt(childComplexity), true

	case "IformTemp.txtListComp1Proximity":
		if e.complexity.IformTemp.TxtListComp1Proximity == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1Proximity(childComplexity), true

	case "IformTemp.txtListComp1QualityAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1QualityAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1QualityAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1SquareFeet":
		if e.complexity.IformTemp.TxtListComp1SquareFeet == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1SquareFeet(childComplexity), true

	case "IformTemp.txtListComp1State":
		if e.complexity.IformTemp.TxtListComp1State == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1State(childComplexity), true

	case "IformTemp.txtListComp1StyleAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1StyleAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1StyleAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1Subdivision":
		if e.complexity.IformTemp.TxtListComp1Subdivision == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1Subdivision(childComplexity), true

	case "IformTemp.txtListComp1TotalRooms":
		if e.complexity.IformTemp.TxtListComp1TotalRooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1TotalRooms(childComplexity), true

	case "IformTemp.txtListComp1TotalRoomsAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1TotalRoomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1TotalRoomsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1UnitNo":
		if e.complexity.IformTemp.TxtListComp1UnitNo == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1UnitNo(childComplexity), true

	case "IformTemp.txtListComp1Units":
		if e.complexity.IformTemp.TxtListComp1Units == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1Units(childComplexity), true

	case "IformTemp.txtListComp1ViewAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1ViewAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1ViewAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1YearBuilt":
		if e.complexity.IformTemp.TxtListComp1YearBuilt == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1YearBuilt(childComplexity), true

	case "IformTemp.txtListComp1YearBuiltAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp1YearBuiltAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1YearBuiltAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp1Zip":
		if e.complexity.IformTemp.TxtListComp1Zip == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1Zip(childComplexity), true

	case "IformTemp.txtListComp1DOM":
		if e.complexity.IformTemp.TxtListComp1dom == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1dom(childComplexity), true

	case "IformTemp.txtListComp1GLA":
		if e.complexity.IformTemp.TxtListComp1gla == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1gla(childComplexity), true

	case "IformTemp.txtListComp1noUnit":
		if e.complexity.IformTemp.TxtListComp1noUnit == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp1noUnit(childComplexity), true

	case "IformTemp.txtListComp2Acres":
		if e.complexity.IformTemp.TxtListComp2Acres == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2Acres(childComplexity), true

	case "IformTemp.txtListComp2AcresAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2AcresAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2AcresAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2Address":
		if e.complexity.IformTemp.TxtListComp2Address == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2Address(childComplexity), true

	case "IformTemp.txtListComp2Adjustments":
		if e.complexity.IformTemp.TxtListComp2Adjustments == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2Adjustments(childComplexity), true

	case "IformTemp.txtListComp2Age":
		if e.complexity.IformTemp.TxtListComp2Age == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2Age(childComplexity), true

	case "IformTemp.txtListComp2BasementAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2BasementAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2BasementAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2BasementSqFt":
		if e.complexity.IformTemp.TxtListComp2BasementSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2BasementSqFt(childComplexity), true

	case "IformTemp.txtListComp2BasementSqFtAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2BasementSqFtAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2BasementSqFtAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2Bedrooms":
		if e.complexity.IformTemp.TxtListComp2Bedrooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2Bedrooms(childComplexity), true

	case "IformTemp.txtListComp2BedroomsAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2BedroomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2BedroomsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2City":
		if e.complexity.IformTemp.TxtListComp2City == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2City(childComplexity), true

	case "IformTemp.txtListComp2CompTotals":
		if e.complexity.IformTemp.TxtListComp2CompTotals == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2CompTotals(childComplexity), true

	case "IformTemp.txtListComp2ComparableComments":
		if e.complexity.IformTemp.TxtListComp2ComparableComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2ComparableComments(childComplexity), true

	case "IformTemp.txtListComp2ConditionAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2ConditionAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2ConditionAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2CurrentListDate":
		if e.complexity.IformTemp.TxtListComp2CurrentListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2CurrentListDate(childComplexity), true

	case "IformTemp.txtListComp2DataSource":
		if e.complexity.IformTemp.TxtListComp2DataSource == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2DataSource(childComplexity), true

	case "IformTemp.txtListComp2ExtFinishAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2ExtFinishAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2ExtFinishAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2FireplaceAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2FireplaceAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2FireplaceAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2FormatAdjustments":
		if e.complexity.IformTemp.TxtListComp2FormatAdjustments == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2FormatAdjustments(childComplexity), true

	case "IformTemp.txtListComp2FullBaths":
		if e.complexity.IformTemp.TxtListComp2FullBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2FullBaths(childComplexity), true

	case "IformTemp.txtListComp2FullBathsAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2FullBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2FullBathsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2GLAAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2GLAAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2GLAAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2GarageAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2GarageAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2GarageAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2HOAFee":
		if e.complexity.IformTemp.TxtListComp2HOAFee == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2HOAFee(childComplexity), true

	case "IformTemp.txtListComp2HalfBaths":
		if e.complexity.IformTemp.TxtListComp2HalfBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2HalfBaths(childComplexity), true

	case "IformTemp.txtListComp2HalfBathsAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2HalfBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2HalfBathsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2IsFinishedAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2IsFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2IsFinishedAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2ListPrice":
		if e.complexity.IformTemp.TxtListComp2ListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2ListPrice(childComplexity), true

	case "IformTemp.txtListComp2MLSComments":
		if e.complexity.IformTemp.TxtListComp2MLSComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2MLSComments(childComplexity), true

	case "IformTemp.txtListComp2MLSNumber":
		if e.complexity.IformTemp.TxtListComp2MLSNumber == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2MLSNumber(childComplexity), true

	case "IformTemp.txtListComp2OriginalListDate":
		if e.complexity.IformTemp.TxtListComp2OriginalListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2OriginalListDate(childComplexity), true

	case "IformTemp.txtListComp2OriginalListPrice":
		if e.complexity.IformTemp.TxtListComp2OriginalListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2OriginalListPrice(childComplexity), true

	case "IformTemp.txtListComp2PercentFinishedAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2PercentFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2PercentFinishedAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2PoolAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2PoolAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2PoolAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2PorchPatioDeckAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2PorchPatioDeckAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2PorchPatioDeckAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2PricePerSqFt":
		if e.complexity.IformTemp.TxtListComp2PricePerSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2PricePerSqFt(childComplexity), true

	case "IformTemp.txtListComp2Proximity":
		if e.complexity.IformTemp.TxtListComp2Proximity == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2Proximity(childComplexity), true

	case "IformTemp.txtListComp2QualityAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2QualityAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2QualityAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2SquareFeet":
		if e.complexity.IformTemp.TxtListComp2SquareFeet == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2SquareFeet(childComplexity), true

	case "IformTemp.txtListComp2State":
		if e.complexity.IformTemp.TxtListComp2State == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2State(childComplexity), true

	case "IformTemp.txtListComp2StyleAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2StyleAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2StyleAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2Subdivision":
		if e.complexity.IformTemp.TxtListComp2Subdivision == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2Subdivision(childComplexity), true

	case "IformTemp.txtListComp2TotalRooms":
		if e.complexity.IformTemp.TxtListComp2TotalRooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2TotalRooms(childComplexity), true

	case "IformTemp.txtListComp2TotalRoomsAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2TotalRoomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2TotalRoomsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2UnitNo":
		if e.complexity.IformTemp.TxtListComp2UnitNo == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2UnitNo(childComplexity), true

	case "IformTemp.txtListComp2Units":
		if e.complexity.IformTemp.TxtListComp2Units == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2Units(childComplexity), true

	case "IformTemp.txtListComp2ViewAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2ViewAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2ViewAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2YearBuilt":
		if e.complexity.IformTemp.TxtListComp2YearBuilt == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2YearBuilt(childComplexity), true

	case "IformTemp.txtListComp2YearBuiltAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp2YearBuiltAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2YearBuiltAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp2Zip":
		if e.complexity.IformTemp.TxtListComp2Zip == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2Zip(childComplexity), true

	case "IformTemp.txtListComp2DOM":
		if e.complexity.IformTemp.TxtListComp2dom == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2dom(childComplexity), true

	case "IformTemp.txtListComp2GLA":
		if e.complexity.IformTemp.TxtListComp2gla == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2gla(childComplexity), true

	case "IformTemp.txtListComp2noUnit":
		if e.complexity.IformTemp.TxtListComp2noUnit == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp2noUnit(childComplexity), true

	case "IformTemp.txtListComp3Acres":
		if e.complexity.IformTemp.TxtListComp3Acres == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3Acres(childComplexity), true

	case "IformTemp.txtListComp3AcresAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3AcresAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3AcresAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3Address":
		if e.complexity.IformTemp.TxtListComp3Address == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3Address(childComplexity), true

	case "IformTemp.txtListComp3Adjustments":
		if e.complexity.IformTemp.TxtListComp3Adjustments == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3Adjustments(childComplexity), true

	case "IformTemp.txtListComp3Age":
		if e.complexity.IformTemp.TxtListComp3Age == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3Age(childComplexity), true

	case "IformTemp.txtListComp3BasementAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3BasementAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3BasementAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3BasementSqFt":
		if e.complexity.IformTemp.TxtListComp3BasementSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3BasementSqFt(childComplexity), true

	case "IformTemp.txtListComp3BasementSqFtAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3BasementSqFtAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3BasementSqFtAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3Bedrooms":
		if e.complexity.IformTemp.TxtListComp3Bedrooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3Bedrooms(childComplexity), true

	case "IformTemp.txtListComp3BedroomsAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3BedroomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3BedroomsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3City":
		if e.complexity.IformTemp.TxtListComp3City == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3City(childComplexity), true

	case "IformTemp.txtListComp3CompTotals":
		if e.complexity.IformTemp.TxtListComp3CompTotals == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3CompTotals(childComplexity), true

	case "IformTemp.txtListComp3ComparableComments":
		if e.complexity.IformTemp.TxtListComp3ComparableComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3ComparableComments(childComplexity), true

	case "IformTemp.txtListComp3ConditionAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3ConditionAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3ConditionAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3CurrentListDate":
		if e.complexity.IformTemp.TxtListComp3CurrentListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3CurrentListDate(childComplexity), true

	case "IformTemp.txtListComp3DataSource":
		if e.complexity.IformTemp.TxtListComp3DataSource == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3DataSource(childComplexity), true

	case "IformTemp.txtListComp3ExtFinishAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3ExtFinishAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3ExtFinishAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3FireplaceAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3FireplaceAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3FireplaceAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3FormatAdjustments":
		if e.complexity.IformTemp.TxtListComp3FormatAdjustments == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3FormatAdjustments(childComplexity), true

	case "IformTemp.txtListComp3FullBaths":
		if e.complexity.IformTemp.TxtListComp3FullBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3FullBaths(childComplexity), true

	case "IformTemp.txtListComp3FullBathsAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3FullBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3FullBathsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3GLAAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3GLAAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3GLAAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3GarageAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3GarageAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3GarageAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3HOAFee":
		if e.complexity.IformTemp.TxtListComp3HOAFee == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3HOAFee(childComplexity), true

	case "IformTemp.txtListComp3HalfBaths":
		if e.complexity.IformTemp.TxtListComp3HalfBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3HalfBaths(childComplexity), true

	case "IformTemp.txtListComp3HalfBathsAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3HalfBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3HalfBathsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3IsFinishedAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3IsFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3IsFinishedAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3ListPrice":
		if e.complexity.IformTemp.TxtListComp3ListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3ListPrice(childComplexity), true

	case "IformTemp.txtListComp3MLSComments":
		if e.complexity.IformTemp.TxtListComp3MLSComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3MLSComments(childComplexity), true

	case "IformTemp.txtListComp3MLSNumber":
		if e.complexity.IformTemp.TxtListComp3MLSNumber == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3MLSNumber(childComplexity), true

	case "IformTemp.txtListComp3OriginalListDate":
		if e.complexity.IformTemp.TxtListComp3OriginalListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3OriginalListDate(childComplexity), true

	case "IformTemp.txtListComp3OriginalListPrice":
		if e.complexity.IformTemp.TxtListComp3OriginalListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3OriginalListPrice(childComplexity), true

	case "IformTemp.txtListComp3PercentFinishedAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3PercentFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3PercentFinishedAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3PoolAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3PoolAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3PoolAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3PorchPatioDeckAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3PorchPatioDeckAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3PorchPatioDeckAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3PricePerSqFt":
		if e.complexity.IformTemp.TxtListComp3PricePerSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3PricePerSqFt(childComplexity), true

	case "IformTemp.txtListComp3Proximity":
		if e.complexity.IformTemp.TxtListComp3Proximity == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3Proximity(childComplexity), true

	case "IformTemp.txtListComp3QualityAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3QualityAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3QualityAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3SquareFeet":
		if e.complexity.IformTemp.TxtListComp3SquareFeet == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3SquareFeet(childComplexity), true

	case "IformTemp.txtListComp3State":
		if e.complexity.IformTemp.TxtListComp3State == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3State(childComplexity), true

	case "IformTemp.txtListComp3StyleAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3StyleAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3StyleAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3Subdivision":
		if e.complexity.IformTemp.TxtListComp3Subdivision == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3Subdivision(childComplexity), true

	case "IformTemp.txtListComp3TotalRooms":
		if e.complexity.IformTemp.TxtListComp3TotalRooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3TotalRooms(childComplexity), true

	case "IformTemp.txtListComp3TotalRoomsAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3TotalRoomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3TotalRoomsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3UnitNo":
		if e.complexity.IformTemp.TxtListComp3UnitNo == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3UnitNo(childComplexity), true

	case "IformTemp.txtListComp3Units":
		if e.complexity.IformTemp.TxtListComp3Units == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3Units(childComplexity), true

	case "IformTemp.txtListComp3ViewAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3ViewAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3ViewAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3YearBuilt":
		if e.complexity.IformTemp.TxtListComp3YearBuilt == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3YearBuilt(childComplexity), true

	case "IformTemp.txtListComp3YearBuiltAdjBuiltIn":
		if e.complexity.IformTemp.TxtListComp3YearBuiltAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3YearBuiltAdjBuiltIn(childComplexity), true

	case "IformTemp.txtListComp3Zip":
		if e.complexity.IformTemp.TxtListComp3Zip == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3Zip(childComplexity), true

	case "IformTemp.txtListComp3DOM":
		if e.complexity.IformTemp.TxtListComp3dom == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3dom(childComplexity), true

	case "IformTemp.txtListComp3GLA":
		if e.complexity.IformTemp.TxtListComp3gla == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3gla(childComplexity), true

	case "IformTemp.txtListComp3noUnit":
		if e.complexity.IformTemp.TxtListComp3noUnit == nil {
			break
		}

		return e.complexity.IformTemp.TxtListComp3noUnit(childComplexity), true

	case "IformTemp.txtListPriceFinalValues":
		if e.complexity.IformTemp.TxtListPriceFinalValues == nil {
			break
		}

		return e.complexity.IformTemp.TxtListPriceFinalValues(childComplexity), true

	case "IformTemp.txtListPriceRepaired":
		if e.complexity.IformTemp.TxtListPriceRepaired == nil {
			break
		}

		return e.complexity.IformTemp.TxtListPriceRepaired(childComplexity), true

	case "IformTemp.txtListings":
		if e.complexity.IformTemp.TxtListings == nil {
			break
		}

		return e.complexity.IformTemp.TxtListings(childComplexity), true

	case "IformTemp.txtListingsDOMRange1":
		if e.complexity.IformTemp.TxtListingsDOMRange1 == nil {
			break
		}

		return e.complexity.IformTemp.TxtListingsDOMRange1(childComplexity), true

	case "IformTemp.txtListingsDOMRange2":
		if e.complexity.IformTemp.TxtListingsDOMRange2 == nil {
			break
		}

		return e.complexity.IformTemp.TxtListingsDOMRange2(childComplexity), true

	case "IformTemp.txtListingsDOM":
		if e.complexity.IformTemp.TxtListingsDom == nil {
			break
		}

		return e.complexity.IformTemp.TxtListingsDom(childComplexity), true

	case "IformTemp.txtListingsMaxValue":
		if e.complexity.IformTemp.TxtListingsMaxValue == nil {
			break
		}

		return e.complexity.IformTemp.TxtListingsMaxValue(childComplexity), true

	case "IformTemp.txtListingsMedValue":
		if e.complexity.IformTemp.TxtListingsMedValue == nil {
			break
		}

		return e.complexity.IformTemp.TxtListingsMedValue(childComplexity), true

	case "IformTemp.txtListingsMinValue":
		if e.complexity.IformTemp.TxtListingsMinValue == nil {
			break
		}

		return e.complexity.IformTemp.TxtListingsMinValue(childComplexity), true

	case "IformTemp.txtListingsRange1":
		if e.complexity.IformTemp.TxtListingsRange1 == nil {
			break
		}

		return e.complexity.IformTemp.TxtListingsRange1(childComplexity), true

	case "IformTemp.txtListingsRange2":
		if e.complexity.IformTemp.TxtListingsRange2 == nil {
			break
		}

		return e.complexity.IformTemp.TxtListingsRange2(childComplexity), true

	case "IformTemp.txtLocation":
		if e.complexity.IformTemp.TxtLocation == nil {
			break
		}

		return e.complexity.IformTemp.TxtLocation(childComplexity), true

	case "IformTemp.txtMarketRent":
		if e.complexity.IformTemp.TxtMarketRent == nil {
			break
		}

		return e.complexity.IformTemp.TxtMarketRent(childComplexity), true

	case "IformTemp.txtMarketingStrategy":
		if e.complexity.IformTemp.TxtMarketingStrategy == nil {
			break
		}

		return e.complexity.IformTemp.TxtMarketingStrategy(childComplexity), true

	case "IformTemp.txtMonthlyPecent":
		if e.complexity.IformTemp.TxtMonthlyPecent == nil {
			break
		}

		return e.complexity.IformTemp.TxtMonthlyPecent(childComplexity), true

	case "IformTemp.txtNeighborhoodComments":
		if e.complexity.IformTemp.TxtNeighborhoodComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtNeighborhoodComments(childComplexity), true

	case "IformTemp.txtNeighborhoodTrend":
		if e.complexity.IformTemp.TxtNeighborhoodTrend == nil {
			break
		}

		return e.complexity.IformTemp.TxtNeighborhoodTrend(childComplexity), true

	case "IformTemp.txtNeighborhoodTrendComments":
		if e.complexity.IformTemp.TxtNeighborhoodTrendComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtNeighborhoodTrendComments(childComplexity), true

	case "IformTemp.txtNoBoarded":
		if e.complexity.IformTemp.TxtNoBoarded == nil {
			break
		}

		return e.complexity.IformTemp.TxtNoBoarded(childComplexity), true

	case "IformTemp.txtNoOfActive":
		if e.complexity.IformTemp.TxtNoOfActive == nil {
			break
		}

		return e.complexity.IformTemp.TxtNoOfActive(childComplexity), true

	case "IformTemp.txtNoOfDistressed":
		if e.complexity.IformTemp.TxtNoOfDistressed == nil {
			break
		}

		return e.complexity.IformTemp.TxtNoOfDistressed(childComplexity), true

	case "IformTemp.txtNoOfFM":
		if e.complexity.IformTemp.TxtNoOfFm == nil {
			break
		}

		return e.complexity.IformTemp.TxtNoOfFm(childComplexity), true

	case "IformTemp.txtNoOfREOListings":
		if e.complexity.IformTemp.TxtNoOfREOListings == nil {
			break
		}

		return e.complexity.IformTemp.TxtNoOfREOListings(childComplexity), true

	case "IformTemp.txtNoOfREOSales":
		if e.complexity.IformTemp.TxtNoOfREOSales == nil {
			break
		}

		return e.complexity.IformTemp.TxtNoOfREOSales(childComplexity), true

	case "IformTemp.txtNoOfRentals":
		if e.complexity.IformTemp.TxtNoOfRentals == nil {
			break
		}

		return e.complexity.IformTemp.TxtNoOfRentals(childComplexity), true

	case "IformTemp.txtNoOfREO":
		if e.complexity.IformTemp.TxtNoOfReo == nil {
			break
		}

		return e.complexity.IformTemp.TxtNoOfReo(childComplexity), true

	case "IformTemp.txtNoOfSSListings":
		if e.complexity.IformTemp.TxtNoOfSSListings == nil {
			break
		}

		return e.complexity.IformTemp.TxtNoOfSSListings(childComplexity), true

	case "IformTemp.txtNoOfSSSales":
		if e.complexity.IformTemp.TxtNoOfSSSales == nil {
			break
		}

		return e.complexity.IformTemp.TxtNoOfSSSales(childComplexity), true

	case "IformTemp.txtNoOfSS":
		if e.complexity.IformTemp.TxtNoOfSs == nil {
			break
		}

		return e.complexity.IformTemp.TxtNoOfSs(childComplexity), true

	case "IformTemp.txtNoRentHomes":
		if e.complexity.IformTemp.TxtNoRentHomes == nil {
			break
		}

		return e.complexity.IformTemp.TxtNoRentHomes(childComplexity), true

	case "IformTemp.txtOrderNumber":
		if e.complexity.IformTemp.TxtOrderNumber == nil {
			break
		}

		return e.complexity.IformTemp.TxtOrderNumber(childComplexity), true

	case "IformTemp.txtOtherComments":
		if e.complexity.IformTemp.TxtOtherComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtOtherComments(childComplexity), true

	case "IformTemp.txtOwnerOccupied":
		if e.complexity.IformTemp.TxtOwnerOccupied == nil {
			break
		}

		return e.complexity.IformTemp.TxtOwnerOccupied(childComplexity), true

	case "IformTemp.txtPreparerInfoAddress":
		if e.complexity.IformTemp.TxtPreparerInfoAddress == nil {
			break
		}

		return e.complexity.IformTemp.TxtPreparerInfoAddress(childComplexity), true

	case "IformTemp.txtPreparerInfoAgent":
		if e.complexity.IformTemp.TxtPreparerInfoAgent == nil {
			break
		}

		return e.complexity.IformTemp.TxtPreparerInfoAgent(childComplexity), true

	case "IformTemp.txtPreparerInfoAgentCompany":
		if e.complexity.IformTemp.TxtPreparerInfoAgentCompany == nil {
			break
		}

		return e.complexity.IformTemp.TxtPreparerInfoAgentCompany(childComplexity), true

	case "IformTemp.txtPreparerInfoAgentLicense":
		if e.complexity.IformTemp.TxtPreparerInfoAgentLicense == nil {
			break
		}

		return e.complexity.IformTemp.TxtPreparerInfoAgentLicense(childComplexity), true

	case "IformTemp.txtPreparerInfoBroker":
		if e.complexity.IformTemp.TxtPreparerInfoBroker == nil {
			break
		}

		return e.complexity.IformTemp.TxtPreparerInfoBroker(childComplexity), true

	case "IformTemp.txtPreparerInfoBrokerLicense":
		if e.complexity.IformTemp.TxtPreparerInfoBrokerLicense == nil {
			break
		}

		return e.complexity.IformTemp.TxtPreparerInfoBrokerLicense(childComplexity), true

	case "IformTemp.txtPreparerInfoBrokerage":
		if e.complexity.IformTemp.TxtPreparerInfoBrokerage == nil {
			break
		}

		return e.complexity.IformTemp.TxtPreparerInfoBrokerage(childComplexity), true

	case "IformTemp.txtPreparerInfoEmail":
		if e.complexity.IformTemp.TxtPreparerInfoEmail == nil {
			break
		}

		return e.complexity.IformTemp.TxtPreparerInfoEmail(childComplexity), true

	case "IformTemp.txtPreparerInfoMilesAwayFromSubject":
		if e.complexity.IformTemp.TxtPreparerInfoMilesAwayFromSubject == nil {
			break
		}

		return e.complexity.IformTemp.TxtPreparerInfoMilesAwayFromSubject(childComplexity), true

	case "IformTemp.txtPreparerInfoPhone":
		if e.complexity.IformTemp.TxtPreparerInfoPhone == nil {
			break
		}

		return e.complexity.IformTemp.TxtPreparerInfoPhone(childComplexity), true

	case "IformTemp.txtPreparerInfoYearsOfExperience":
		if e.complexity.IformTemp.TxtPreparerInfoYearsOfExperience == nil {
			break
		}

		return e.complexity.IformTemp.TxtPreparerInfoYearsOfExperience(childComplexity), true

	case "IformTemp.txtRenterOccupied":
		if e.complexity.IformTemp.TxtRenterOccupied == nil {
			break
		}

		return e.complexity.IformTemp.TxtRenterOccupied(childComplexity), true

	case "IformTemp.txtSaleComp1Acres":
		if e.complexity.IformTemp.TxtSaleComp1Acres == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1Acres(childComplexity), true

	case "IformTemp.txtSaleComp1AcresAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1AcresAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1AcresAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1Address":
		if e.complexity.IformTemp.TxtSaleComp1Address == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1Address(childComplexity), true

	case "IformTemp.txtSaleComp1Adjustments":
		if e.complexity.IformTemp.TxtSaleComp1Adjustments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1Adjustments(childComplexity), true

	case "IformTemp.txtSaleComp1Age":
		if e.complexity.IformTemp.TxtSaleComp1Age == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1Age(childComplexity), true

	case "IformTemp.txtSaleComp1BasementAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1BasementAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1BasementAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1BasementSqFt":
		if e.complexity.IformTemp.TxtSaleComp1BasementSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1BasementSqFt(childComplexity), true

	case "IformTemp.txtSaleComp1BasementSqFtAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1BasementSqFtAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1BasementSqFtAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1Bedrooms":
		if e.complexity.IformTemp.TxtSaleComp1Bedrooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1Bedrooms(childComplexity), true

	case "IformTemp.txtSaleComp1BedroomsAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1BedroomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1BedroomsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1City":
		if e.complexity.IformTemp.TxtSaleComp1City == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1City(childComplexity), true

	case "IformTemp.txtSaleComp1CompTotals":
		if e.complexity.IformTemp.TxtSaleComp1CompTotals == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1CompTotals(childComplexity), true

	case "IformTemp.txtSaleComp1ComparableComments":
		if e.complexity.IformTemp.TxtSaleComp1ComparableComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1ComparableComments(childComplexity), true

	case "IformTemp.txtSaleComp1ConditionAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1ConditionAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1ConditionAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1CurrentListDate":
		if e.complexity.IformTemp.TxtSaleComp1CurrentListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1CurrentListDate(childComplexity), true

	case "IformTemp.txtSaleComp1DataSource":
		if e.complexity.IformTemp.TxtSaleComp1DataSource == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1DataSource(childComplexity), true

	case "IformTemp.txtSaleComp1ExtFinishAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1ExtFinishAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1ExtFinishAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1FireplaceAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1FireplaceAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1FireplaceAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1FormatAdjustments":
		if e.complexity.IformTemp.TxtSaleComp1FormatAdjustments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1FormatAdjustments(childComplexity), true

	case "IformTemp.txtSaleComp1FullBaths":
		if e.complexity.IformTemp.TxtSaleComp1FullBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1FullBaths(childComplexity), true

	case "IformTemp.txtSaleComp1FullBathsAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1FullBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1FullBathsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1GLAAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1GLAAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1GLAAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1GarageAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1GarageAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1GarageAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1HOAFee":
		if e.complexity.IformTemp.TxtSaleComp1HOAFee == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1HOAFee(childComplexity), true

	case "IformTemp.txtSaleComp1HalfBaths":
		if e.complexity.IformTemp.TxtSaleComp1HalfBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1HalfBaths(childComplexity), true

	case "IformTemp.txtSaleComp1HalfBathsAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1HalfBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1HalfBathsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1IsFinishedAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1IsFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1IsFinishedAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1ListPrice":
		if e.complexity.IformTemp.TxtSaleComp1ListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1ListPrice(childComplexity), true

	case "IformTemp.txtSaleComp1MLSComments":
		if e.complexity.IformTemp.TxtSaleComp1MLSComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1MLSComments(childComplexity), true

	case "IformTemp.txtSaleComp1MLSNumber":
		if e.complexity.IformTemp.TxtSaleComp1MLSNumber == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1MLSNumber(childComplexity), true

	case "IformTemp.txtSaleComp1OriginalListDate":
		if e.complexity.IformTemp.TxtSaleComp1OriginalListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1OriginalListDate(childComplexity), true

	case "IformTemp.txtSaleComp1OriginalListPrice":
		if e.complexity.IformTemp.TxtSaleComp1OriginalListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1OriginalListPrice(childComplexity), true

	case "IformTemp.txtSaleComp1PercentFinishedAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1PercentFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1PercentFinishedAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1PoolAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1PoolAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1PoolAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1PorchPatioDeckAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1PorchPatioDeckAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1PorchPatioDeckAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1PricePerSqFt":
		if e.complexity.IformTemp.TxtSaleComp1PricePerSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1PricePerSqFt(childComplexity), true

	case "IformTemp.txtSaleComp1Proximity":
		if e.complexity.IformTemp.TxtSaleComp1Proximity == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1Proximity(childComplexity), true

	case "IformTemp.txtSaleComp1QualityAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1QualityAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1QualityAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1SaleDate":
		if e.complexity.IformTemp.TxtSaleComp1SaleDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1SaleDate(childComplexity), true

	case "IformTemp.txtSaleComp1SalePrice":
		if e.complexity.IformTemp.TxtSaleComp1SalePrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1SalePrice(childComplexity), true

	case "IformTemp.txtSaleComp1SquareFeet":
		if e.complexity.IformTemp.TxtSaleComp1SquareFeet == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1SquareFeet(childComplexity), true

	case "IformTemp.txtSaleComp1State":
		if e.complexity.IformTemp.TxtSaleComp1State == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1State(childComplexity), true

	case "IformTemp.txtSaleComp1StyleAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1StyleAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1StyleAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1Subdivision":
		if e.complexity.IformTemp.TxtSaleComp1Subdivision == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1Subdivision(childComplexity), true

	case "IformTemp.txtSaleComp1TotalRooms":
		if e.complexity.IformTemp.TxtSaleComp1TotalRooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1TotalRooms(childComplexity), true

	case "IformTemp.txtSaleComp1TotalRoomsAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1TotalRoomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1TotalRoomsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1UnitNo":
		if e.complexity.IformTemp.TxtSaleComp1UnitNo == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1UnitNo(childComplexity), true

	case "IformTemp.txtSaleComp1Units":
		if e.complexity.IformTemp.TxtSaleComp1Units == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1Units(childComplexity), true

	case "IformTemp.txtSaleComp1ViewAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1ViewAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1ViewAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1YearBuilt":
		if e.complexity.IformTemp.TxtSaleComp1YearBuilt == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1YearBuilt(childComplexity), true

	case "IformTemp.txtSaleComp1YearBuiltAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp1YearBuiltAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1YearBuiltAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp1Zip":
		if e.complexity.IformTemp.TxtSaleComp1Zip == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1Zip(childComplexity), true

	case "IformTemp.txtSaleComp1DOM":
		if e.complexity.IformTemp.TxtSaleComp1dom == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1dom(childComplexity), true

	case "IformTemp.txtSaleComp1GLA":
		if e.complexity.IformTemp.TxtSaleComp1gla == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1gla(childComplexity), true

	case "IformTemp.txtSaleComp1noUnit":
		if e.complexity.IformTemp.TxtSaleComp1noUnit == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp1noUnit(childComplexity), true

	case "IformTemp.txtSaleComp2Acres":
		if e.complexity.IformTemp.TxtSaleComp2Acres == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2Acres(childComplexity), true

	case "IformTemp.txtSaleComp2AcresAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2AcresAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2AcresAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2Address":
		if e.complexity.IformTemp.TxtSaleComp2Address == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2Address(childComplexity), true

	case "IformTemp.txtSaleComp2Adjustments":
		if e.complexity.IformTemp.TxtSaleComp2Adjustments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2Adjustments(childComplexity), true

	case "IformTemp.txtSaleComp2Age":
		if e.complexity.IformTemp.TxtSaleComp2Age == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2Age(childComplexity), true

	case "IformTemp.txtSaleComp2BasementAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2BasementAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2BasementAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2BasementSqFt":
		if e.complexity.IformTemp.TxtSaleComp2BasementSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2BasementSqFt(childComplexity), true

	case "IformTemp.txtSaleComp2BasementSqFtAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2BasementSqFtAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2BasementSqFtAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2Bedrooms":
		if e.complexity.IformTemp.TxtSaleComp2Bedrooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2Bedrooms(childComplexity), true

	case "IformTemp.txtSaleComp2BedroomsAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2BedroomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2BedroomsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2City":
		if e.complexity.IformTemp.TxtSaleComp2City == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2City(childComplexity), true

	case "IformTemp.txtSaleComp2CompTotals":
		if e.complexity.IformTemp.TxtSaleComp2CompTotals == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2CompTotals(childComplexity), true

	case "IformTemp.txtSaleComp2ComparableComments":
		if e.complexity.IformTemp.TxtSaleComp2ComparableComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2ComparableComments(childComplexity), true

	case "IformTemp.txtSaleComp2ConditionAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2ConditionAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2ConditionAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2CurrentListDate":
		if e.complexity.IformTemp.TxtSaleComp2CurrentListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2CurrentListDate(childComplexity), true

	case "IformTemp.txtSaleComp2DataSource":
		if e.complexity.IformTemp.TxtSaleComp2DataSource == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2DataSource(childComplexity), true

	case "IformTemp.txtSaleComp2ExtFinishAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2ExtFinishAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2ExtFinishAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2FireplaceAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2FireplaceAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2FireplaceAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2FormatAdjustments":
		if e.complexity.IformTemp.TxtSaleComp2FormatAdjustments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2FormatAdjustments(childComplexity), true

	case "IformTemp.txtSaleComp2FullBaths":
		if e.complexity.IformTemp.TxtSaleComp2FullBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2FullBaths(childComplexity), true

	case "IformTemp.txtSaleComp2FullBathsAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2FullBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2FullBathsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2GLAAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2GLAAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2GLAAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2GarageAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2GarageAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2GarageAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2HOAFee":
		if e.complexity.IformTemp.TxtSaleComp2HOAFee == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2HOAFee(childComplexity), true

	case "IformTemp.txtSaleComp2HalfBaths":
		if e.complexity.IformTemp.TxtSaleComp2HalfBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2HalfBaths(childComplexity), true

	case "IformTemp.txtSaleComp2HalfBathsAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2HalfBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2HalfBathsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2IsFinishedAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2IsFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2IsFinishedAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2ListPrice":
		if e.complexity.IformTemp.TxtSaleComp2ListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2ListPrice(childComplexity), true

	case "IformTemp.txtSaleComp2MLSComments":
		if e.complexity.IformTemp.TxtSaleComp2MLSComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2MLSComments(childComplexity), true

	case "IformTemp.txtSaleComp2MLSNumber":
		if e.complexity.IformTemp.TxtSaleComp2MLSNumber == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2MLSNumber(childComplexity), true

	case "IformTemp.txtSaleComp2OriginalListDate":
		if e.complexity.IformTemp.TxtSaleComp2OriginalListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2OriginalListDate(childComplexity), true

	case "IformTemp.txtSaleComp2OriginalListPrice":
		if e.complexity.IformTemp.TxtSaleComp2OriginalListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2OriginalListPrice(childComplexity), true

	case "IformTemp.txtSaleComp2PercentFinishedAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2PercentFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2PercentFinishedAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2PoolAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2PoolAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2PoolAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2PorchPatioDeckAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2PorchPatioDeckAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2PorchPatioDeckAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2PricePerSqFt":
		if e.complexity.IformTemp.TxtSaleComp2PricePerSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2PricePerSqFt(childComplexity), true

	case "IformTemp.txtSaleComp2Proximity":
		if e.complexity.IformTemp.TxtSaleComp2Proximity == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2Proximity(childComplexity), true

	case "IformTemp.txtSaleComp2QualityAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2QualityAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2QualityAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2SaleDate":
		if e.complexity.IformTemp.TxtSaleComp2SaleDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2SaleDate(childComplexity), true

	case "IformTemp.txtSaleComp2SalePrice":
		if e.complexity.IformTemp.TxtSaleComp2SalePrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2SalePrice(childComplexity), true

	case "IformTemp.txtSaleComp2SquareFeet":
		if e.complexity.IformTemp.TxtSaleComp2SquareFeet == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2SquareFeet(childComplexity), true

	case "IformTemp.txtSaleComp2State":
		if e.complexity.IformTemp.TxtSaleComp2State == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2State(childComplexity), true

	case "IformTemp.txtSaleComp2StyleAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2StyleAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2StyleAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2Subdivision":
		if e.complexity.IformTemp.TxtSaleComp2Subdivision == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2Subdivision(childComplexity), true

	case "IformTemp.txtSaleComp2TotalRooms":
		if e.complexity.IformTemp.TxtSaleComp2TotalRooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2TotalRooms(childComplexity), true

	case "IformTemp.txtSaleComp2TotalRoomsAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2TotalRoomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2TotalRoomsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2UnitNo":
		if e.complexity.IformTemp.TxtSaleComp2UnitNo == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2UnitNo(childComplexity), true

	case "IformTemp.txtSaleComp2Units":
		if e.complexity.IformTemp.TxtSaleComp2Units == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2Units(childComplexity), true

	case "IformTemp.txtSaleComp2ViewAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2ViewAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2ViewAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2YearBuilt":
		if e.complexity.IformTemp.TxtSaleComp2YearBuilt == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2YearBuilt(childComplexity), true

	case "IformTemp.txtSaleComp2YearBuiltAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp2YearBuiltAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2YearBuiltAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp2Zip":
		if e.complexity.IformTemp.TxtSaleComp2Zip == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2Zip(childComplexity), true

	case "IformTemp.txtSaleComp2DOM":
		if e.complexity.IformTemp.TxtSaleComp2dom == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2dom(childComplexity), true

	case "IformTemp.txtSaleComp2GLA":
		if e.complexity.IformTemp.TxtSaleComp2gla == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2gla(childComplexity), true

	case "IformTemp.txtSaleComp2noUnit":
		if e.complexity.IformTemp.TxtSaleComp2noUnit == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp2noUnit(childComplexity), true

	case "IformTemp.txtSaleComp3Acres":
		if e.complexity.IformTemp.TxtSaleComp3Acres == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3Acres(childComplexity), true

	case "IformTemp.txtSaleComp3AcresAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3AcresAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3AcresAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3Address":
		if e.complexity.IformTemp.TxtSaleComp3Address == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3Address(childComplexity), true

	case "IformTemp.txtSaleComp3Adjustments":
		if e.complexity.IformTemp.TxtSaleComp3Adjustments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3Adjustments(childComplexity), true

	case "IformTemp.txtSaleComp3Age":
		if e.complexity.IformTemp.TxtSaleComp3Age == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3Age(childComplexity), true

	case "IformTemp.txtSaleComp3BasementAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3BasementAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3BasementAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3BasementSqFt":
		if e.complexity.IformTemp.TxtSaleComp3BasementSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3BasementSqFt(childComplexity), true

	case "IformTemp.txtSaleComp3BasementSqFtAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3BasementSqFtAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3BasementSqFtAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3Bedrooms":
		if e.complexity.IformTemp.TxtSaleComp3Bedrooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3Bedrooms(childComplexity), true

	case "IformTemp.txtSaleComp3BedroomsAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3BedroomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3BedroomsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3City":
		if e.complexity.IformTemp.TxtSaleComp3City == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3City(childComplexity), true

	case "IformTemp.txtSaleComp3CompTotals":
		if e.complexity.IformTemp.TxtSaleComp3CompTotals == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3CompTotals(childComplexity), true

	case "IformTemp.txtSaleComp3ComparableComments":
		if e.complexity.IformTemp.TxtSaleComp3ComparableComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3ComparableComments(childComplexity), true

	case "IformTemp.txtSaleComp3ConditionAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3ConditionAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3ConditionAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3CurrentListDate":
		if e.complexity.IformTemp.TxtSaleComp3CurrentListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3CurrentListDate(childComplexity), true

	case "IformTemp.txtSaleComp3DataSource":
		if e.complexity.IformTemp.TxtSaleComp3DataSource == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3DataSource(childComplexity), true

	case "IformTemp.txtSaleComp3ExtFinishAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3ExtFinishAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3ExtFinishAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3FireplaceAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3FireplaceAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3FireplaceAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3FormatAdjustments":
		if e.complexity.IformTemp.TxtSaleComp3FormatAdjustments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3FormatAdjustments(childComplexity), true

	case "IformTemp.txtSaleComp3FullBaths":
		if e.complexity.IformTemp.TxtSaleComp3FullBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3FullBaths(childComplexity), true

	case "IformTemp.txtSaleComp3FullBathsAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3FullBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3FullBathsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3GLAAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3GLAAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3GLAAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3GarageAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3GarageAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3GarageAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3HOAFee":
		if e.complexity.IformTemp.TxtSaleComp3HOAFee == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3HOAFee(childComplexity), true

	case "IformTemp.txtSaleComp3HalfBaths":
		if e.complexity.IformTemp.TxtSaleComp3HalfBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3HalfBaths(childComplexity), true

	case "IformTemp.txtSaleComp3HalfBathsAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3HalfBathsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3HalfBathsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3IsFinishedAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3IsFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3IsFinishedAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3ListPrice":
		if e.complexity.IformTemp.TxtSaleComp3ListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3ListPrice(childComplexity), true

	case "IformTemp.txtSaleComp3MLSComments":
		if e.complexity.IformTemp.TxtSaleComp3MLSComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3MLSComments(childComplexity), true

	case "IformTemp.txtSaleComp3MLSNumber":
		if e.complexity.IformTemp.TxtSaleComp3MLSNumber == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3MLSNumber(childComplexity), true

	case "IformTemp.txtSaleComp3OriginalListDate":
		if e.complexity.IformTemp.TxtSaleComp3OriginalListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3OriginalListDate(childComplexity), true

	case "IformTemp.txtSaleComp3OriginalListPrice":
		if e.complexity.IformTemp.TxtSaleComp3OriginalListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3OriginalListPrice(childComplexity), true

	case "IformTemp.txtSaleComp3PercentFinishedAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3PercentFinishedAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3PercentFinishedAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3PoolAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3PoolAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3PoolAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3PorchPatioDeckAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3PorchPatioDeckAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3PorchPatioDeckAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3PricePerSqFt":
		if e.complexity.IformTemp.TxtSaleComp3PricePerSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3PricePerSqFt(childComplexity), true

	case "IformTemp.txtSaleComp3Proximity":
		if e.complexity.IformTemp.TxtSaleComp3Proximity == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3Proximity(childComplexity), true

	case "IformTemp.txtSaleComp3QualityAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3QualityAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3QualityAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3SaleDate":
		if e.complexity.IformTemp.TxtSaleComp3SaleDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3SaleDate(childComplexity), true

	case "IformTemp.txtSaleComp3SalePrice":
		if e.complexity.IformTemp.TxtSaleComp3SalePrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3SalePrice(childComplexity), true

	case "IformTemp.txtSaleComp3SquareFeet":
		if e.complexity.IformTemp.TxtSaleComp3SquareFeet == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3SquareFeet(childComplexity), true

	case "IformTemp.txtSaleComp3State":
		if e.complexity.IformTemp.TxtSaleComp3State == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3State(childComplexity), true

	case "IformTemp.txtSaleComp3StyleAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3StyleAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3StyleAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3Subdivision":
		if e.complexity.IformTemp.TxtSaleComp3Subdivision == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3Subdivision(childComplexity), true

	case "IformTemp.txtSaleComp3TotalRooms":
		if e.complexity.IformTemp.TxtSaleComp3TotalRooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3TotalRooms(childComplexity), true

	case "IformTemp.txtSaleComp3TotalRoomsAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3TotalRoomsAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3TotalRoomsAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3UnitNo":
		if e.complexity.IformTemp.TxtSaleComp3UnitNo == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3UnitNo(childComplexity), true

	case "IformTemp.txtSaleComp3Units":
		if e.complexity.IformTemp.TxtSaleComp3Units == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3Units(childComplexity), true

	case "IformTemp.txtSaleComp3ViewAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3ViewAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3ViewAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3YearBuilt":
		if e.complexity.IformTemp.TxtSaleComp3YearBuilt == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3YearBuilt(childComplexity), true

	case "IformTemp.txtSaleComp3YearBuiltAdjBuiltIn":
		if e.complexity.IformTemp.TxtSaleComp3YearBuiltAdjBuiltIn == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3YearBuiltAdjBuiltIn(childComplexity), true

	case "IformTemp.txtSaleComp3Zip":
		if e.complexity.IformTemp.TxtSaleComp3Zip == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3Zip(childComplexity), true

	case "IformTemp.txtSaleComp3DOM":
		if e.complexity.IformTemp.TxtSaleComp3dom == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3dom(childComplexity), true

	case "IformTemp.txtSaleComp3GLA":
		if e.complexity.IformTemp.TxtSaleComp3gla == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3gla(childComplexity), true

	case "IformTemp.txtSaleComp3noUnit":
		if e.complexity.IformTemp.TxtSaleComp3noUnit == nil {
			break
		}

		return e.complexity.IformTemp.TxtSaleComp3noUnit(childComplexity), true

	case "IformTemp.txtSales":
		if e.complexity.IformTemp.TxtSales == nil {
			break
		}

		return e.complexity.IformTemp.TxtSales(childComplexity), true

	case "IformTemp.txtSalesDOMRange1":
		if e.complexity.IformTemp.TxtSalesDOMRange1 == nil {
			break
		}

		return e.complexity.IformTemp.TxtSalesDOMRange1(childComplexity), true

	case "IformTemp.txtSalesDOMRange2":
		if e.complexity.IformTemp.TxtSalesDOMRange2 == nil {
			break
		}

		return e.complexity.IformTemp.TxtSalesDOMRange2(childComplexity), true

	case "IformTemp.txtSalesDOM":
		if e.complexity.IformTemp.TxtSalesDom == nil {
			break
		}

		return e.complexity.IformTemp.TxtSalesDom(childComplexity), true

	case "IformTemp.txtSalesMedValue":
		if e.complexity.IformTemp.TxtSalesMedValue == nil {
			break
		}

		return e.complexity.IformTemp.TxtSalesMedValue(childComplexity), true

	case "IformTemp.txtSalesRange1":
		if e.complexity.IformTemp.TxtSalesRange1 == nil {
			break
		}

		return e.complexity.IformTemp.TxtSalesRange1(childComplexity), true

	case "IformTemp.txtSalesRange2":
		if e.complexity.IformTemp.TxtSalesRange2 == nil {
			break
		}

		return e.complexity.IformTemp.TxtSalesRange2(childComplexity), true

	case "IformTemp.txtSubjectAcres":
		if e.complexity.IformTemp.TxtSubjectAcres == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectAcres(childComplexity), true

	case "IformTemp.txtSubjectAddress":
		if e.complexity.IformTemp.TxtSubjectAddress == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectAddress(childComplexity), true

	case "IformTemp.txtSubjectAdjustments":
		if e.complexity.IformTemp.TxtSubjectAdjustments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectAdjustments(childComplexity), true

	case "IformTemp.txtSubjectAge":
		if e.complexity.IformTemp.TxtSubjectAge == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectAge(childComplexity), true

	case "IformTemp.txtSubjectBasementSqFt":
		if e.complexity.IformTemp.TxtSubjectBasementSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectBasementSqFt(childComplexity), true

	case "IformTemp.txtSubjectBedrooms":
		if e.complexity.IformTemp.TxtSubjectBedrooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectBedrooms(childComplexity), true

	case "IformTemp.txtSubjectCity":
		if e.complexity.IformTemp.TxtSubjectCity == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectCity(childComplexity), true

	case "IformTemp.txtSubjectComments":
		if e.complexity.IformTemp.TxtSubjectComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectComments(childComplexity), true

	case "IformTemp.txtSubjectCompTotals":
		if e.complexity.IformTemp.TxtSubjectCompTotals == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectCompTotals(childComplexity), true

	case "IformTemp.txtSubjectCurrentListDate":
		if e.complexity.IformTemp.TxtSubjectCurrentListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectCurrentListDate(childComplexity), true

	case "IformTemp.txtSubjectDataSource":
		if e.complexity.IformTemp.TxtSubjectDataSource == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectDataSource(childComplexity), true

	case "IformTemp.txtSubjectDOM":
		if e.complexity.IformTemp.TxtSubjectDom == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectDom(childComplexity), true

	case "IformTemp.txtSubjectFullBaths":
		if e.complexity.IformTemp.TxtSubjectFullBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectFullBaths(childComplexity), true

	case "IformTemp.txtSubjectGLA":
		if e.complexity.IformTemp.TxtSubjectGla == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectGla(childComplexity), true

	case "IformTemp.txtSubjectHOAFee":
		if e.complexity.IformTemp.TxtSubjectHOAFee == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectHOAFee(childComplexity), true

	case "IformTemp.txtSubjectHalfBaths":
		if e.complexity.IformTemp.TxtSubjectHalfBaths == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectHalfBaths(childComplexity), true

	case "IformTemp.txtSubjectListPrice":
		if e.complexity.IformTemp.TxtSubjectListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectListPrice(childComplexity), true

	case "IformTemp.txtSubjectMLSNumber":
		if e.complexity.IformTemp.TxtSubjectMLSNumber == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectMLSNumber(childComplexity), true

	case "IformTemp.txtSubjectOriginalListDate":
		if e.complexity.IformTemp.TxtSubjectOriginalListDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectOriginalListDate(childComplexity), true

	case "IformTemp.txtSubjectOriginalListPrice":
		if e.complexity.IformTemp.TxtSubjectOriginalListPrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectOriginalListPrice(childComplexity), true

	case "IformTemp.txtSubjectPricePerSqFt":
		if e.complexity.IformTemp.TxtSubjectPricePerSqFt == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectPricePerSqFt(childComplexity), true

	case "IformTemp.txtSubjectProximity":
		if e.complexity.IformTemp.TxtSubjectProximity == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectProximity(childComplexity), true

	case "IformTemp.txtSubjectSaleDate":
		if e.complexity.IformTemp.TxtSubjectSaleDate == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectSaleDate(childComplexity), true

	case "IformTemp.txtSubjectSalePrice":
		if e.complexity.IformTemp.TxtSubjectSalePrice == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectSalePrice(childComplexity), true

	case "IformTemp.txtSubjectSquareFeet":
		if e.complexity.IformTemp.TxtSubjectSquareFeet == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectSquareFeet(childComplexity), true

	case "IformTemp.txtSubjectState":
		if e.complexity.IformTemp.TxtSubjectState == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectState(childComplexity), true

	case "IformTemp.txtSubjectSubdivision":
		if e.complexity.IformTemp.TxtSubjectSubdivision == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectSubdivision(childComplexity), true

	case "IformTemp.txtSubjectTotalRooms":
		if e.complexity.IformTemp.TxtSubjectTotalRooms == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectTotalRooms(childComplexity), true

	case "IformTemp.txtSubjectUnitNo":
		if e.complexity.IformTemp.TxtSubjectUnitNo == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectUnitNo(childComplexity), true

	case "IformTemp.txtSubjectUnits":
		if e.complexity.IformTemp.TxtSubjectUnits == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectUnits(childComplexity), true

	case "IformTemp.txtSubjectYearBuilt":
		if e.complexity.IformTemp.TxtSubjectYearBuilt == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectYearBuilt(childComplexity), true

	case "IformTemp.txtSubjectZip":
		if e.complexity.IformTemp.TxtSubjectZip == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectZip(childComplexity), true

	case "IformTemp.txtSubjectnoUnit":
		if e.complexity.IformTemp.TxtSubjectnoUnit == nil {
			break
		}

		return e.complexity.IformTemp.TxtSubjectnoUnit(childComplexity), true

	case "IformTemp.txtTaxID":
		if e.complexity.IformTemp.TxtTaxID == nil {
			break
		}

		return e.complexity.IformTemp.TxtTaxID(childComplexity), true

	case "IformTemp.txtTotalListings":
		if e.complexity.IformTemp.TxtTotalListings == nil {
			break
		}

		return e.complexity.IformTemp.TxtTotalListings(childComplexity), true

	case "IformTemp.txtTotalSales":
		if e.complexity.IformTemp.TxtTotalSales == nil {
			break
		}

		return e.complexity.IformTemp.TxtTotalSales(childComplexity), true

	case "IformTemp.txtTrullia":
		if e.complexity.IformTemp.TxtTrullia == nil {
			break
		}

		return e.complexity.IformTemp.TxtTrullia(childComplexity), true

	case "IformTemp.txtTypicalDOM":
		if e.complexity.IformTemp.TxtTypicalDom == nil {
			break
		}

		return e.complexity.IformTemp.TxtTypicalDom(childComplexity), true

	case "IformTemp.txtTypicalRentalRates":
		if e.complexity.IformTemp.TxtTypicalRentalRates == nil {
			break
		}

		return e.complexity.IformTemp.TxtTypicalRentalRates(childComplexity), true

	case "IformTemp.txtUnique":
		if e.complexity.IformTemp.TxtUnique == nil {
			break
		}

		return e.complexity.IformTemp.TxtUnique(childComplexity), true

	case "IformTemp.txtUniqueComments":
		if e.complexity.IformTemp.TxtUniqueComments == nil {
			break
		}

		return e.complexity.IformTemp.TxtUniqueComments(childComplexity), true

	case "IformTemp.txtValidation":
		if e.complexity.IformTemp.TxtValidation == nil {
			break
		}

		return e.complexity.IformTemp.TxtValidation(childComplexity), true

	case "IformTemp.txtValidation1":
		if e.complexity.IformTemp.TxtValidation1 == nil {
			break
		}

		return e.complexity.IformTemp.TxtValidation1(childComplexity), true

	case "IformTemp.txtZillow":
		if e.complexity.IformTemp.TxtZillow == nil {
			break
		}

		return e.complexity.IformTemp.TxtZillow(childComplexity), true

	case "IformTemp.txtZillowNeighborhoodTrend":
		if e.complexity.IformTemp.TxtZillowNeighborhoodTrend == nil {
			break
		}

		return e.complexity.IformTemp.TxtZillowNeighborhoodTrend(childComplexity), true

	case "IformTemp.txtcbdamage":
		if e.complexity.IformTemp.Txtcbdamage == nil {
			break
		}

		return e.complexity.IformTemp.Txtcbdamage(childComplexity), true

	case "IformTemp.txtcbinfluence":
		if e.complexity.IformTemp.Txtcbinfluence == nil {
			break
		}

		return e.complexity.IformTemp.Txtcbinfluence(childComplexity), true

	case "IformTemp.txtcblot":
		if e.complexity.IformTemp.Txtcblot == nil {
			break
		}

		return e.complexity.IformTemp.Txtcblot(childComplexity), true

	case "IformTemp.txtcbnew":
		if e.complexity.IformTemp.Txtcbnew == nil {
			break
		}

		return e.complexity.IformTemp.Txtcbnew(childComplexity), true

	case "IformTemp.txtcbold":
		if e.complexity.IformTemp.Txtcbold == nil {
			break
		}

		return e.complexity.IformTemp.Txtcbold(childComplexity), true

	case "IformTemp.txtcbstyle":
		if e.complexity.IformTemp.Txtcbstyle == nil {
			break
		}

		return e.complexity.IformTemp.Txtcbstyle(childComplexity), true

	case "IformTemp.txtcbupgrade":
		if e.complexity.IformTemp.Txtcbupgrade == nil {
			break
		}

		return e.complexity.IformTemp.Txtcbupgrade(childComplexity), true

	case "IformTemp.txtcbview":
		if e.complexity.IformTemp.Txtcbview == nil {
			break
		}

		return e.complexity.IformTemp.Txtcbview(childComplexity), true

	case "IformTemp.txtpmi":
		if e.complexity.IformTemp.Txtpmi == nil {
			break
		}

		return e.complexity.IformTemp.Txtpmi(childComplexity), true

	case "IformTemp.viewException":
		if e.complexity.IformTemp.ViewException == nil {
			break
		}

		return e.complexity.IformTemp.ViewException(childComplexity), true

	case "Instruction.client":
		if e.complexity.Instruction.Client == nil {
			break
		}

		return e.complexity.Instruction.Client(childComplexity), true

	case "Instruction.clientId":
		if e.complexity.Instruction.ClientID == nil {
			break
		}

		return e.complexity.Instruction.ClientID(childComplexity), true

	case "Instruction.comment":
		if e.complexity.Instruction.Comment == nil {
			break
		}

		return e.complexity.Instruction.Comment(childComplexity), true

	case "Instruction.company":
		if e.complexity.Instruction.Company == nil {
			break
		}

		return e.complexity.Instruction.Company(childComplexity), true

	case "Instruction.companyId":
		if e.complexity.Instruction.CompanyID == nil {
			break
		}

		return e.complexity.Instruction.CompanyID(childComplexity), true

	case "Instruction.createdDateTime":
		if e.complexity.Instruction.CreatedDateTime == nil {
			break
		}

		return e.complexity.Instruction.CreatedDateTime(childComplexity), true

	case "Instruction.fileName":
		if e.complexity.Instruction.FileName == nil {
			break
		}

		return e.complexity.Instruction.FileName(childComplexity), true

	case "Instruction.id":
		if e.complexity.Instruction.ID == nil {
			break
		}

		return e.complexity.Instruction.ID(childComplexity), true

	case "Instruction.tag":
		if e.complexity.Instruction.Tag == nil {
			break
		}

		return e.complexity.Instruction.Tag(childComplexity), true

	case "Instruction.url":
		if e.complexity.Instruction.URL == nil {
			break
		}

		return e.complexity.Instruction.URL(childComplexity), true

	case "InstructionResult.results":
		if e.complexity.InstructionResult.Results == nil {
			break
		}

		return e.complexity.InstructionResult.Results(childComplexity), true

	case "InstructionResult.totalCount":
		if e.complexity.InstructionResult.TotalCount == nil {
			break
		}

		return e.complexity.InstructionResult.TotalCount(childComplexity), true

	case "Invoice.address":
		if e.complexity.Invoice.Address == nil {
			break
		}

		return e.complexity.Invoice.Address(childComplexity), true

	case "Invoice.client":
		if e.complexity.Invoice.Client == nil {
			break
		}

		return e.complexity.Invoice.Client(childComplexity), true

	case "Invoice.company":
		if e.complexity.Invoice.Company == nil {
			break
		}

		return e.complexity.Invoice.Company(childComplexity), true

	case "Invoice.date":
		if e.complexity.Invoice.Date == nil {
			break
		}

		return e.complexity.Invoice.Date(childComplexity), true

	case "Invoice.employeeId":
		if e.complexity.Invoice.EmployeeID == nil {
			break
		}

		return e.complexity.Invoice.EmployeeID(childComplexity), true

	case "Invoice.id":
		if e.complexity.Invoice.ID == nil {
			break
		}

		return e.complexity.Invoice.ID(childComplexity), true

	case "Invoice.initialBpoRemarks":
		if e.complexity.Invoice.InitialBpoRemarks == nil {
			break
		}

		return e.complexity.Invoice.InitialBpoRemarks(childComplexity), true

	case "Invoice.inspectionRemarks":
		if e.complexity.Invoice.InspectionRemarks == nil {
			break
		}

		return e.complexity.Invoice.InspectionRemarks(childComplexity), true

	case "Invoice.interiorRemarks":
		if e.complexity.Invoice.InteriorRemarks == nil {
			break
		}

		return e.complexity.Invoice.InteriorRemarks(childComplexity), true

	case "Invoice.isInitialBpo":
		if e.complexity.Invoice.IsInitialBpo == nil {
			break
		}

		return e.complexity.Invoice.IsInitialBpo(childComplexity), true

	case "Invoice.isInspection":
		if e.complexity.Invoice.IsInspection == nil {
			break
		}

		return e.complexity.Invoice.IsInspection(childComplexity), true

	case "Invoice.isInterior":
		if e.complexity.Invoice.IsInterior == nil {
			break
		}

		return e.complexity.Invoice.IsInterior(childComplexity), true

	case "Invoice.isNoCsv":
		if e.complexity.Invoice.IsNoCsv == nil {
			break
		}

		return e.complexity.Invoice.IsNoCsv(childComplexity), true

	case "Invoice.isNoIFill":
		if e.complexity.Invoice.IsNoIFill == nil {
			break
		}

		return e.complexity.Invoice.IsNoIFill(childComplexity), true

	case "Invoice.isOtherPremium":
		if e.complexity.Invoice.IsOtherPremium == nil {
			break
		}

		return e.complexity.Invoice.IsOtherPremium(childComplexity), true

	case "Invoice.isRentalAddendum":
		if e.complexity.Invoice.IsRentalAddendum == nil {
			break
		}

		return e.complexity.Invoice.IsRentalAddendum(childComplexity), true

	case "Invoice.isRush":
		if e.complexity.Invoice.IsRush == nil {
			break
		}

		return e.complexity.Invoice.IsRush(childComplexity), true

	case "Invoice.isSuperRush":
		if e.complexity.Invoice.IsSuperRush == nil {
			break
		}

		return e.complexity.Invoice.IsSuperRush(childComplexity), true

	case "Invoice.name":
		if e.complexity.Invoice.Name == nil {
			break
		}

		return e.complexity.Invoice.Name(childComplexity), true

	case "Invoice.noCsvRemarks":
		if e.complexity.Invoice.NoCsvRemarks == nil {
			break
		}

		return e.complexity.Invoice.NoCsvRemarks(childComplexity), true

	case "Invoice.noIFillRemarks":
		if e.complexity.Invoice.NoIFillRemarks == nil {
			break
		}

		return e.complexity.Invoice.NoIFillRemarks(childComplexity), true

	case "Invoice.orderNumber":
		if e.complexity.Invoice.OrderNumber == nil {
			break
		}

		return e.complexity.Invoice.OrderNumber(childComplexity), true

	case "Invoice.orderType":
		if e.complexity.Invoice.OrderType == nil {
			break
		}

		return e.complexity.Invoice.OrderType(childComplexity), true

	case "Invoice.otherPremiumRemarks":
		if e.complexity.Invoice.OtherPremiumRemarks == nil {
			break
		}

		return e.complexity.Invoice.OtherPremiumRemarks(childComplexity), true

	case "Invoice.qcType":
		if e.complexity.Invoice.QcType == nil {
			break
		}

		return e.complexity.Invoice.QcType(childComplexity), true

	case "Invoice.RentalAddendumRemarks":
		if e.complexity.Invoice.RentalAddendumRemarks == nil {
			break
		}

		return e.complexity.Invoice.RentalAddendumRemarks(childComplexity), true

	case "Invoice.rushRemarks":
		if e.complexity.Invoice.RushRemarks == nil {
			break
		}

		return e.complexity.Invoice.RushRemarks(childComplexity), true

	case "Invoice.superRushRemarks":
		if e.complexity.Invoice.SuperRushRemarks == nil {
			break
		}

		return e.complexity.Invoice.SuperRushRemarks(childComplexity), true

	case "Invoice.type":
		if e.complexity.Invoice.Type == nil {
			break
		}

		return e.complexity.Invoice.Type(childComplexity), true

	case "InvoiceRequestHistory.address":
		if e.complexity.InvoiceRequestHistory.Address == nil {
			break
		}

		return e.complexity.InvoiceRequestHistory.Address(childComplexity), true

	case "InvoiceRequestHistory.company":
		if e.complexity.InvoiceRequestHistory.Company == nil {
			break
		}

		return e.complexity.InvoiceRequestHistory.Company(childComplexity), true

	case "InvoiceRequestHistory.dateRequested":
		if e.complexity.InvoiceRequestHistory.DateRequested == nil {
			break
		}

		return e.complexity.InvoiceRequestHistory.DateRequested(childComplexity), true

	case "InvoiceRequestHistory.id":
		if e.complexity.InvoiceRequestHistory.ID == nil {
			break
		}

		return e.complexity.InvoiceRequestHistory.ID(childComplexity), true

	case "InvoiceRequestHistory.orderNumber":
		if e.complexity.InvoiceRequestHistory.OrderNumber == nil {
			break
		}

		return e.complexity.InvoiceRequestHistory.OrderNumber(childComplexity), true

	case "InvoiceRequestHistory.remarks":
		if e.complexity.InvoiceRequestHistory.Remarks == nil {
			break
		}

		return e.complexity.InvoiceRequestHistory.Remarks(childComplexity), true

	case "InvoiceRequestHistory.status":
		if e.complexity.InvoiceRequestHistory.Status == nil {
			break
		}

		return e.complexity.InvoiceRequestHistory.Status(childComplexity), true

	case "InvoiceRequestHistoryResult.results":
		if e.complexity.InvoiceRequestHistoryResult.Results == nil {
			break
		}

		return e.complexity.InvoiceRequestHistoryResult.Results(childComplexity), true

	case "InvoiceRequestHistoryResult.totalCount":
		if e.complexity.InvoiceRequestHistoryResult.TotalCount == nil {
			break
		}

		return e.complexity.InvoiceRequestHistoryResult.TotalCount(childComplexity), true

	case "InvoiceRequestResult.results":
		if e.complexity.InvoiceRequestResult.Results == nil {
			break
		}

		return e.complexity.InvoiceRequestResult.Results(childComplexity), true

	case "InvoiceRequestResult.totalCount":
		if e.complexity.InvoiceRequestResult.TotalCount == nil {
			break
		}

		return e.complexity.InvoiceRequestResult.TotalCount(childComplexity), true

	case "Log.action":
		if e.complexity.Log.Action == nil {
			break
		}

		return e.complexity.Log.Action(childComplexity), true

	case "Log.datetime":
		if e.complexity.Log.Datetime == nil {
			break
		}

		return e.complexity.Log.Datetime(childComplexity), true

	case "Log.modifiedBy":
		if e.complexity.Log.ModifiedBy == nil {
			break
		}

		return e.complexity.Log.ModifiedBy(childComplexity), true

	case "Log.value":
		if e.complexity.Log.Value == nil {
			break
		}

		return e.complexity.Log.Value(childComplexity), true

	case "LoginLog.datetime":
		if e.complexity.LoginLog.Datetime == nil {
			break
		}

		return e.complexity.LoginLog.Datetime(childComplexity), true

	case "LoginLog.ipAddress":
		if e.complexity.LoginLog.IPAddress == nil {
			break
		}

		return e.complexity.LoginLog.IPAddress(childComplexity), true

	case "LoginLog.username":
		if e.complexity.LoginLog.Username == nil {
			break
		}

		return e.complexity.LoginLog.Username(childComplexity), true

	case "LoginLogResult.results":
		if e.complexity.LoginLogResult.Results == nil {
			break
		}

		return e.complexity.LoginLogResult.Results(childComplexity), true

	case "LoginLogResult.totalCount":
		if e.complexity.LoginLogResult.TotalCount == nil {
			break
		}

		return e.complexity.LoginLogResult.TotalCount(childComplexity), true

	case "Mutation.addCreditLedger":
		if e.complexity.Mutation.AddCreditLedger == nil {
			break
		}

		args, err := ec.field_Mutation_addCreditLedger_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCreditLedger(childComplexity, args["input"].(models.AddCreditLedgerInput)), true

	case "Mutation.cancelInvoice":
		if e.complexity.Mutation.CancelInvoice == nil {
			break
		}

		args, err := ec.field_Mutation_cancelInvoice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelInvoice(childComplexity, args["id"].(string), args["reason"].(*string)), true

	case "Mutation.continueSession":
		if e.complexity.Mutation.ContinueSession == nil {
			break
		}

		args, err := ec.field_Mutation_continueSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContinueSession(childComplexity, args["userID"].(string)), true

	case "Mutation.createBillingExcel":
		if e.complexity.Mutation.CreateBillingExcel == nil {
			break
		}

		args, err := ec.field_Mutation_createBillingExcel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBillingExcel(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAccount":
		if e.complexity.Mutation.DeleteAccount == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAccount(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAnnouncement":
		if e.complexity.Mutation.DeleteAnnouncement == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAnnouncement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAnnouncement(childComplexity, args["id"].(string)), true

	case "Mutation.deleteBilling":
		if e.complexity.Mutation.DeleteBilling == nil {
			break
		}

		args, err := ec.field_Mutation_deleteBilling_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBilling(childComplexity, args["id"].(string)), true

	case "Mutation.deleteComment":
		if e.complexity.Mutation.DeleteComment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteComment(childComplexity, args["id"].(string)), true

	case "Mutation.deleteCompany":
		if e.complexity.Mutation.DeleteCompany == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCompany(childComplexity, args["id"].(string)), true

	case "Mutation.deleteEmailTemplate":
		if e.complexity.Mutation.DeleteEmailTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEmailTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEmailTemplate(childComplexity, args["id"].(string)), true

	case "Mutation.deleteHeader":
		if e.complexity.Mutation.DeleteHeader == nil {
			break
		}

		args, err := ec.field_Mutation_deleteHeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteHeader(childComplexity, args["id"].(string)), true

	case "Mutation.deleteIformGrid":
		if e.complexity.Mutation.DeleteIformGrid == nil {
			break
		}

		args, err := ec.field_Mutation_deleteIformGrid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteIformGrid(childComplexity, args["id"].(string)), true

	case "Mutation.deleteInstruction":
		if e.complexity.Mutation.DeleteInstruction == nil {
			break
		}

		args, err := ec.field_Mutation_deleteInstruction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteInstruction(childComplexity, args["id"].(string)), true

	case "Mutation.deletePermissionGroup":
		if e.complexity.Mutation.DeletePermissionGroup == nil {
			break
		}

		args, err := ec.field_Mutation_deletePermissionGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePermissionGroup(childComplexity, args["id"].(string)), true

	case "Mutation.deletePipelineComparable":
		if e.complexity.Mutation.DeletePipelineComparable == nil {
			break
		}

		args, err := ec.field_Mutation_deletePipelineComparable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePipelineComparable(childComplexity, args["id"].(string)), true

	case "Mutation.deletePipelineDoc":
		if e.complexity.Mutation.DeletePipelineDoc == nil {
			break
		}

		args, err := ec.field_Mutation_deletePipelineDoc_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePipelineDoc(childComplexity, args["id"].(string)), true

	case "Mutation.deletePipelinePhoto":
		if e.complexity.Mutation.DeletePipelinePhoto == nil {
			break
		}

		args, err := ec.field_Mutation_deletePipelinePhoto_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePipelinePhoto(childComplexity, args["id"].(string)), true

	case "Mutation.deleteProfileDoc":
		if e.complexity.Mutation.DeleteProfileDoc == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProfileDoc_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProfileDoc(childComplexity, args["id"].(string)), true

	case "Mutation.deleteReview":
		if e.complexity.Mutation.DeleteReview == nil {
			break
		}

		args, err := ec.field_Mutation_deleteReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteReview(childComplexity, args["id"].(string)), true

	case "Mutation.forgetPassword":
		if e.complexity.Mutation.ForgetPassword == nil {
			break
		}

		args, err := ec.field_Mutation_forgetPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ForgetPassword(childComplexity, args["email"].(string)), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["email"].(string), args["password"].(string)), true

	case "Mutation.registerUser":
		if e.complexity.Mutation.RegisterUser == nil {
			break
		}

		args, err := ec.field_Mutation_registerUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterUser(childComplexity, args["input"].(models.RegisterInput)), true

	case "Mutation.resetPassword":
		if e.complexity.Mutation.ResetPassword == nil {
			break
		}

		args, err := ec.field_Mutation_resetPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetPassword(childComplexity, args["token"].(string), args["newPassword"].(string)), true

	case "Mutation.saveAccount":
		if e.complexity.Mutation.SaveAccount == nil {
			break
		}

		args, err := ec.field_Mutation_saveAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveAccount(childComplexity, args["input"].(models.AccountInput)), true

	case "Mutation.saveAnnouncement":
		if e.complexity.Mutation.SaveAnnouncement == nil {
			break
		}

		args, err := ec.field_Mutation_saveAnnouncement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveAnnouncement(childComplexity, args["input"].(models.AnnouncementInput)), true

	case "Mutation.saveBilling":
		if e.complexity.Mutation.SaveBilling == nil {
			break
		}

		args, err := ec.field_Mutation_saveBilling_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveBilling(childComplexity, args["input"].(models.SaveBillingInput)), true

	case "Mutation.saveComment":
		if e.complexity.Mutation.SaveComment == nil {
			break
		}

		args, err := ec.field_Mutation_saveComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveComment(childComplexity, args["input"].(models.CommentInput)), true

	case "Mutation.saveCompany":
		if e.complexity.Mutation.SaveCompany == nil {
			break
		}

		args, err := ec.field_Mutation_saveCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveCompany(childComplexity, args["input"].(models.CompanyInput)), true

	case "Mutation.saveCredit":
		if e.complexity.Mutation.SaveCredit == nil {
			break
		}

		args, err := ec.field_Mutation_saveCredit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveCredit(childComplexity, args["input"].(models.SaveCreditInput)), true

	case "Mutation.saveEmailTemplate":
		if e.complexity.Mutation.SaveEmailTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_saveEmailTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveEmailTemplate(childComplexity, args["input"].(models.SaveEmailTemplateInput)), true

	case "Mutation.saveHeader":
		if e.complexity.Mutation.SaveHeader == nil {
			break
		}

		args, err := ec.field_Mutation_saveHeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveHeader(childComplexity, args["name"].(string)), true

	case "Mutation.saveHeaderDetail":
		if e.complexity.Mutation.SaveHeaderDetail == nil {
			break
		}

		args, err := ec.field_Mutation_saveHeaderDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveHeaderDetail(childComplexity, args["parentId"].(string), args["name"].(string)), true

	case "Mutation.saveIformGrid":
		if e.complexity.Mutation.SaveIformGrid == nil {
			break
		}

		args, err := ec.field_Mutation_saveIformGrid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveIformGrid(childComplexity, args["pipelineId"].(string), args["input"].(models.SaveIformGridInput)), true

	case "Mutation.saveInstruction":
		if e.complexity.Mutation.SaveInstruction == nil {
			break
		}

		args, err := ec.field_Mutation_saveInstruction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveInstruction(childComplexity, args["input"].(models.SaveInstructionInput)), true

	case "Mutation.saveInvoice":
		if e.complexity.Mutation.SaveInvoice == nil {
			break
		}

		args, err := ec.field_Mutation_saveInvoice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveInvoice(childComplexity, args["input"].(models.SaveInvoiceInput)), true

	case "Mutation.savePermissionGroup":
		if e.complexity.Mutation.SavePermissionGroup == nil {
			break
		}

		args, err := ec.field_Mutation_savePermissionGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePermissionGroup(childComplexity, args["input"].(models.PermissionGroupInput)), true

	case "Mutation.savePipeline":
		if e.complexity.Mutation.SavePipeline == nil {
			break
		}

		args, err := ec.field_Mutation_savePipeline_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePipeline(childComplexity, args["input"].(models.PipelineInput)), true

	case "Mutation.savePipelineComparable":
		if e.complexity.Mutation.SavePipelineComparable == nil {
			break
		}

		args, err := ec.field_Mutation_savePipelineComparable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePipelineComparable(childComplexity, args["pipelineId"].(string), args["input"].(models.SavePipelineComparableInput)), true

	case "Mutation.savePipelineDoc":
		if e.complexity.Mutation.SavePipelineDoc == nil {
			break
		}

		args, err := ec.field_Mutation_savePipelineDoc_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePipelineDoc(childComplexity, args["pipelineId"].(string), args["input"].(models.PipelineDocInput)), true

	case "Mutation.savePipelineNote":
		if e.complexity.Mutation.SavePipelineNote == nil {
			break
		}

		args, err := ec.field_Mutation_savePipelineNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePipelineNote(childComplexity, args["pipelineId"].(string), args["input"].(models.SavePipelineNoteInput)), true

	case "Mutation.savePipelinePhoto":
		if e.complexity.Mutation.SavePipelinePhoto == nil {
			break
		}

		args, err := ec.field_Mutation_savePipelinePhoto_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePipelinePhoto(childComplexity, args["pipelineId"].(string), args["input"].(models.PipelinePhotoInput)), true

	case "Mutation.savePipelineQualityControl":
		if e.complexity.Mutation.SavePipelineQualityControl == nil {
			break
		}

		args, err := ec.field_Mutation_savePipelineQualityControl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePipelineQualityControl(childComplexity, args["pipelineId"].(string), args["message"].(string)), true

	case "Mutation.savePipelineQualityControlAndNote":
		if e.complexity.Mutation.SavePipelineQualityControlAndNote == nil {
			break
		}

		args, err := ec.field_Mutation_savePipelineQualityControlAndNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SavePipelineQualityControlAndNote(childComplexity, args["pipelineId"].(string), args["input"].(models.SavePipelineQualityControlAndNoteInput)), true

	case "Mutation.saveProfileDoc":
		if e.complexity.Mutation.SaveProfileDoc == nil {
			break
		}

		args, err := ec.field_Mutation_saveProfileDoc_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveProfileDoc(childComplexity, args["input"].(models.ProfileDocInput)), true

	case "Mutation.saveQualityControl":
		if e.complexity.Mutation.SaveQualityControl == nil {
			break
		}

		args, err := ec.field_Mutation_saveQualityControl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveQualityControl(childComplexity, args["pipelineID"].(string)), true

	case "Mutation.saveRequest":
		if e.complexity.Mutation.SaveRequest == nil {
			break
		}

		args, err := ec.field_Mutation_saveRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveRequest(childComplexity, args["pipelineId"].(string)), true

	case "Mutation.saveReview":
		if e.complexity.Mutation.SaveReview == nil {
			break
		}

		args, err := ec.field_Mutation_saveReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveReview(childComplexity, args["input"].(models.SaveReviewInput)), true

	case "Mutation.saveSession":
		if e.complexity.Mutation.SaveSession == nil {
			break
		}

		args, err := ec.field_Mutation_saveSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveSession(childComplexity, args["userId"].(string), args["invoiceDate"].(string)), true

	case "Mutation.saveUser":
		if e.complexity.Mutation.SaveUser == nil {
			break
		}

		args, err := ec.field_Mutation_saveUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveUser(childComplexity, args["input"].(models.SaveUserInput)), true

	case "Mutation.setAdjustmentDefault":
		if e.complexity.Mutation.SetAdjustmentDefault == nil {
			break
		}

		return e.complexity.Mutation.SetAdjustmentDefault(childComplexity), true

	case "Mutation.setCommentDefault":
		if e.complexity.Mutation.SetCommentDefault == nil {
			break
		}

		return e.complexity.Mutation.SetCommentDefault(childComplexity), true

	case "Mutation.stopSession":
		if e.complexity.Mutation.StopSession == nil {
			break
		}

		args, err := ec.field_Mutation_stopSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StopSession(childComplexity, args["userId"].(string)), true

	case "Mutation.submitPipelinePhoto":
		if e.complexity.Mutation.SubmitPipelinePhoto == nil {
			break
		}

		args, err := ec.field_Mutation_submitPipelinePhoto_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitPipelinePhoto(childComplexity, args["id"].(string), args["IsSubmitPipelinePhoto"].(bool)), true

	case "Mutation.updateAccount":
		if e.complexity.Mutation.UpdateAccount == nil {
			break
		}

		args, err := ec.field_Mutation_updateAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAccount(childComplexity, args["id"].(string), args["input"].(models.AccountInput)), true

	case "Mutation.updateAdjustment":
		if e.complexity.Mutation.UpdateAdjustment == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdjustment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdjustment(childComplexity, args["id"].(string), args["value"].(float64)), true

	case "Mutation.updateAnnouncement":
		if e.complexity.Mutation.UpdateAnnouncement == nil {
			break
		}

		args, err := ec.field_Mutation_updateAnnouncement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAnnouncement(childComplexity, args["id"].(string), args["input"].(models.AnnouncementInput)), true

	case "Mutation.updateBilling":
		if e.complexity.Mutation.UpdateBilling == nil {
			break
		}

		args, err := ec.field_Mutation_updateBilling_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBilling(childComplexity, args["id"].(string), args["input"].(models.UpdateBillingInput)), true

	case "Mutation.updateComment":
		if e.complexity.Mutation.UpdateComment == nil {
			break
		}

		args, err := ec.field_Mutation_updateComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateComment(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.updateCompany":
		if e.complexity.Mutation.UpdateCompany == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompany(childComplexity, args["id"].(string), args["input"].(models.CompanyInput)), true

	case "Mutation.updateDefault":
		if e.complexity.Mutation.UpdateDefault == nil {
			break
		}

		args, err := ec.field_Mutation_updateDefault_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDefault(childComplexity, args["input"].(models.DefaultInput)), true

	case "Mutation.updateEmailTemplate":
		if e.complexity.Mutation.UpdateEmailTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_updateEmailTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEmailTemplate(childComplexity, args["id"].(string), args["input"].(models.UpdateEmailTemplateInput)), true

	case "Mutation.updateHeader":
		if e.complexity.Mutation.UpdateHeader == nil {
			break
		}

		args, err := ec.field_Mutation_updateHeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateHeader(childComplexity, args["id"].(string), args["name"].(string)), true

	case "Mutation.updateIform":
		if e.complexity.Mutation.UpdateIform == nil {
			break
		}

		args, err := ec.field_Mutation_updateIform_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIform(childComplexity, args["pipelineId"].(string), args["input"].(models.UpdateIformInput)), true

	case "Mutation.updateIformTemp":
		if e.complexity.Mutation.UpdateIformTemp == nil {
			break
		}

		args, err := ec.field_Mutation_updateIformTemp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateIformTemp(childComplexity, args["pipelineId"].(string), args["input"].(models.UpdateIformTempInput)), true

	case "Mutation.updateInvoice":
		if e.complexity.Mutation.UpdateInvoice == nil {
			break
		}

		args, err := ec.field_Mutation_updateInvoice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateInvoice(childComplexity, args["id"].(string), args["input"].(models.UpdateInvoiceInput)), true

	case "Mutation.updatePermissionGroup":
		if e.complexity.Mutation.UpdatePermissionGroup == nil {
			break
		}

		args, err := ec.field_Mutation_updatePermissionGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePermissionGroup(childComplexity, args["id"].(string), args["input"].(models.PermissionGroupInput)), true

	case "Mutation.updatePipeline":
		if e.complexity.Mutation.UpdatePipeline == nil {
			break
		}

		args, err := ec.field_Mutation_updatePipeline_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePipeline(childComplexity, args["id"].(string), args["input"].(models.UpdatePipelineInput)), true

	case "Mutation.updatePipelineComparable":
		if e.complexity.Mutation.UpdatePipelineComparable == nil {
			break
		}

		args, err := ec.field_Mutation_updatePipelineComparable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePipelineComparable(childComplexity, args["id"].(string), args["mls"].(string)), true

	case "Mutation.updatePipelineNeighborhood":
		if e.complexity.Mutation.UpdatePipelineNeighborhood == nil {
			break
		}

		args, err := ec.field_Mutation_updatePipelineNeighborhood_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePipelineNeighborhood(childComplexity, args["pipelineId"].(string), args["input"].(models.UpdatePipelineNeighborhoodInput)), true

	case "Mutation.updatePipelineRepair":
		if e.complexity.Mutation.UpdatePipelineRepair == nil {
			break
		}

		args, err := ec.field_Mutation_updatePipelineRepair_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePipelineRepair(childComplexity, args["pipelineId"].(string), args["input"].(models.UpdatePipelineRepairInput)), true

	case "Mutation.updatePipelineState":
		if e.complexity.Mutation.UpdatePipelineState == nil {
			break
		}

		args, err := ec.field_Mutation_updatePipelineState_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePipelineState(childComplexity, args["input"].(models.UpdatePipelineStateInput)), true

	case "Mutation.updateProfile":
		if e.complexity.Mutation.UpdateProfile == nil {
			break
		}

		args, err := ec.field_Mutation_updateProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProfile(childComplexity, args["input"].(models.ProfileInput)), true

	case "Mutation.updateQcRequest":
		if e.complexity.Mutation.UpdateQcRequest == nil {
			break
		}

		args, err := ec.field_Mutation_updateQcRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateQcRequest(childComplexity, args["id"].(string), args["input"].(models.UpdateQcRequestInput)), true

	case "Mutation.updateQualityControl":
		if e.complexity.Mutation.UpdateQualityControl == nil {
			break
		}

		args, err := ec.field_Mutation_updateQualityControl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateQualityControl(childComplexity, args["id"].(string), args["input"].(models.UpdateQualityControlInput)), true

	case "Mutation.updateRequest":
		if e.complexity.Mutation.UpdateRequest == nil {
			break
		}

		args, err := ec.field_Mutation_updateRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRequest(childComplexity, args["id"].(string), args["input"].(models.UpdateRequestInput)), true

	case "Mutation.updateReview":
		if e.complexity.Mutation.UpdateReview == nil {
			break
		}

		args, err := ec.field_Mutation_updateReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateReview(childComplexity, args["id"].(string), args["input"].(models.UpdateReviewInput)), true

	case "Mutation.updateSession":
		if e.complexity.Mutation.UpdateSession == nil {
			break
		}

		args, err := ec.field_Mutation_updateSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSession(childComplexity, args["id"].(string), args["input"].(models.UpdateSessionInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(string), args["input"].(models.UpdateUserInput)), true

	case "Mutation.verifyPaypalTransaction":
		if e.complexity.Mutation.VerifyPaypalTransaction == nil {
			break
		}

		args, err := ec.field_Mutation_verifyPaypalTransaction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VerifyPaypalTransaction(childComplexity, args["paypalOrderId"].(string), args["billingId"].(*string)), true

	case "OrderAnalytics.client":
		if e.complexity.OrderAnalytics.Client == nil {
			break
		}

		return e.complexity.OrderAnalytics.Client(childComplexity), true

	case "OrderAnalytics.month":
		if e.complexity.OrderAnalytics.Month == nil {
			break
		}

		return e.complexity.OrderAnalytics.Month(childComplexity), true

	case "OrderAnalytics.paid":
		if e.complexity.OrderAnalytics.Paid == nil {
			break
		}

		return e.complexity.OrderAnalytics.Paid(childComplexity), true

	case "OrderAnalytics.unpaid":
		if e.complexity.OrderAnalytics.Unpaid == nil {
			break
		}

		return e.complexity.OrderAnalytics.Unpaid(childComplexity), true

	case "OrderSubmit.coordinatorName":
		if e.complexity.OrderSubmit.CoordinatorName == nil {
			break
		}

		return e.complexity.OrderSubmit.CoordinatorName(childComplexity), true

	case "OrderSubmit.count":
		if e.complexity.OrderSubmit.Count == nil {
			break
		}

		return e.complexity.OrderSubmit.Count(childComplexity), true

	case "OrderSubmit.month":
		if e.complexity.OrderSubmit.Month == nil {
			break
		}

		return e.complexity.OrderSubmit.Month(childComplexity), true

	case "OrderSubmit.year":
		if e.complexity.OrderSubmit.Year == nil {
			break
		}

		return e.complexity.OrderSubmit.Year(childComplexity), true

	case "PermissionGroup.id":
		if e.complexity.PermissionGroup.ID == nil {
			break
		}

		return e.complexity.PermissionGroup.ID(childComplexity), true

	case "PermissionGroup.name":
		if e.complexity.PermissionGroup.Name == nil {
			break
		}

		return e.complexity.PermissionGroup.Name(childComplexity), true

	case "PermissionGroup.permissions":
		if e.complexity.PermissionGroup.Permissions == nil {
			break
		}

		return e.complexity.PermissionGroup.Permissions(childComplexity), true

	case "PermissionGroupResult.results":
		if e.complexity.PermissionGroupResult.Results == nil {
			break
		}

		return e.complexity.PermissionGroupResult.Results(childComplexity), true

	case "PermissionGroupResult.totalCount":
		if e.complexity.PermissionGroupResult.TotalCount == nil {
			break
		}

		return e.complexity.PermissionGroupResult.TotalCount(childComplexity), true

	case "Pipeline.address":
		if e.complexity.Pipeline.Address == nil {
			break
		}

		return e.complexity.Pipeline.Address(childComplexity), true

	case "Pipeline.assign":
		if e.complexity.Pipeline.Assign == nil {
			break
		}

		return e.complexity.Pipeline.Assign(childComplexity), true

	case "Pipeline.assignDateTime":
		if e.complexity.Pipeline.AssignDateTime == nil {
			break
		}

		return e.complexity.Pipeline.AssignDateTime(childComplexity), true

	case "Pipeline.assignId":
		if e.complexity.Pipeline.AssignID == nil {
			break
		}

		return e.complexity.Pipeline.AssignID(childComplexity), true

	case "Pipeline.assignedHistory":
		if e.complexity.Pipeline.AssignedHistory == nil {
			break
		}

		return e.complexity.Pipeline.AssignedHistory(childComplexity), true

	case "Pipeline.authorId":
		if e.complexity.Pipeline.AuthorID == nil {
			break
		}

		return e.complexity.Pipeline.AuthorID(childComplexity), true

	case "Pipeline.authorName":
		if e.complexity.Pipeline.AuthorName == nil {
			break
		}

		return e.complexity.Pipeline.AuthorName(childComplexity), true

	case "Pipeline.cancelRemarks":
		if e.complexity.Pipeline.CancelRemarks == nil {
			break
		}

		return e.complexity.Pipeline.CancelRemarks(childComplexity), true

	case "Pipeline.company":
		if e.complexity.Pipeline.Company == nil {
			break
		}

		return e.complexity.Pipeline.Company(childComplexity), true

	case "Pipeline.companyId":
		if e.complexity.Pipeline.CompanyID == nil {
			break
		}

		return e.complexity.Pipeline.CompanyID(childComplexity), true

	case "Pipeline.country":
		if e.complexity.Pipeline.Country == nil {
			break
		}

		return e.complexity.Pipeline.Country(childComplexity), true

	case "Pipeline.county":
		if e.complexity.Pipeline.County == nil {
			break
		}

		return e.complexity.Pipeline.County(childComplexity), true

	case "Pipeline.createdDateTime":
		if e.complexity.Pipeline.CreatedDateTime == nil {
			break
		}

		return e.complexity.Pipeline.CreatedDateTime(childComplexity), true

	case "Pipeline.dueDateTime":
		if e.complexity.Pipeline.DueDateTime == nil {
			break
		}

		return e.complexity.Pipeline.DueDateTime(childComplexity), true

	case "Pipeline.holdDateTime":
		if e.complexity.Pipeline.HoldDateTime == nil {
			break
		}

		return e.complexity.Pipeline.HoldDateTime(childComplexity), true

	case "Pipeline.holdRemarks":
		if e.complexity.Pipeline.HoldRemarks == nil {
			break
		}

		return e.complexity.Pipeline.HoldRemarks(childComplexity), true

	case "Pipeline.id":
		if e.complexity.Pipeline.ID == nil {
			break
		}

		return e.complexity.Pipeline.ID(childComplexity), true

	case "Pipeline.ifillProcessModifiedDate":
		if e.complexity.Pipeline.IfillProcessModifiedDate == nil {
			break
		}

		return e.complexity.Pipeline.IfillProcessModifiedDate(childComplexity), true

	case "Pipeline.isBilled":
		if e.complexity.Pipeline.IsBilled == nil {
			break
		}

		return e.complexity.Pipeline.IsBilled(childComplexity), true

	case "Pipeline.isHold":
		if e.complexity.Pipeline.IsHold == nil {
			break
		}

		return e.complexity.Pipeline.IsHold(childComplexity), true

	case "Pipeline.isInitialBpo":
		if e.complexity.Pipeline.IsInitialBpo == nil {
			break
		}

		return e.complexity.Pipeline.IsInitialBpo(childComplexity), true

	case "Pipeline.isInspection":
		if e.complexity.Pipeline.IsInspection == nil {
			break
		}

		return e.complexity.Pipeline.IsInspection(childComplexity), true

	case "Pipeline.isProcessIfill":
		if e.complexity.Pipeline.IsProcessIfill == nil {
			break
		}

		return e.complexity.Pipeline.IsProcessIfill(childComplexity), true

	case "Pipeline.isProcessIform":
		if e.complexity.Pipeline.IsProcessIform == nil {
			break
		}

		return e.complexity.Pipeline.IsProcessIform(childComplexity), true

	case "Pipeline.isProcessReview":
		if e.complexity.Pipeline.IsProcessReview == nil {
			break
		}

		return e.complexity.Pipeline.IsProcessReview(childComplexity), true

	case "Pipeline.isQc":
		if e.complexity.Pipeline.IsQc == nil {
			break
		}

		return e.complexity.Pipeline.IsQc(childComplexity), true

	case "Pipeline.isRushOrder":
		if e.complexity.Pipeline.IsRushOrder == nil {
			break
		}

		return e.complexity.Pipeline.IsRushOrder(childComplexity), true

	case "Pipeline.isSuperRush":
		if e.complexity.Pipeline.IsSuperRush == nil {
			break
		}

		return e.complexity.Pipeline.IsSuperRush(childComplexity), true

	case "Pipeline.isSyncedToTurboBpo":
		if e.complexity.Pipeline.IsSyncedToTurboBpo == nil {
			break
		}

		return e.complexity.Pipeline.IsSyncedToTurboBpo(childComplexity), true

	case "Pipeline.lastUpdateTime":
		if e.complexity.Pipeline.LastUpdateTime == nil {
			break
		}

		return e.complexity.Pipeline.LastUpdateTime(childComplexity), true

	case "Pipeline.location":
		if e.complexity.Pipeline.Location == nil {
			break
		}

		return e.complexity.Pipeline.Location(childComplexity), true

	case "Pipeline.mls":
		if e.complexity.Pipeline.Mls == nil {
			break
		}

		return e.complexity.Pipeline.Mls(childComplexity), true

	case "Pipeline.objective":
		if e.complexity.Pipeline.Objective == nil {
			break
		}

		return e.complexity.Pipeline.Objective(childComplexity), true

	case "Pipeline.orderFee":
		if e.complexity.Pipeline.OrderFee == nil {
			break
		}

		return e.complexity.Pipeline.OrderFee(childComplexity), true

	case "Pipeline.orderNumber":
		if e.complexity.Pipeline.OrderNumber == nil {
			break
		}

		return e.complexity.Pipeline.OrderNumber(childComplexity), true

	case "Pipeline.orderType":
		if e.complexity.Pipeline.OrderType == nil {
			break
		}

		return e.complexity.Pipeline.OrderType(childComplexity), true

	case "Pipeline.otherCompany":
		if e.complexity.Pipeline.OtherCompany == nil {
			break
		}

		return e.complexity.Pipeline.OtherCompany(childComplexity), true

	case "Pipeline.pauseDateTime":
		if e.complexity.Pipeline.PauseDateTime == nil {
			break
		}

		return e.complexity.Pipeline.PauseDateTime(childComplexity), true

	case "Pipeline.pipelineDocTotal":
		if e.complexity.Pipeline.PipelineDocTotal == nil {
			break
		}

		return e.complexity.Pipeline.PipelineDocTotal(childComplexity), true

	case "Pipeline.pipelineHistory":
		if e.complexity.Pipeline.PipelineHistory == nil {
			break
		}

		return e.complexity.Pipeline.PipelineHistory(childComplexity), true

	case "Pipeline.pipelineNoteTotal":
		if e.complexity.Pipeline.PipelineNoteTotal == nil {
			break
		}

		return e.complexity.Pipeline.PipelineNoteTotal(childComplexity), true

	case "Pipeline.pipelinePhotoTotal":
		if e.complexity.Pipeline.PipelinePhotoTotal == nil {
			break
		}

		return e.complexity.Pipeline.PipelinePhotoTotal(childComplexity), true

	case "Pipeline.pipelineQualityControlTotal":
		if e.complexity.Pipeline.PipelineQualityControlTotal == nil {
			break
		}

		return e.complexity.Pipeline.PipelineQualityControlTotal(childComplexity), true

	case "Pipeline.premiumCompany":
		if e.complexity.Pipeline.PremiumCompany == nil {
			break
		}

		return e.complexity.Pipeline.PremiumCompany(childComplexity), true

	case "Pipeline.premiumCompanyId":
		if e.complexity.Pipeline.PremiumCompanyID == nil {
			break
		}

		return e.complexity.Pipeline.PremiumCompanyID(childComplexity), true

	case "Pipeline.processIformModifiedDate":
		if e.complexity.Pipeline.ProcessIformModifiedDate == nil {
			break
		}

		return e.complexity.Pipeline.ProcessIformModifiedDate(childComplexity), true

	case "Pipeline.processReviewModifiedDate":
		if e.complexity.Pipeline.ProcessReviewModifiedDate == nil {
			break
		}

		return e.complexity.Pipeline.ProcessReviewModifiedDate(childComplexity), true

	case "Pipeline.ratingFeedback":
		if e.complexity.Pipeline.RatingFeedback == nil {
			break
		}

		return e.complexity.Pipeline.RatingFeedback(childComplexity), true

	case "Pipeline.ratingOverAll":
		if e.complexity.Pipeline.RatingOverAll == nil {
			break
		}

		return e.complexity.Pipeline.RatingOverAll(childComplexity), true

	case "Pipeline.ratingQuality":
		if e.complexity.Pipeline.RatingQuality == nil {
			break
		}

		return e.complexity.Pipeline.RatingQuality(childComplexity), true

	case "Pipeline.ratingTimeliness":
		if e.complexity.Pipeline.RatingTimeliness == nil {
			break
		}

		return e.complexity.Pipeline.RatingTimeliness(childComplexity), true

	case "Pipeline.status":
		if e.complexity.Pipeline.Status == nil {
			break
		}

		return e.complexity.Pipeline.Status(childComplexity), true

	case "Pipeline.totalFee":
		if e.complexity.Pipeline.TotalFee == nil {
			break
		}

		return e.complexity.Pipeline.TotalFee(childComplexity), true

	case "Pipeline.type":
		if e.complexity.Pipeline.Type == nil {
			break
		}

		return e.complexity.Pipeline.Type(childComplexity), true

	case "Pipeline.unHoldRemarks":
		if e.complexity.Pipeline.UnHoldRemarks == nil {
			break
		}

		return e.complexity.Pipeline.UnHoldRemarks(childComplexity), true

	case "Pipeline.zipCode":
		if e.complexity.Pipeline.ZipCode == nil {
			break
		}

		return e.complexity.Pipeline.ZipCode(childComplexity), true

	case "PipelineAssignedHistory.action":
		if e.complexity.PipelineAssignedHistory.Action == nil {
			break
		}

		return e.complexity.PipelineAssignedHistory.Action(childComplexity), true

	case "PipelineAssignedHistory.assignedBy":
		if e.complexity.PipelineAssignedHistory.AssignedBy == nil {
			break
		}

		return e.complexity.PipelineAssignedHistory.AssignedBy(childComplexity), true

	case "PipelineAssignedHistory.assignedByID":
		if e.complexity.PipelineAssignedHistory.AssignedByID == nil {
			break
		}

		return e.complexity.PipelineAssignedHistory.AssignedByID(childComplexity), true

	case "PipelineAssignedHistory.assignee":
		if e.complexity.PipelineAssignedHistory.Assignee == nil {
			break
		}

		return e.complexity.PipelineAssignedHistory.Assignee(childComplexity), true

	case "PipelineAssignedHistory.assigneeID":
		if e.complexity.PipelineAssignedHistory.AssigneeID == nil {
			break
		}

		return e.complexity.PipelineAssignedHistory.AssigneeID(childComplexity), true

	case "PipelineAssignedHistory.logDateTime":
		if e.complexity.PipelineAssignedHistory.LogDateTime == nil {
			break
		}

		return e.complexity.PipelineAssignedHistory.LogDateTime(childComplexity), true

	case "PipelineAssignedHistory.modifiedBy":
		if e.complexity.PipelineAssignedHistory.ModifiedBy == nil {
			break
		}

		return e.complexity.PipelineAssignedHistory.ModifiedBy(childComplexity), true

	case "PipelineComparable.id":
		if e.complexity.PipelineComparable.ID == nil {
			break
		}

		return e.complexity.PipelineComparable.ID(childComplexity), true

	case "PipelineComparable.mls":
		if e.complexity.PipelineComparable.Mls == nil {
			break
		}

		return e.complexity.PipelineComparable.Mls(childComplexity), true

	case "PipelineComparable.order":
		if e.complexity.PipelineComparable.Order == nil {
			break
		}

		return e.complexity.PipelineComparable.Order(childComplexity), true

	case "PipelineComparable.pipelineId":
		if e.complexity.PipelineComparable.PipelineID == nil {
			break
		}

		return e.complexity.PipelineComparable.PipelineID(childComplexity), true

	case "PipelineComparable.status":
		if e.complexity.PipelineComparable.Status == nil {
			break
		}

		return e.complexity.PipelineComparable.Status(childComplexity), true

	case "PipelineComparableResult.results":
		if e.complexity.PipelineComparableResult.Results == nil {
			break
		}

		return e.complexity.PipelineComparableResult.Results(childComplexity), true

	case "PipelineComparableResult.totalCount":
		if e.complexity.PipelineComparableResult.TotalCount == nil {
			break
		}

		return e.complexity.PipelineComparableResult.TotalCount(childComplexity), true

	case "PipelineDoc.createdBy":
		if e.complexity.PipelineDoc.CreatedBy == nil {
			break
		}

		return e.complexity.PipelineDoc.CreatedBy(childComplexity), true

	case "PipelineDoc.createdDateTime":
		if e.complexity.PipelineDoc.CreatedDateTime == nil {
			break
		}

		return e.complexity.PipelineDoc.CreatedDateTime(childComplexity), true

	case "PipelineDoc.fileName":
		if e.complexity.PipelineDoc.FileName == nil {
			break
		}

		return e.complexity.PipelineDoc.FileName(childComplexity), true

	case "PipelineDoc.id":
		if e.complexity.PipelineDoc.ID == nil {
			break
		}

		return e.complexity.PipelineDoc.ID(childComplexity), true

	case "PipelineDoc.type":
		if e.complexity.PipelineDoc.Type == nil {
			break
		}

		return e.complexity.PipelineDoc.Type(childComplexity), true

	case "PipelineDoc.url":
		if e.complexity.PipelineDoc.URL == nil {
			break
		}

		return e.complexity.PipelineDoc.URL(childComplexity), true

	case "PipelineDocResult.results":
		if e.complexity.PipelineDocResult.Results == nil {
			break
		}

		return e.complexity.PipelineDocResult.Results(childComplexity), true

	case "PipelineDocResult.totalCount":
		if e.complexity.PipelineDocResult.TotalCount == nil {
			break
		}

		return e.complexity.PipelineDocResult.TotalCount(childComplexity), true

	case "PipelineHistory.action":
		if e.complexity.PipelineHistory.Action == nil {
			break
		}

		return e.complexity.PipelineHistory.Action(childComplexity), true

	case "PipelineHistory.logDateTime":
		if e.complexity.PipelineHistory.LogDateTime == nil {
			break
		}

		return e.complexity.PipelineHistory.LogDateTime(childComplexity), true

	case "PipelineHistory.modifiedBy":
		if e.complexity.PipelineHistory.ModifiedBy == nil {
			break
		}

		return e.complexity.PipelineHistory.ModifiedBy(childComplexity), true

	case "PipelineHistory.value":
		if e.complexity.PipelineHistory.Value == nil {
			break
		}

		return e.complexity.PipelineHistory.Value(childComplexity), true

	case "PipelineNeighborhood.annualPercentage":
		if e.complexity.PipelineNeighborhood.AnnualPercentage == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.AnnualPercentage(childComplexity), true

	case "PipelineNeighborhood.demand":
		if e.complexity.PipelineNeighborhood.Demand == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.Demand(childComplexity), true

	case "PipelineNeighborhood.distressed":
		if e.complexity.PipelineNeighborhood.Distressed == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.Distressed(childComplexity), true

	case "PipelineNeighborhood.fm":
		if e.complexity.PipelineNeighborhood.Fm == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.Fm(childComplexity), true

	case "PipelineNeighborhood.id":
		if e.complexity.PipelineNeighborhood.ID == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.ID(childComplexity), true

	case "PipelineNeighborhood.isReoDriven":
		if e.complexity.PipelineNeighborhood.IsReoDriven == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.IsReoDriven(childComplexity), true

	case "PipelineNeighborhood.listingsDomAve":
		if e.complexity.PipelineNeighborhood.ListingsDomAve == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.ListingsDomAve(childComplexity), true

	case "PipelineNeighborhood.listingsDomRangeFrom":
		if e.complexity.PipelineNeighborhood.ListingsDomRangeFrom == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.ListingsDomRangeFrom(childComplexity), true

	case "PipelineNeighborhood.listingsDomRangeTo":
		if e.complexity.PipelineNeighborhood.ListingsDomRangeTo == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.ListingsDomRangeTo(childComplexity), true

	case "PipelineNeighborhood.listingsMaxValue":
		if e.complexity.PipelineNeighborhood.ListingsMaxValue == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.ListingsMaxValue(childComplexity), true

	case "PipelineNeighborhood.listingsMedValue":
		if e.complexity.PipelineNeighborhood.ListingsMedValue == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.ListingsMedValue(childComplexity), true

	case "PipelineNeighborhood.listingsMinValue":
		if e.complexity.PipelineNeighborhood.ListingsMinValue == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.ListingsMinValue(childComplexity), true

	case "PipelineNeighborhood.marketTrend":
		if e.complexity.PipelineNeighborhood.MarketTrend == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.MarketTrend(childComplexity), true

	case "PipelineNeighborhood.monthlyPercentage":
		if e.complexity.PipelineNeighborhood.MonthlyPercentage == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.MonthlyPercentage(childComplexity), true

	case "PipelineNeighborhood.ntComments":
		if e.complexity.PipelineNeighborhood.NtComments == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.NtComments(childComplexity), true

	case "PipelineNeighborhood.reo":
		if e.complexity.PipelineNeighborhood.Reo == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.Reo(childComplexity), true

	case "PipelineNeighborhood.salesDomRangeFrom":
		if e.complexity.PipelineNeighborhood.SalesDomRangeFrom == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.SalesDomRangeFrom(childComplexity), true

	case "PipelineNeighborhood.salesDomRangeTo":
		if e.complexity.PipelineNeighborhood.SalesDomRangeTo == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.SalesDomRangeTo(childComplexity), true

	case "PipelineNeighborhood.salesMaxValue":
		if e.complexity.PipelineNeighborhood.SalesMaxValue == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.SalesMaxValue(childComplexity), true

	case "PipelineNeighborhood.salesMedValue":
		if e.complexity.PipelineNeighborhood.SalesMedValue == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.SalesMedValue(childComplexity), true

	case "PipelineNeighborhood.salesMinValue":
		if e.complexity.PipelineNeighborhood.SalesMinValue == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.SalesMinValue(childComplexity), true

	case "PipelineNeighborhood.sixmonthPercentage":
		if e.complexity.PipelineNeighborhood.SixmonthPercentage == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.SixmonthPercentage(childComplexity), true

	case "PipelineNeighborhood.ss":
		if e.complexity.PipelineNeighborhood.Ss == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.Ss(childComplexity), true

	case "PipelineNeighborhood.supply":
		if e.complexity.PipelineNeighborhood.Supply == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.Supply(childComplexity), true

	case "PipelineNeighborhood.totalListings":
		if e.complexity.PipelineNeighborhood.TotalListings == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.TotalListings(childComplexity), true

	case "PipelineNeighborhood.totalSales":
		if e.complexity.PipelineNeighborhood.TotalSales == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.TotalSales(childComplexity), true

	case "PipelineNeighborhood.zntComments":
		if e.complexity.PipelineNeighborhood.ZntComments == nil {
			break
		}

		return e.complexity.PipelineNeighborhood.ZntComments(childComplexity), true

	case "PipelineNote.createdBy":
		if e.complexity.PipelineNote.CreatedBy == nil {
			break
		}

		return e.complexity.PipelineNote.CreatedBy(childComplexity), true

	case "PipelineNote.createdDateTime":
		if e.complexity.PipelineNote.CreatedDateTime == nil {
			break
		}

		return e.complexity.PipelineNote.CreatedDateTime(childComplexity), true

	case "PipelineNote.exteriorRepairDescription1":
		if e.complexity.PipelineNote.ExteriorRepairDescription1 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairDescription1(childComplexity), true

	case "PipelineNote.exteriorRepairDescription10":
		if e.complexity.PipelineNote.ExteriorRepairDescription10 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairDescription10(childComplexity), true

	case "PipelineNote.exteriorRepairDescription2":
		if e.complexity.PipelineNote.ExteriorRepairDescription2 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairDescription2(childComplexity), true

	case "PipelineNote.exteriorRepairDescription3":
		if e.complexity.PipelineNote.ExteriorRepairDescription3 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairDescription3(childComplexity), true

	case "PipelineNote.exteriorRepairDescription4":
		if e.complexity.PipelineNote.ExteriorRepairDescription4 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairDescription4(childComplexity), true

	case "PipelineNote.exteriorRepairDescription5":
		if e.complexity.PipelineNote.ExteriorRepairDescription5 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairDescription5(childComplexity), true

	case "PipelineNote.exteriorRepairDescription6":
		if e.complexity.PipelineNote.ExteriorRepairDescription6 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairDescription6(childComplexity), true

	case "PipelineNote.exteriorRepairDescription7":
		if e.complexity.PipelineNote.ExteriorRepairDescription7 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairDescription7(childComplexity), true

	case "PipelineNote.exteriorRepairDescription8":
		if e.complexity.PipelineNote.ExteriorRepairDescription8 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairDescription8(childComplexity), true

	case "PipelineNote.exteriorRepairDescription9":
		if e.complexity.PipelineNote.ExteriorRepairDescription9 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairDescription9(childComplexity), true

	case "PipelineNote.exteriorRepairPrice1":
		if e.complexity.PipelineNote.ExteriorRepairPrice1 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairPrice1(childComplexity), true

	case "PipelineNote.exteriorRepairPrice10":
		if e.complexity.PipelineNote.ExteriorRepairPrice10 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairPrice10(childComplexity), true

	case "PipelineNote.exteriorRepairPrice2":
		if e.complexity.PipelineNote.ExteriorRepairPrice2 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairPrice2(childComplexity), true

	case "PipelineNote.exteriorRepairPrice3":
		if e.complexity.PipelineNote.ExteriorRepairPrice3 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairPrice3(childComplexity), true

	case "PipelineNote.exteriorRepairPrice4":
		if e.complexity.PipelineNote.ExteriorRepairPrice4 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairPrice4(childComplexity), true

	case "PipelineNote.exteriorRepairPrice5":
		if e.complexity.PipelineNote.ExteriorRepairPrice5 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairPrice5(childComplexity), true

	case "PipelineNote.exteriorRepairPrice6":
		if e.complexity.PipelineNote.ExteriorRepairPrice6 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairPrice6(childComplexity), true

	case "PipelineNote.exteriorRepairPrice7":
		if e.complexity.PipelineNote.ExteriorRepairPrice7 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairPrice7(childComplexity), true

	case "PipelineNote.exteriorRepairPrice8":
		if e.complexity.PipelineNote.ExteriorRepairPrice8 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairPrice8(childComplexity), true

	case "PipelineNote.exteriorRepairPrice9":
		if e.complexity.PipelineNote.ExteriorRepairPrice9 == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairPrice9(childComplexity), true

	case "PipelineNote.exteriorRepairPriceTotal":
		if e.complexity.PipelineNote.ExteriorRepairPriceTotal == nil {
			break
		}

		return e.complexity.PipelineNote.ExteriorRepairPriceTotal(childComplexity), true

	case "PipelineNote.id":
		if e.complexity.PipelineNote.ID == nil {
			break
		}

		return e.complexity.PipelineNote.ID(childComplexity), true

	case "PipelineNote.inspectionNotes":
		if e.complexity.PipelineNote.InspectionNotes == nil {
			break
		}

		return e.complexity.PipelineNote.InspectionNotes(childComplexity), true

	case "PipelineNote.interiorRepairDescription1":
		if e.complexity.PipelineNote.InteriorRepairDescription1 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairDescription1(childComplexity), true

	case "PipelineNote.interiorRepairDescription10":
		if e.complexity.PipelineNote.InteriorRepairDescription10 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairDescription10(childComplexity), true

	case "PipelineNote.interiorRepairDescription2":
		if e.complexity.PipelineNote.InteriorRepairDescription2 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairDescription2(childComplexity), true

	case "PipelineNote.interiorRepairDescription3":
		if e.complexity.PipelineNote.InteriorRepairDescription3 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairDescription3(childComplexity), true

	case "PipelineNote.interiorRepairDescription4":
		if e.complexity.PipelineNote.InteriorRepairDescription4 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairDescription4(childComplexity), true

	case "PipelineNote.interiorRepairDescription5":
		if e.complexity.PipelineNote.InteriorRepairDescription5 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairDescription5(childComplexity), true

	case "PipelineNote.interiorRepairDescription6":
		if e.complexity.PipelineNote.InteriorRepairDescription6 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairDescription6(childComplexity), true

	case "PipelineNote.interiorRepairDescription7":
		if e.complexity.PipelineNote.InteriorRepairDescription7 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairDescription7(childComplexity), true

	case "PipelineNote.interiorRepairDescription8":
		if e.complexity.PipelineNote.InteriorRepairDescription8 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairDescription8(childComplexity), true

	case "PipelineNote.interiorRepairDescription9":
		if e.complexity.PipelineNote.InteriorRepairDescription9 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairDescription9(childComplexity), true

	case "PipelineNote.interiorRepairPrice1":
		if e.complexity.PipelineNote.InteriorRepairPrice1 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairPrice1(childComplexity), true

	case "PipelineNote.interiorRepairPrice10":
		if e.complexity.PipelineNote.InteriorRepairPrice10 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairPrice10(childComplexity), true

	case "PipelineNote.interiorRepairPrice2":
		if e.complexity.PipelineNote.InteriorRepairPrice2 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairPrice2(childComplexity), true

	case "PipelineNote.interiorRepairPrice3":
		if e.complexity.PipelineNote.InteriorRepairPrice3 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairPrice3(childComplexity), true

	case "PipelineNote.interiorRepairPrice4":
		if e.complexity.PipelineNote.InteriorRepairPrice4 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairPrice4(childComplexity), true

	case "PipelineNote.interiorRepairPrice5":
		if e.complexity.PipelineNote.InteriorRepairPrice5 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairPrice5(childComplexity), true

	case "PipelineNote.interiorRepairPrice6":
		if e.complexity.PipelineNote.InteriorRepairPrice6 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairPrice6(childComplexity), true

	case "PipelineNote.interiorRepairPrice7":
		if e.complexity.PipelineNote.InteriorRepairPrice7 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairPrice7(childComplexity), true

	case "PipelineNote.interiorRepairPrice8":
		if e.complexity.PipelineNote.InteriorRepairPrice8 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairPrice8(childComplexity), true

	case "PipelineNote.interiorRepairPrice9":
		if e.complexity.PipelineNote.InteriorRepairPrice9 == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairPrice9(childComplexity), true

	case "PipelineNote.interiorRepairPriceTotal":
		if e.complexity.PipelineNote.InteriorRepairPriceTotal == nil {
			break
		}

		return e.complexity.PipelineNote.InteriorRepairPriceTotal(childComplexity), true

	case "PipelineNote.orderNotes":
		if e.complexity.PipelineNote.OrderNotes == nil {
			break
		}

		return e.complexity.PipelineNote.OrderNotes(childComplexity), true

	case "PipelineNoteResult.results":
		if e.complexity.PipelineNoteResult.Results == nil {
			break
		}

		return e.complexity.PipelineNoteResult.Results(childComplexity), true

	case "PipelineNoteResult.totalCount":
		if e.complexity.PipelineNoteResult.TotalCount == nil {
			break
		}

		return e.complexity.PipelineNoteResult.TotalCount(childComplexity), true

	case "PipelinePhoto.createdBy":
		if e.complexity.PipelinePhoto.CreatedBy == nil {
			break
		}

		return e.complexity.PipelinePhoto.CreatedBy(childComplexity), true

	case "PipelinePhoto.createdDateTime":
		if e.complexity.PipelinePhoto.CreatedDateTime == nil {
			break
		}

		return e.complexity.PipelinePhoto.CreatedDateTime(childComplexity), true

	case "PipelinePhoto.fileName":
		if e.complexity.PipelinePhoto.FileName == nil {
			break
		}

		return e.complexity.PipelinePhoto.FileName(childComplexity), true

	case "PipelinePhoto.fileSize":
		if e.complexity.PipelinePhoto.FileSize == nil {
			break
		}

		return e.complexity.PipelinePhoto.FileSize(childComplexity), true

	case "PipelinePhoto.id":
		if e.complexity.PipelinePhoto.ID == nil {
			break
		}

		return e.complexity.PipelinePhoto.ID(childComplexity), true

	case "PipelinePhoto.isSubmitted":
		if e.complexity.PipelinePhoto.IsSubmitted == nil {
			break
		}

		return e.complexity.PipelinePhoto.IsSubmitted(childComplexity), true

	case "PipelinePhoto.url":
		if e.complexity.PipelinePhoto.URL == nil {
			break
		}

		return e.complexity.PipelinePhoto.URL(childComplexity), true

	case "PipelinePhotoResult.results":
		if e.complexity.PipelinePhotoResult.Results == nil {
			break
		}

		return e.complexity.PipelinePhotoResult.Results(childComplexity), true

	case "PipelinePhotoResult.totalCount":
		if e.complexity.PipelinePhotoResult.TotalCount == nil {
			break
		}

		return e.complexity.PipelinePhotoResult.TotalCount(childComplexity), true

	case "PipelineQualityControl.createdBy":
		if e.complexity.PipelineQualityControl.CreatedBy == nil {
			break
		}

		return e.complexity.PipelineQualityControl.CreatedBy(childComplexity), true

	case "PipelineQualityControl.createdDateTime":
		if e.complexity.PipelineQualityControl.CreatedDateTime == nil {
			break
		}

		return e.complexity.PipelineQualityControl.CreatedDateTime(childComplexity), true

	case "PipelineQualityControl.orderNotes":
		if e.complexity.PipelineQualityControl.OrderNotes == nil {
			break
		}

		return e.complexity.PipelineQualityControl.OrderNotes(childComplexity), true

	case "PipelineQualityControlAndNote.category":
		if e.complexity.PipelineQualityControlAndNote.Category == nil {
			break
		}

		return e.complexity.PipelineQualityControlAndNote.Category(childComplexity), true

	case "PipelineQualityControlAndNote.createdBy":
		if e.complexity.PipelineQualityControlAndNote.CreatedBy == nil {
			break
		}

		return e.complexity.PipelineQualityControlAndNote.CreatedBy(childComplexity), true

	case "PipelineQualityControlAndNote.date":
		if e.complexity.PipelineQualityControlAndNote.Date == nil {
			break
		}

		return e.complexity.PipelineQualityControlAndNote.Date(childComplexity), true

	case "PipelineQualityControlAndNote.message":
		if e.complexity.PipelineQualityControlAndNote.Message == nil {
			break
		}

		return e.complexity.PipelineQualityControlAndNote.Message(childComplexity), true

	case "PipelineQualityControlAndNoteResult.results":
		if e.complexity.PipelineQualityControlAndNoteResult.Results == nil {
			break
		}

		return e.complexity.PipelineQualityControlAndNoteResult.Results(childComplexity), true

	case "PipelineQualityControlAndNoteResult.totalCount":
		if e.complexity.PipelineQualityControlAndNoteResult.TotalCount == nil {
			break
		}

		return e.complexity.PipelineQualityControlAndNoteResult.TotalCount(childComplexity), true

	case "PipelineQualityControlResult.results":
		if e.complexity.PipelineQualityControlResult.Results == nil {
			break
		}

		return e.complexity.PipelineQualityControlResult.Results(childComplexity), true

	case "PipelineQualityControlResult.totalCount":
		if e.complexity.PipelineQualityControlResult.TotalCount == nil {
			break
		}

		return e.complexity.PipelineQualityControlResult.TotalCount(childComplexity), true

	case "PipelineRepair.exteriorRepairDescription1":
		if e.complexity.PipelineRepair.ExteriorRepairDescription1 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairDescription1(childComplexity), true

	case "PipelineRepair.exteriorRepairDescription10":
		if e.complexity.PipelineRepair.ExteriorRepairDescription10 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairDescription10(childComplexity), true

	case "PipelineRepair.exteriorRepairDescription2":
		if e.complexity.PipelineRepair.ExteriorRepairDescription2 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairDescription2(childComplexity), true

	case "PipelineRepair.exteriorRepairDescription3":
		if e.complexity.PipelineRepair.ExteriorRepairDescription3 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairDescription3(childComplexity), true

	case "PipelineRepair.exteriorRepairDescription4":
		if e.complexity.PipelineRepair.ExteriorRepairDescription4 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairDescription4(childComplexity), true

	case "PipelineRepair.exteriorRepairDescription5":
		if e.complexity.PipelineRepair.ExteriorRepairDescription5 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairDescription5(childComplexity), true

	case "PipelineRepair.exteriorRepairDescription6":
		if e.complexity.PipelineRepair.ExteriorRepairDescription6 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairDescription6(childComplexity), true

	case "PipelineRepair.exteriorRepairDescription7":
		if e.complexity.PipelineRepair.ExteriorRepairDescription7 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairDescription7(childComplexity), true

	case "PipelineRepair.exteriorRepairDescription8":
		if e.complexity.PipelineRepair.ExteriorRepairDescription8 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairDescription8(childComplexity), true

	case "PipelineRepair.exteriorRepairDescription9":
		if e.complexity.PipelineRepair.ExteriorRepairDescription9 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairDescription9(childComplexity), true

	case "PipelineRepair.exteriorRepairPrice1":
		if e.complexity.PipelineRepair.ExteriorRepairPrice1 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairPrice1(childComplexity), true

	case "PipelineRepair.exteriorRepairPrice10":
		if e.complexity.PipelineRepair.ExteriorRepairPrice10 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairPrice10(childComplexity), true

	case "PipelineRepair.exteriorRepairPrice2":
		if e.complexity.PipelineRepair.ExteriorRepairPrice2 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairPrice2(childComplexity), true

	case "PipelineRepair.exteriorRepairPrice3":
		if e.complexity.PipelineRepair.ExteriorRepairPrice3 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairPrice3(childComplexity), true

	case "PipelineRepair.exteriorRepairPrice4":
		if e.complexity.PipelineRepair.ExteriorRepairPrice4 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairPrice4(childComplexity), true

	case "PipelineRepair.exteriorRepairPrice5":
		if e.complexity.PipelineRepair.ExteriorRepairPrice5 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairPrice5(childComplexity), true

	case "PipelineRepair.exteriorRepairPrice6":
		if e.complexity.PipelineRepair.ExteriorRepairPrice6 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairPrice6(childComplexity), true

	case "PipelineRepair.exteriorRepairPrice7":
		if e.complexity.PipelineRepair.ExteriorRepairPrice7 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairPrice7(childComplexity), true

	case "PipelineRepair.exteriorRepairPrice8":
		if e.complexity.PipelineRepair.ExteriorRepairPrice8 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairPrice8(childComplexity), true

	case "PipelineRepair.exteriorRepairPrice9":
		if e.complexity.PipelineRepair.ExteriorRepairPrice9 == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairPrice9(childComplexity), true

	case "PipelineRepair.exteriorRepairPriceTotal":
		if e.complexity.PipelineRepair.ExteriorRepairPriceTotal == nil {
			break
		}

		return e.complexity.PipelineRepair.ExteriorRepairPriceTotal(childComplexity), true

	case "PipelineRepair.interiorRepairDescription1":
		if e.complexity.PipelineRepair.InteriorRepairDescription1 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairDescription1(childComplexity), true

	case "PipelineRepair.interiorRepairDescription10":
		if e.complexity.PipelineRepair.InteriorRepairDescription10 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairDescription10(childComplexity), true

	case "PipelineRepair.interiorRepairDescription2":
		if e.complexity.PipelineRepair.InteriorRepairDescription2 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairDescription2(childComplexity), true

	case "PipelineRepair.interiorRepairDescription3":
		if e.complexity.PipelineRepair.InteriorRepairDescription3 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairDescription3(childComplexity), true

	case "PipelineRepair.interiorRepairDescription4":
		if e.complexity.PipelineRepair.InteriorRepairDescription4 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairDescription4(childComplexity), true

	case "PipelineRepair.interiorRepairDescription5":
		if e.complexity.PipelineRepair.InteriorRepairDescription5 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairDescription5(childComplexity), true

	case "PipelineRepair.interiorRepairDescription6":
		if e.complexity.PipelineRepair.InteriorRepairDescription6 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairDescription6(childComplexity), true

	case "PipelineRepair.interiorRepairDescription7":
		if e.complexity.PipelineRepair.InteriorRepairDescription7 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairDescription7(childComplexity), true

	case "PipelineRepair.interiorRepairDescription8":
		if e.complexity.PipelineRepair.InteriorRepairDescription8 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairDescription8(childComplexity), true

	case "PipelineRepair.interiorRepairDescription9":
		if e.complexity.PipelineRepair.InteriorRepairDescription9 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairDescription9(childComplexity), true

	case "PipelineRepair.interiorRepairPrice1":
		if e.complexity.PipelineRepair.InteriorRepairPrice1 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairPrice1(childComplexity), true

	case "PipelineRepair.interiorRepairPrice10":
		if e.complexity.PipelineRepair.InteriorRepairPrice10 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairPrice10(childComplexity), true

	case "PipelineRepair.interiorRepairPrice2":
		if e.complexity.PipelineRepair.InteriorRepairPrice2 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairPrice2(childComplexity), true

	case "PipelineRepair.interiorRepairPrice3":
		if e.complexity.PipelineRepair.InteriorRepairPrice3 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairPrice3(childComplexity), true

	case "PipelineRepair.interiorRepairPrice4":
		if e.complexity.PipelineRepair.InteriorRepairPrice4 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairPrice4(childComplexity), true

	case "PipelineRepair.interiorRepairPrice5":
		if e.complexity.PipelineRepair.InteriorRepairPrice5 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairPrice5(childComplexity), true

	case "PipelineRepair.interiorRepairPrice6":
		if e.complexity.PipelineRepair.InteriorRepairPrice6 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairPrice6(childComplexity), true

	case "PipelineRepair.interiorRepairPrice7":
		if e.complexity.PipelineRepair.InteriorRepairPrice7 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairPrice7(childComplexity), true

	case "PipelineRepair.interiorRepairPrice8":
		if e.complexity.PipelineRepair.InteriorRepairPrice8 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairPrice8(childComplexity), true

	case "PipelineRepair.interiorRepairPrice9":
		if e.complexity.PipelineRepair.InteriorRepairPrice9 == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairPrice9(childComplexity), true

	case "PipelineRepair.interiorRepairPriceTotal":
		if e.complexity.PipelineRepair.InteriorRepairPriceTotal == nil {
			break
		}

		return e.complexity.PipelineRepair.InteriorRepairPriceTotal(childComplexity), true

	case "PipelineResult.results":
		if e.complexity.PipelineResult.Results == nil {
			break
		}

		return e.complexity.PipelineResult.Results(childComplexity), true

	case "PipelineResult.totalCount":
		if e.complexity.PipelineResult.TotalCount == nil {
			break
		}

		return e.complexity.PipelineResult.TotalCount(childComplexity), true

	case "PipelineState.isNewOrder":
		if e.complexity.PipelineState.IsNewOrder == nil {
			break
		}

		return e.complexity.PipelineState.IsNewOrder(childComplexity), true

	case "PipelineState.isRush":
		if e.complexity.PipelineState.IsRush == nil {
			break
		}

		return e.complexity.PipelineState.IsRush(childComplexity), true

	case "PipelineState.maxDailyVolume":
		if e.complexity.PipelineState.MaxDailyVolume == nil {
			break
		}

		return e.complexity.PipelineState.MaxDailyVolume(childComplexity), true

	case "PipelineState.oAIsAutoAssign":
		if e.complexity.PipelineState.OAIsAutoAssign == nil {
			break
		}

		return e.complexity.PipelineState.OAIsAutoAssign(childComplexity), true

	case "PipelineState.oAOfferLimitInMin":
		if e.complexity.PipelineState.OAOfferLimitInMin == nil {
			break
		}

		return e.complexity.PipelineState.OAOfferLimitInMin(childComplexity), true

	case "PipelineState.oPConditionReport":
		if e.complexity.PipelineState.OPConditionReport == nil {
			break
		}

		return e.complexity.PipelineState.OPConditionReport(childComplexity), true

	case "PipelineState.oPDataEntry":
		if e.complexity.PipelineState.OPDataEntry == nil {
			break
		}

		return e.complexity.PipelineState.OPDataEntry(childComplexity), true

	case "PipelineState.oPExterior":
		if e.complexity.PipelineState.OPExterior == nil {
			break
		}

		return e.complexity.PipelineState.OPExterior(childComplexity), true

	case "PipelineState.oPInitialBPO":
		if e.complexity.PipelineState.OPInitialBpo == nil {
			break
		}

		return e.complexity.PipelineState.OPInitialBpo(childComplexity), true

	case "PipelineState.oPInspection":
		if e.complexity.PipelineState.OPInspection == nil {
			break
		}

		return e.complexity.PipelineState.OPInspection(childComplexity), true

	case "PipelineState.oPInterior":
		if e.complexity.PipelineState.OPInterior == nil {
			break
		}

		return e.complexity.PipelineState.OPInterior(childComplexity), true

	case "PipelineState.oPRentalAddendum":
		if e.complexity.PipelineState.OPRentalAddendum == nil {
			break
		}

		return e.complexity.PipelineState.OPRentalAddendum(childComplexity), true

	case "PipelineState.oPRush":
		if e.complexity.PipelineState.OPRush == nil {
			break
		}

		return e.complexity.PipelineState.OPRush(childComplexity), true

	case "PipelineState.oPSuperRush":
		if e.complexity.PipelineState.OPSuperRush == nil {
			break
		}

		return e.complexity.PipelineState.OPSuperRush(childComplexity), true

	case "PipelineState.orderMessage":
		if e.complexity.PipelineState.OrderMessage == nil {
			break
		}

		return e.complexity.PipelineState.OrderMessage(childComplexity), true

	case "PipelineState.pCIsAcceptOrder":
		if e.complexity.PipelineState.PCIsAcceptOrder == nil {
			break
		}

		return e.complexity.PipelineState.PCIsAcceptOrder(childComplexity), true

	case "PipelineState.pCcatchTime":
		if e.complexity.PipelineState.PCcatchTime == nil {
			break
		}

		return e.complexity.PipelineState.PCcatchTime(childComplexity), true

	case "PipelineState.qCElapseTime":
		if e.complexity.PipelineState.QCElapseTime == nil {
			break
		}

		return e.complexity.PipelineState.QCElapseTime(childComplexity), true

	case "PipelineState.standByAutoComplete":
		if e.complexity.PipelineState.StandByAutoComplete == nil {
			break
		}

		return e.complexity.PipelineState.StandByAutoComplete(childComplexity), true

	case "PipelineState.tLBusy":
		if e.complexity.PipelineState.TLBusy == nil {
			break
		}

		return e.complexity.PipelineState.TLBusy(childComplexity), true

	case "PipelineState.tLModerate":
		if e.complexity.PipelineState.TLModerate == nil {
			break
		}

		return e.complexity.PipelineState.TLModerate(childComplexity), true

	case "PipelineState.tLSlow":
		if e.complexity.PipelineState.TLSlow == nil {
			break
		}

		return e.complexity.PipelineState.TLSlow(childComplexity), true

	case "PipelineState.tTBusy":
		if e.complexity.PipelineState.TTBusy == nil {
			break
		}

		return e.complexity.PipelineState.TTBusy(childComplexity), true

	case "PipelineState.tTMax":
		if e.complexity.PipelineState.TTMax == nil {
			break
		}

		return e.complexity.PipelineState.TTMax(childComplexity), true

	case "PipelineState.tTModerate":
		if e.complexity.PipelineState.TTModerate == nil {
			break
		}

		return e.complexity.PipelineState.TTModerate(childComplexity), true

	case "PipelineState.tTSlow":
		if e.complexity.PipelineState.TTSlow == nil {
			break
		}

		return e.complexity.PipelineState.TTSlow(childComplexity), true

	case "PipelineState.todayOrderCount":
		if e.complexity.PipelineState.TodayOrderCount == nil {
			break
		}

		return e.complexity.PipelineState.TodayOrderCount(childComplexity), true

	case "PriceModule.credits":
		if e.complexity.PriceModule.Credits == nil {
			break
		}

		return e.complexity.PriceModule.Credits(childComplexity), true

	case "PriceModule.orderconditionReport":
		if e.complexity.PriceModule.OrderconditionReport == nil {
			break
		}

		return e.complexity.PriceModule.OrderconditionReport(childComplexity), true

	case "PriceModule.orderdataEntry":
		if e.complexity.PriceModule.OrderdataEntry == nil {
			break
		}

		return e.complexity.PriceModule.OrderdataEntry(childComplexity), true

	case "PriceModule.orderexterior":
		if e.complexity.PriceModule.Orderexterior == nil {
			break
		}

		return e.complexity.PriceModule.Orderexterior(childComplexity), true

	case "PriceModule.orderinterior":
		if e.complexity.PriceModule.Orderinterior == nil {
			break
		}

		return e.complexity.PriceModule.Orderinterior(childComplexity), true

	case "PriceModule.orderrentalAddendum":
		if e.complexity.PriceModule.OrderrentalAddendum == nil {
			break
		}

		return e.complexity.PriceModule.OrderrentalAddendum(childComplexity), true

	case "PriceModule.orderrush":
		if e.complexity.PriceModule.Orderrush == nil {
			break
		}

		return e.complexity.PriceModule.Orderrush(childComplexity), true

	case "PriceModule.ordersuperRush":
		if e.complexity.PriceModule.OrdersuperRush == nil {
			break
		}

		return e.complexity.PriceModule.OrdersuperRush(childComplexity), true

	case "PriceModule.photoExterior":
		if e.complexity.PriceModule.PhotoExterior == nil {
			break
		}

		return e.complexity.PriceModule.PhotoExterior(childComplexity), true

	case "PriceModule.photoInteriorAppointment":
		if e.complexity.PriceModule.PhotoInteriorAppointment == nil {
			break
		}

		return e.complexity.PriceModule.PhotoInteriorAppointment(childComplexity), true

	case "PriceModule.photoInteriorVacantLB":
		if e.complexity.PriceModule.PhotoInteriorVacantLb == nil {
			break
		}

		return e.complexity.PriceModule.PhotoInteriorVacantLb(childComplexity), true

	case "ProfileDocResult.results":
		if e.complexity.ProfileDocResult.Results == nil {
			break
		}

		return e.complexity.ProfileDocResult.Results(childComplexity), true

	case "ProfileDocResult.totalCount":
		if e.complexity.ProfileDocResult.TotalCount == nil {
			break
		}

		return e.complexity.ProfileDocResult.TotalCount(childComplexity), true

	case "QcCompleted.dd":
		if e.complexity.QcCompleted.Dd == nil {
			break
		}

		return e.complexity.QcCompleted.Dd(childComplexity), true

	case "QcCompleted.fullRec":
		if e.complexity.QcCompleted.FullRec == nil {
			break
		}

		return e.complexity.QcCompleted.FullRec(childComplexity), true

	case "QcCompleted.month":
		if e.complexity.QcCompleted.Month == nil {
			break
		}

		return e.complexity.QcCompleted.Month(childComplexity), true

	case "QcCompleted.normal":
		if e.complexity.QcCompleted.Normal == nil {
			break
		}

		return e.complexity.QcCompleted.Normal(childComplexity), true

	case "QcCompleted.qualityControlName":
		if e.complexity.QcCompleted.QualityControlName == nil {
			break
		}

		return e.complexity.QcCompleted.QualityControlName(childComplexity), true

	case "QcCompleted.total":
		if e.complexity.QcCompleted.Total == nil {
			break
		}

		return e.complexity.QcCompleted.Total(childComplexity), true

	case "QcCompleted.year":
		if e.complexity.QcCompleted.Year == nil {
			break
		}

		return e.complexity.QcCompleted.Year(childComplexity), true

	case "QcHistory.address":
		if e.complexity.QcHistory.Address == nil {
			break
		}

		return e.complexity.QcHistory.Address(childComplexity), true

	case "QcHistory.assign":
		if e.complexity.QcHistory.Assign == nil {
			break
		}

		return e.complexity.QcHistory.Assign(childComplexity), true

	case "QcHistory.assignId":
		if e.complexity.QcHistory.AssignID == nil {
			break
		}

		return e.complexity.QcHistory.AssignID(childComplexity), true

	case "QcHistory.authorId":
		if e.complexity.QcHistory.AuthorID == nil {
			break
		}

		return e.complexity.QcHistory.AuthorID(childComplexity), true

	case "QcHistory.authorName":
		if e.complexity.QcHistory.AuthorName == nil {
			break
		}

		return e.complexity.QcHistory.AuthorName(childComplexity), true

	case "QcHistory.company":
		if e.complexity.QcHistory.Company == nil {
			break
		}

		return e.complexity.QcHistory.Company(childComplexity), true

	case "QcHistory.country":
		if e.complexity.QcHistory.Country == nil {
			break
		}

		return e.complexity.QcHistory.Country(childComplexity), true

	case "QcHistory.createdDateTime":
		if e.complexity.QcHistory.CreatedDateTime == nil {
			break
		}

		return e.complexity.QcHistory.CreatedDateTime(childComplexity), true

	case "QcHistory.id":
		if e.complexity.QcHistory.ID == nil {
			break
		}

		return e.complexity.QcHistory.ID(childComplexity), true

	case "QcHistory.ifillProcessModifiedDate":
		if e.complexity.QcHistory.IfillProcessModifiedDate == nil {
			break
		}

		return e.complexity.QcHistory.IfillProcessModifiedDate(childComplexity), true

	case "QcHistory.isInitialBpo":
		if e.complexity.QcHistory.IsInitialBpo == nil {
			break
		}

		return e.complexity.QcHistory.IsInitialBpo(childComplexity), true

	case "QcHistory.isInspection":
		if e.complexity.QcHistory.IsInspection == nil {
			break
		}

		return e.complexity.QcHistory.IsInspection(childComplexity), true

	case "QcHistory.isProcessIfill":
		if e.complexity.QcHistory.IsProcessIfill == nil {
			break
		}

		return e.complexity.QcHistory.IsProcessIfill(childComplexity), true

	case "QcHistory.isProcessIform":
		if e.complexity.QcHistory.IsProcessIform == nil {
			break
		}

		return e.complexity.QcHistory.IsProcessIform(childComplexity), true

	case "QcHistory.isProcessReview":
		if e.complexity.QcHistory.IsProcessReview == nil {
			break
		}

		return e.complexity.QcHistory.IsProcessReview(childComplexity), true

	case "QcHistory.isRushOrder":
		if e.complexity.QcHistory.IsRushOrder == nil {
			break
		}

		return e.complexity.QcHistory.IsRushOrder(childComplexity), true

	case "QcHistory.isSuperRush":
		if e.complexity.QcHistory.IsSuperRush == nil {
			break
		}

		return e.complexity.QcHistory.IsSuperRush(childComplexity), true

	case "QcHistory.isSyncedToTurboBpo":
		if e.complexity.QcHistory.IsSyncedToTurboBpo == nil {
			break
		}

		return e.complexity.QcHistory.IsSyncedToTurboBpo(childComplexity), true

	case "QcHistory.lastUpdateTime":
		if e.complexity.QcHistory.LastUpdateTime == nil {
			break
		}

		return e.complexity.QcHistory.LastUpdateTime(childComplexity), true

	case "QcHistory.location":
		if e.complexity.QcHistory.Location == nil {
			break
		}

		return e.complexity.QcHistory.Location(childComplexity), true

	case "QcHistory.mls":
		if e.complexity.QcHistory.Mls == nil {
			break
		}

		return e.complexity.QcHistory.Mls(childComplexity), true

	case "QcHistory.objective":
		if e.complexity.QcHistory.Objective == nil {
			break
		}

		return e.complexity.QcHistory.Objective(childComplexity), true

	case "QcHistory.orderFee":
		if e.complexity.QcHistory.OrderFee == nil {
			break
		}

		return e.complexity.QcHistory.OrderFee(childComplexity), true

	case "QcHistory.orderNumber":
		if e.complexity.QcHistory.OrderNumber == nil {
			break
		}

		return e.complexity.QcHistory.OrderNumber(childComplexity), true

	case "QcHistory.orderType":
		if e.complexity.QcHistory.OrderType == nil {
			break
		}

		return e.complexity.QcHistory.OrderType(childComplexity), true

	case "QcHistory.pipelineDocTotal":
		if e.complexity.QcHistory.PipelineDocTotal == nil {
			break
		}

		return e.complexity.QcHistory.PipelineDocTotal(childComplexity), true

	case "QcHistory.pipelineId":
		if e.complexity.QcHistory.PipelineID == nil {
			break
		}

		return e.complexity.QcHistory.PipelineID(childComplexity), true

	case "QcHistory.pipelineNoteTotal":
		if e.complexity.QcHistory.PipelineNoteTotal == nil {
			break
		}

		return e.complexity.QcHistory.PipelineNoteTotal(childComplexity), true

	case "QcHistory.pipelinePhotoTotal":
		if e.complexity.QcHistory.PipelinePhotoTotal == nil {
			break
		}

		return e.complexity.QcHistory.PipelinePhotoTotal(childComplexity), true

	case "QcHistory.pipelineQualityControlTotal":
		if e.complexity.QcHistory.PipelineQualityControlTotal == nil {
			break
		}

		return e.complexity.QcHistory.PipelineQualityControlTotal(childComplexity), true

	case "QcHistory.processIformModifiedDate":
		if e.complexity.QcHistory.ProcessIformModifiedDate == nil {
			break
		}

		return e.complexity.QcHistory.ProcessIformModifiedDate(childComplexity), true

	case "QcHistory.processReviewModifiedDate":
		if e.complexity.QcHistory.ProcessReviewModifiedDate == nil {
			break
		}

		return e.complexity.QcHistory.ProcessReviewModifiedDate(childComplexity), true

	case "QcHistory.qcHistory":
		if e.complexity.QcHistory.QcHistory == nil {
			break
		}

		return e.complexity.QcHistory.QcHistory(childComplexity), true

	case "QcHistory.ratingFeedback":
		if e.complexity.QcHistory.RatingFeedback == nil {
			break
		}

		return e.complexity.QcHistory.RatingFeedback(childComplexity), true

	case "QcHistory.ratingOverAll":
		if e.complexity.QcHistory.RatingOverAll == nil {
			break
		}

		return e.complexity.QcHistory.RatingOverAll(childComplexity), true

	case "QcHistory.ratingQuality":
		if e.complexity.QcHistory.RatingQuality == nil {
			break
		}

		return e.complexity.QcHistory.RatingQuality(childComplexity), true

	case "QcHistory.ratingTimeliness":
		if e.complexity.QcHistory.RatingTimeliness == nil {
			break
		}

		return e.complexity.QcHistory.RatingTimeliness(childComplexity), true

	case "QcHistory.status":
		if e.complexity.QcHistory.Status == nil {
			break
		}

		return e.complexity.QcHistory.Status(childComplexity), true

	case "QcHistory.totalFee":
		if e.complexity.QcHistory.TotalFee == nil {
			break
		}

		return e.complexity.QcHistory.TotalFee(childComplexity), true

	case "QcHistory.type":
		if e.complexity.QcHistory.Type == nil {
			break
		}

		return e.complexity.QcHistory.Type(childComplexity), true

	case "QcHistoryResult.results":
		if e.complexity.QcHistoryResult.Results == nil {
			break
		}

		return e.complexity.QcHistoryResult.Results(childComplexity), true

	case "QcHistoryResult.totalCount":
		if e.complexity.QcHistoryResult.TotalCount == nil {
			break
		}

		return e.complexity.QcHistoryResult.TotalCount(childComplexity), true

	case "QcRating.contractorName":
		if e.complexity.QcRating.ContractorName == nil {
			break
		}

		return e.complexity.QcRating.ContractorName(childComplexity), true

	case "QcRating.month":
		if e.complexity.QcRating.Month == nil {
			break
		}

		return e.complexity.QcRating.Month(childComplexity), true

	case "QcRating.noOfOders":
		if e.complexity.QcRating.NoOfOders == nil {
			break
		}

		return e.complexity.QcRating.NoOfOders(childComplexity), true

	case "QcRating.noOfQcL":
		if e.complexity.QcRating.NoOfQcL == nil {
			break
		}

		return e.complexity.QcRating.NoOfQcL(childComplexity), true

	case "QcRating.percentOfQc":
		if e.complexity.QcRating.PercentOfQc == nil {
			break
		}

		return e.complexity.QcRating.PercentOfQc(childComplexity), true

	case "QcRating.year":
		if e.complexity.QcRating.Year == nil {
			break
		}

		return e.complexity.QcRating.Year(childComplexity), true

	case "QcRequest.address":
		if e.complexity.QcRequest.Address == nil {
			break
		}

		return e.complexity.QcRequest.Address(childComplexity), true

	case "QcRequest.company":
		if e.complexity.QcRequest.Company == nil {
			break
		}

		return e.complexity.QcRequest.Company(childComplexity), true

	case "QcRequest.id":
		if e.complexity.QcRequest.ID == nil {
			break
		}

		return e.complexity.QcRequest.ID(childComplexity), true

	case "QcRequest.notesTotal":
		if e.complexity.QcRequest.NotesTotal == nil {
			break
		}

		return e.complexity.QcRequest.NotesTotal(childComplexity), true

	case "QcRequest.orderAssignee":
		if e.complexity.QcRequest.OrderAssignee == nil {
			break
		}

		return e.complexity.QcRequest.OrderAssignee(childComplexity), true

	case "QcRequest.orderAssigneeId":
		if e.complexity.QcRequest.OrderAssigneeID == nil {
			break
		}

		return e.complexity.QcRequest.OrderAssigneeID(childComplexity), true

	case "QcRequest.orderNumber":
		if e.complexity.QcRequest.OrderNumber == nil {
			break
		}

		return e.complexity.QcRequest.OrderNumber(childComplexity), true

	case "QcRequest.pipelineId":
		if e.complexity.QcRequest.PipelineID == nil {
			break
		}

		return e.complexity.QcRequest.PipelineID(childComplexity), true

	case "QcRequest.qcAssignee":
		if e.complexity.QcRequest.QcAssignee == nil {
			break
		}

		return e.complexity.QcRequest.QcAssignee(childComplexity), true

	case "QcRequest.qcId":
		if e.complexity.QcRequest.QcID == nil {
			break
		}

		return e.complexity.QcRequest.QcID(childComplexity), true

	case "QcRequest.qcTotal":
		if e.complexity.QcRequest.QcTotal == nil {
			break
		}

		return e.complexity.QcRequest.QcTotal(childComplexity), true

	case "QcRequest.requestDate":
		if e.complexity.QcRequest.RequestDate == nil {
			break
		}

		return e.complexity.QcRequest.RequestDate(childComplexity), true

	case "QcRequest.requestType":
		if e.complexity.QcRequest.RequestType == nil {
			break
		}

		return e.complexity.QcRequest.RequestType(childComplexity), true

	case "QcRequest.status":
		if e.complexity.QcRequest.Status == nil {
			break
		}

		return e.complexity.QcRequest.Status(childComplexity), true

	case "QcRequest.type":
		if e.complexity.QcRequest.Type == nil {
			break
		}

		return e.complexity.QcRequest.Type(childComplexity), true

	case "QcRequestResult.results":
		if e.complexity.QcRequestResult.Results == nil {
			break
		}

		return e.complexity.QcRequestResult.Results(childComplexity), true

	case "QcRequestResult.totalCount":
		if e.complexity.QcRequestResult.TotalCount == nil {
			break
		}

		return e.complexity.QcRequestResult.TotalCount(childComplexity), true

	case "QualityControl.address":
		if e.complexity.QualityControl.Address == nil {
			break
		}

		return e.complexity.QualityControl.Address(childComplexity), true

	case "QualityControl.assignee":
		if e.complexity.QualityControl.Assignee == nil {
			break
		}

		return e.complexity.QualityControl.Assignee(childComplexity), true

	case "QualityControl.assigneeId":
		if e.complexity.QualityControl.AssigneeID == nil {
			break
		}

		return e.complexity.QualityControl.AssigneeID(childComplexity), true

	case "QualityControl.clientName":
		if e.complexity.QualityControl.ClientName == nil {
			break
		}

		return e.complexity.QualityControl.ClientName(childComplexity), true

	case "QualityControl.createdDateTime":
		if e.complexity.QualityControl.CreatedDateTime == nil {
			break
		}

		return e.complexity.QualityControl.CreatedDateTime(childComplexity), true

	case "QualityControl.history":
		if e.complexity.QualityControl.History == nil {
			break
		}

		return e.complexity.QualityControl.History(childComplexity), true

	case "QualityControl.id":
		if e.complexity.QualityControl.ID == nil {
			break
		}

		return e.complexity.QualityControl.ID(childComplexity), true

	case "QualityControl.LastUpdateTime":
		if e.complexity.QualityControl.LastUpdateTime == nil {
			break
		}

		return e.complexity.QualityControl.LastUpdateTime(childComplexity), true

	case "QualityControl.orderContractor":
		if e.complexity.QualityControl.OrderContractor == nil {
			break
		}

		return e.complexity.QualityControl.OrderContractor(childComplexity), true

	case "QualityControl.orderContractorId":
		if e.complexity.QualityControl.OrderContractorID == nil {
			break
		}

		return e.complexity.QualityControl.OrderContractorID(childComplexity), true

	case "QualityControl.orderNumber":
		if e.complexity.QualityControl.OrderNumber == nil {
			break
		}

		return e.complexity.QualityControl.OrderNumber(childComplexity), true

	case "QualityControl.orderType":
		if e.complexity.QualityControl.OrderType == nil {
			break
		}

		return e.complexity.QualityControl.OrderType(childComplexity), true

	case "QualityControl.pipelineId":
		if e.complexity.QualityControl.PipelineID == nil {
			break
		}

		return e.complexity.QualityControl.PipelineID(childComplexity), true

	case "QualityControl.requests":
		if e.complexity.QualityControl.Requests == nil {
			break
		}

		return e.complexity.QualityControl.Requests(childComplexity), true

	case "QualityControl.status":
		if e.complexity.QualityControl.Status == nil {
			break
		}

		return e.complexity.QualityControl.Status(childComplexity), true

	case "QualityControlHistory.cratedby":
		if e.complexity.QualityControlHistory.Cratedby == nil {
			break
		}

		return e.complexity.QualityControlHistory.Cratedby(childComplexity), true

	case "QualityControlHistory.currentAssignee":
		if e.complexity.QualityControlHistory.CurrentAssignee == nil {
			break
		}

		return e.complexity.QualityControlHistory.CurrentAssignee(childComplexity), true

	case "QualityControlHistory.date":
		if e.complexity.QualityControlHistory.Date == nil {
			break
		}

		return e.complexity.QualityControlHistory.Date(childComplexity), true

	case "QualityControlHistory.newAssignee":
		if e.complexity.QualityControlHistory.NewAssignee == nil {
			break
		}

		return e.complexity.QualityControlHistory.NewAssignee(childComplexity), true

	case "QualityControlHistory.reason":
		if e.complexity.QualityControlHistory.Reason == nil {
			break
		}

		return e.complexity.QualityControlHistory.Reason(childComplexity), true

	case "QualityControlHistory.status":
		if e.complexity.QualityControlHistory.Status == nil {
			break
		}

		return e.complexity.QualityControlHistory.Status(childComplexity), true

	case "QualityControlResult.results":
		if e.complexity.QualityControlResult.Results == nil {
			break
		}

		return e.complexity.QualityControlResult.Results(childComplexity), true

	case "QualityControlResult.totalCount":
		if e.complexity.QualityControlResult.TotalCount == nil {
			break
		}

		return e.complexity.QualityControlResult.TotalCount(childComplexity), true

	case "Query.allAccount":
		if e.complexity.Query.AllAccount == nil {
			break
		}

		args, err := ec.field_Query_allAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllAccount(childComplexity, args["filter"].(*models.AccountFilterInput)), true

	case "Query.allAdjustment":
		if e.complexity.Query.AllAdjustment == nil {
			break
		}

		args, err := ec.field_Query_allAdjustment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllAdjustment(childComplexity, args["userId"].(*string)), true

	case "Query.allAnnouncement":
		if e.complexity.Query.AllAnnouncement == nil {
			break
		}

		args, err := ec.field_Query_allAnnouncement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllAnnouncement(childComplexity, args["filter"].(*models.AnnouncementFilterInput)), true

	case "Query.allBalance":
		if e.complexity.Query.AllBalance == nil {
			break
		}

		args, err := ec.field_Query_allBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllBalance(childComplexity, args["filter"].(*models.BalanceFilterInput)), true

	case "Query.allBilling":
		if e.complexity.Query.AllBilling == nil {
			break
		}

		args, err := ec.field_Query_allBilling_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllBilling(childComplexity, args["filter"].(*models.BillingFilterInput)), true

	case "Query.allCheckout":
		if e.complexity.Query.AllCheckout == nil {
			break
		}

		args, err := ec.field_Query_allCheckout_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllCheckout(childComplexity, args["filter"].(*models.CheckoutFilterInput)), true

	case "Query.allComment":
		if e.complexity.Query.AllComment == nil {
			break
		}

		args, err := ec.field_Query_allComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllComment(childComplexity, args["userId"].(*string)), true

	case "Query.allCompany":
		if e.complexity.Query.AllCompany == nil {
			break
		}

		args, err := ec.field_Query_allCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllCompany(childComplexity, args["filter"].(*models.CompanyFilterInput)), true

	case "Query.allCredit":
		if e.complexity.Query.AllCredit == nil {
			break
		}

		return e.complexity.Query.AllCredit(childComplexity), true

	case "Query.allCreditLedger":
		if e.complexity.Query.AllCreditLedger == nil {
			break
		}

		args, err := ec.field_Query_allCreditLedger_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllCreditLedger(childComplexity, args["userId"].(*string), args["filter"].(*models.FilterInput)), true

	case "Query.allCredits":
		if e.complexity.Query.AllCredits == nil {
			break
		}

		args, err := ec.field_Query_allCredits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllCredits(childComplexity, args["filter"].(*models.CreditsFilterInput)), true

	case "Query.allEmailTemplate":
		if e.complexity.Query.AllEmailTemplate == nil {
			break
		}

		args, err := ec.field_Query_allEmailTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllEmailTemplate(childComplexity, args["filter"].(*models.EmailTemplateFilterInput)), true

	case "Query.allHeader":
		if e.complexity.Query.AllHeader == nil {
			break
		}

		args, err := ec.field_Query_allHeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllHeader(childComplexity, args["filter"].(*models.HeaderFilterInput)), true

	case "Query.allHeaderDetail":
		if e.complexity.Query.AllHeaderDetail == nil {
			break
		}

		args, err := ec.field_Query_allHeaderDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllHeaderDetail(childComplexity, args["parentId"].(string), args["filter"].(*models.HeaderFilterInput)), true

	case "Query.allIformGrid":
		if e.complexity.Query.AllIformGrid == nil {
			break
		}

		args, err := ec.field_Query_allIformGrid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllIformGrid(childComplexity, args["pipelineId"].(string), args["filter"].(*models.IformGridFilterInput)), true

	case "Query.allInstruction":
		if e.complexity.Query.AllInstruction == nil {
			break
		}

		args, err := ec.field_Query_allInstruction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllInstruction(childComplexity, args["filter"].(*models.InstructionFilterInput)), true

	case "Query.allInvoice":
		if e.complexity.Query.AllInvoice == nil {
			break
		}

		args, err := ec.field_Query_allInvoice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllInvoice(childComplexity, args["filter"].(*models.InvoiceFilterInput)), true

	case "Query.allInvoiceRequest":
		if e.complexity.Query.AllInvoiceRequest == nil {
			break
		}

		args, err := ec.field_Query_allInvoiceRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllInvoiceRequest(childComplexity, args["filter"].(*models.InvoiceRequestFilterInput)), true

	case "Query.allInvoiceRequestHistory":
		if e.complexity.Query.AllInvoiceRequestHistory == nil {
			break
		}

		args, err := ec.field_Query_allInvoiceRequestHistory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllInvoiceRequestHistory(childComplexity, args["filter"].(*models.FilterInput)), true

	case "Query.allLoginLog":
		if e.complexity.Query.AllLoginLog == nil {
			break
		}

		args, err := ec.field_Query_allLoginLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllLoginLog(childComplexity, args["filter"].(*models.LoginLogFilterInput)), true

	case "Query.allOrderAnalytics":
		if e.complexity.Query.AllOrderAnalytics == nil {
			break
		}

		args, err := ec.field_Query_allOrderAnalytics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllOrderAnalytics(childComplexity, args["filter"].(models.OrderAnalyticsFilterInput)), true

	case "Query.allOrderSubmit":
		if e.complexity.Query.AllOrderSubmit == nil {
			break
		}

		args, err := ec.field_Query_allOrderSubmit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllOrderSubmit(childComplexity, args["year"].(int)), true

	case "Query.allPermissionGroup":
		if e.complexity.Query.AllPermissionGroup == nil {
			break
		}

		args, err := ec.field_Query_allPermissionGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllPermissionGroup(childComplexity, args["filter"].(*models.PermissionGroupFilterInput)), true

	case "Query.allPipeline":
		if e.complexity.Query.AllPipeline == nil {
			break
		}

		args, err := ec.field_Query_allPipeline_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllPipeline(childComplexity, args["filter"].(*models.PipelineFilterInput)), true

	case "Query.allPipelineComparable":
		if e.complexity.Query.AllPipelineComparable == nil {
			break
		}

		args, err := ec.field_Query_allPipelineComparable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllPipelineComparable(childComplexity, args["pipelineId"].(string), args["filter"].(*models.PipelineComparableFilterInput)), true

	case "Query.allPipelineDoc":
		if e.complexity.Query.AllPipelineDoc == nil {
			break
		}

		args, err := ec.field_Query_allPipelineDoc_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllPipelineDoc(childComplexity, args["pipelineId"].(string), args["filter"].(*models.FilterInput)), true

	case "Query.allPipelineNote":
		if e.complexity.Query.AllPipelineNote == nil {
			break
		}

		args, err := ec.field_Query_allPipelineNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllPipelineNote(childComplexity, args["pipelineId"].(string), args["filter"].(*models.FilterInput)), true

	case "Query.allPipelinePhoto":
		if e.complexity.Query.AllPipelinePhoto == nil {
			break
		}

		args, err := ec.field_Query_allPipelinePhoto_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllPipelinePhoto(childComplexity, args["pipelineId"].(string), args["filter"].(*models.FilterInput)), true

	case "Query.allPipelineQualityControl":
		if e.complexity.Query.AllPipelineQualityControl == nil {
			break
		}

		args, err := ec.field_Query_allPipelineQualityControl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllPipelineQualityControl(childComplexity, args["pipelineId"].(string), args["filter"].(*models.FilterInput)), true

	case "Query.allPipelineQualityControlAndNote":
		if e.complexity.Query.AllPipelineQualityControlAndNote == nil {
			break
		}

		args, err := ec.field_Query_allPipelineQualityControlAndNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllPipelineQualityControlAndNote(childComplexity, args["pipelineId"].(string), args["filter"].(*models.FilterInput)), true

	case "Query.allProfileDoc":
		if e.complexity.Query.AllProfileDoc == nil {
			break
		}

		args, err := ec.field_Query_allProfileDoc_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllProfileDoc(childComplexity, args["userId"].(*string), args["filter"].(*models.FilterInput)), true

	case "Query.allQcCompleted":
		if e.complexity.Query.AllQcCompleted == nil {
			break
		}

		args, err := ec.field_Query_allQcCompleted_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllQcCompleted(childComplexity, args["year"].(int)), true

	case "Query.allQcHistory":
		if e.complexity.Query.AllQcHistory == nil {
			break
		}

		args, err := ec.field_Query_allQcHistory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllQcHistory(childComplexity, args["filter"].(*models.QcHistoryFilterInput)), true

	case "Query.allQcRating":
		if e.complexity.Query.AllQcRating == nil {
			break
		}

		args, err := ec.field_Query_allQcRating_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllQcRating(childComplexity, args["year"].(int), args["type"].(*string)), true

	case "Query.allQcRequest":
		if e.complexity.Query.AllQcRequest == nil {
			break
		}

		args, err := ec.field_Query_allQcRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllQcRequest(childComplexity, args["filter"].(*models.QcRequestFilterInput)), true

	case "Query.allQualityControl":
		if e.complexity.Query.AllQualityControl == nil {
			break
		}

		args, err := ec.field_Query_allQualityControl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllQualityControl(childComplexity, args["filter"].(*models.FilterInput)), true

	case "Query.allRequest":
		if e.complexity.Query.AllRequest == nil {
			break
		}

		args, err := ec.field_Query_allRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllRequest(childComplexity, args["filter"].(*models.RequestFilterInput)), true

	case "Query.allReview":
		if e.complexity.Query.AllReview == nil {
			break
		}

		args, err := ec.field_Query_allReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllReview(childComplexity, args["filter"].(*models.FilterInput)), true

	case "Query.allSalesAnalytics":
		if e.complexity.Query.AllSalesAnalytics == nil {
			break
		}

		args, err := ec.field_Query_allSalesAnalytics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllSalesAnalytics(childComplexity, args["filter"].(models.SalesAnalyticsFilterInput)), true

	case "Query.allSession":
		if e.complexity.Query.AllSession == nil {
			break
		}

		args, err := ec.field_Query_allSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllSession(childComplexity, args["filter"].(*models.SessionFilterInput)), true

	case "Query.allUser":
		if e.complexity.Query.AllUser == nil {
			break
		}

		args, err := ec.field_Query_allUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllUser(childComplexity, args["filter"].(*models.UserFilterInput)), true

	case "Query.company":
		if e.complexity.Query.Company == nil {
			break
		}

		args, err := ec.field_Query_company_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Company(childComplexity, args["id"].(string)), true

	case "Query.default":
		if e.complexity.Query.Default == nil {
			break
		}

		args, err := ec.field_Query_default_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Default(childComplexity, args["userId"].(*string)), true

	case "Query.headerCode":
		if e.complexity.Query.HeaderCode == nil {
			break
		}

		args, err := ec.field_Query_headerCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HeaderCode(childComplexity, args["codes"].([]*string)), true

	case "Query.iform":
		if e.complexity.Query.Iform == nil {
			break
		}

		args, err := ec.field_Query_iform_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Iform(childComplexity, args["pipelineId"].(string)), true

	case "Query.iformTemp":
		if e.complexity.Query.IformTemp == nil {
			break
		}

		args, err := ec.field_Query_iformTemp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.IformTemp(childComplexity, args["pipelineId"].(string)), true

	case "Query.pipeline":
		if e.complexity.Query.Pipeline == nil {
			break
		}

		args, err := ec.field_Query_pipeline_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Pipeline(childComplexity, args["id"].(string)), true

	case "Query.pipelineNeighborhood":
		if e.complexity.Query.PipelineNeighborhood == nil {
			break
		}

		args, err := ec.field_Query_pipelineNeighborhood_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PipelineNeighborhood(childComplexity, args["pipelineId"].(string)), true

	case "Query.pipelineRepair":
		if e.complexity.Query.PipelineRepair == nil {
			break
		}

		args, err := ec.field_Query_pipelineRepair_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PipelineRepair(childComplexity, args["pipelineId"].(string)), true

	case "Query.pipelineState":
		if e.complexity.Query.PipelineState == nil {
			break
		}

		return e.complexity.Query.PipelineState(childComplexity), true

	case "Query.priceModule":
		if e.complexity.Query.PriceModule == nil {
			break
		}

		return e.complexity.Query.PriceModule(childComplexity), true

	case "Query.profile":
		if e.complexity.Query.Profile == nil {
			break
		}

		return e.complexity.Query.Profile(childComplexity), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(string)), true

	case "Request.address":
		if e.complexity.Request.Address == nil {
			break
		}

		return e.complexity.Request.Address(childComplexity), true

	case "Request.company":
		if e.complexity.Request.Company == nil {
			break
		}

		return e.complexity.Request.Company(childComplexity), true

	case "Request.conditionType":
		if e.complexity.Request.ConditionType == nil {
			break
		}

		return e.complexity.Request.ConditionType(childComplexity), true

	case "Request.createdDateTime":
		if e.complexity.Request.CreatedDateTime == nil {
			break
		}

		return e.complexity.Request.CreatedDateTime(childComplexity), true

	case "Request.id":
		if e.complexity.Request.ID == nil {
			break
		}

		return e.complexity.Request.ID(childComplexity), true

	case "Request.orderNumber":
		if e.complexity.Request.OrderNumber == nil {
			break
		}

		return e.complexity.Request.OrderNumber(childComplexity), true

	case "Request.orderType":
		if e.complexity.Request.OrderType == nil {
			break
		}

		return e.complexity.Request.OrderType(childComplexity), true

	case "Request.pipelineId":
		if e.complexity.Request.PipelineID == nil {
			break
		}

		return e.complexity.Request.PipelineID(childComplexity), true

	case "Request.remarks":
		if e.complexity.Request.Remarks == nil {
			break
		}

		return e.complexity.Request.Remarks(childComplexity), true

	case "Request.requestedBy":
		if e.complexity.Request.RequestedBy == nil {
			break
		}

		return e.complexity.Request.RequestedBy(childComplexity), true

	case "Request.requestedById":
		if e.complexity.Request.RequestedByID == nil {
			break
		}

		return e.complexity.Request.RequestedByID(childComplexity), true

	case "Request.status":
		if e.complexity.Request.Status == nil {
			break
		}

		return e.complexity.Request.Status(childComplexity), true

	case "Request.type":
		if e.complexity.Request.Type == nil {
			break
		}

		return e.complexity.Request.Type(childComplexity), true

	case "RequestResult.results":
		if e.complexity.RequestResult.Results == nil {
			break
		}

		return e.complexity.RequestResult.Results(childComplexity), true

	case "RequestResult.totalCount":
		if e.complexity.RequestResult.TotalCount == nil {
			break
		}

		return e.complexity.RequestResult.TotalCount(childComplexity), true

	case "Review.address":
		if e.complexity.Review.Address == nil {
			break
		}

		return e.complexity.Review.Address(childComplexity), true

	case "Review.assignedTo":
		if e.complexity.Review.AssignedTo == nil {
			break
		}

		return e.complexity.Review.AssignedTo(childComplexity), true

	case "Review.fileName":
		if e.complexity.Review.FileName == nil {
			break
		}

		return e.complexity.Review.FileName(childComplexity), true

	case "Review.id":
		if e.complexity.Review.ID == nil {
			break
		}

		return e.complexity.Review.ID(childComplexity), true

	case "Review.orderNumber":
		if e.complexity.Review.OrderNumber == nil {
			break
		}

		return e.complexity.Review.OrderNumber(childComplexity), true

	case "Review.pipelineId":
		if e.complexity.Review.PipelineID == nil {
			break
		}

		return e.complexity.Review.PipelineID(childComplexity), true

	case "Review.reviewBy":
		if e.complexity.Review.ReviewBy == nil {
			break
		}

		return e.complexity.Review.ReviewBy(childComplexity), true

	case "Review.reviewDate":
		if e.complexity.Review.ReviewDate == nil {
			break
		}

		return e.complexity.Review.ReviewDate(childComplexity), true

	case "Review.reviewDescription":
		if e.complexity.Review.ReviewDescription == nil {
			break
		}

		return e.complexity.Review.ReviewDescription(childComplexity), true

	case "Review.url":
		if e.complexity.Review.URL == nil {
			break
		}

		return e.complexity.Review.URL(childComplexity), true

	case "ReviewResult.results":
		if e.complexity.ReviewResult.Results == nil {
			break
		}

		return e.complexity.ReviewResult.Results(childComplexity), true

	case "ReviewResult.totalCount":
		if e.complexity.ReviewResult.TotalCount == nil {
			break
		}

		return e.complexity.ReviewResult.TotalCount(childComplexity), true

	case "SalesAnalytics.completedOrder":
		if e.complexity.SalesAnalytics.CompletedOrder == nil {
			break
		}

		return e.complexity.SalesAnalytics.CompletedOrder(childComplexity), true

	case "SalesAnalytics.day":
		if e.complexity.SalesAnalytics.Day == nil {
			break
		}

		return e.complexity.SalesAnalytics.Day(childComplexity), true

	case "Session.end":
		if e.complexity.Session.End == nil {
			break
		}

		return e.complexity.Session.End(childComplexity), true

	case "Session.id":
		if e.complexity.Session.ID == nil {
			break
		}

		return e.complexity.Session.ID(childComplexity), true

	case "Session.invoiceDate":
		if e.complexity.Session.InvoiceDate == nil {
			break
		}

		return e.complexity.Session.InvoiceDate(childComplexity), true

	case "Session.start":
		if e.complexity.Session.Start == nil {
			break
		}

		return e.complexity.Session.Start(childComplexity), true

	case "SessionResult.results":
		if e.complexity.SessionResult.Results == nil {
			break
		}

		return e.complexity.SessionResult.Results(childComplexity), true

	case "SessionResult.totalCount":
		if e.complexity.SessionResult.TotalCount == nil {
			break
		}

		return e.complexity.SessionResult.TotalCount(childComplexity), true

	case "Token.token":
		if e.complexity.Token.Token == nil {
			break
		}

		return e.complexity.Token.Token(childComplexity), true

	case "User.about":
		if e.complexity.User.About == nil {
			break
		}

		return e.complexity.User.About(childComplexity), true

	case "User.address":
		if e.complexity.User.Address == nil {
			break
		}

		return e.complexity.User.Address(childComplexity), true

	case "User.agent":
		if e.complexity.User.Agent == nil {
			break
		}

		return e.complexity.User.Agent(childComplexity), true

	case "User.agentLicense":
		if e.complexity.User.AgentLicense == nil {
			break
		}

		return e.complexity.User.AgentLicense(childComplexity), true

	case "User.assignActive":
		if e.complexity.User.AssignActive == nil {
			break
		}

		return e.complexity.User.AssignActive(childComplexity), true

	case "User.assignDate":
		if e.complexity.User.AssignDate == nil {
			break
		}

		return e.complexity.User.AssignDate(childComplexity), true

	case "User.assignHold":
		if e.complexity.User.AssignHold == nil {
			break
		}

		return e.complexity.User.AssignHold(childComplexity), true

	case "User.assignRush":
		if e.complexity.User.AssignRush == nil {
			break
		}

		return e.complexity.User.AssignRush(childComplexity), true

	case "User.assignStandby":
		if e.complexity.User.AssignStandby == nil {
			break
		}

		return e.complexity.User.AssignStandby(childComplexity), true

	case "User.assignmentPercentage":
		if e.complexity.User.AssignmentPercentage == nil {
			break
		}

		return e.complexity.User.AssignmentPercentage(childComplexity), true

	case "User.broker":
		if e.complexity.User.Broker == nil {
			break
		}

		return e.complexity.User.Broker(childComplexity), true

	case "User.brokerLicense":
		if e.complexity.User.BrokerLicense == nil {
			break
		}

		return e.complexity.User.BrokerLicense(childComplexity), true

	case "User.brokerage":
		if e.complexity.User.Brokerage == nil {
			break
		}

		return e.complexity.User.Brokerage(childComplexity), true

	case "User.city":
		if e.complexity.User.City == nil {
			break
		}

		return e.complexity.User.City(childComplexity), true

	case "User.company":
		if e.complexity.User.Company == nil {
			break
		}

		return e.complexity.User.Company(childComplexity), true

	case "User.companyList":
		if e.complexity.User.CompanyList == nil {
			break
		}

		return e.complexity.User.CompanyList(childComplexity), true

	case "User.createdDateTime":
		if e.complexity.User.CreatedDateTime == nil {
			break
		}

		return e.complexity.User.CreatedDateTime(childComplexity), true

	case "User.credit":
		if e.complexity.User.Credit == nil {
			break
		}

		return e.complexity.User.Credit(childComplexity), true

	case "User.disclaimer":
		if e.complexity.User.Disclaimer == nil {
			break
		}

		return e.complexity.User.Disclaimer(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.hdyfu":
		if e.complexity.User.Hdyfu == nil {
			break
		}

		return e.complexity.User.Hdyfu(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.imABroker":
		if e.complexity.User.ImABroker == nil {
			break
		}

		return e.complexity.User.ImABroker(childComplexity), true

	case "User.isEnableEmailNotification":
		if e.complexity.User.IsEnableEmailNotification == nil {
			break
		}

		return e.complexity.User.IsEnableEmailNotification(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.lastUpdateTime":
		if e.complexity.User.LastUpdateTime == nil {
			break
		}

		return e.complexity.User.LastUpdateTime(childComplexity), true

	case "User.licenseDate":
		if e.complexity.User.LicenseDate == nil {
			break
		}

		return e.complexity.User.LicenseDate(childComplexity), true

	case "User.licenseExpirationDate":
		if e.complexity.User.LicenseExpirationDate == nil {
			break
		}

		return e.complexity.User.LicenseExpirationDate(childComplexity), true

	case "User.logs":
		if e.complexity.User.Logs == nil {
			break
		}

		return e.complexity.User.Logs(childComplexity), true

	case "User.mao":
		if e.complexity.User.Mao == nil {
			break
		}

		return e.complexity.User.Mao(childComplexity), true

	case "User.orderTotal":
		if e.complexity.User.OrderTotal == nil {
			break
		}

		return e.complexity.User.OrderTotal(childComplexity), true

	case "User.permissionGroupId":
		if e.complexity.User.PermissionGroupID == nil {
			break
		}

		return e.complexity.User.PermissionGroupID(childComplexity), true

	case "User.permissionList":
		if e.complexity.User.PermissionList == nil {
			break
		}

		return e.complexity.User.PermissionList(childComplexity), true

	case "User.phoneConsultation":
		if e.complexity.User.PhoneConsultation == nil {
			break
		}

		return e.complexity.User.PhoneConsultation(childComplexity), true

	case "User.phoneNumber":
		if e.complexity.User.PhoneNumber == nil {
			break
		}

		return e.complexity.User.PhoneNumber(childComplexity), true

	case "User.priceModule":
		if e.complexity.User.PriceModule == nil {
			break
		}

		return e.complexity.User.PriceModule(childComplexity), true

	case "User.profilePicture":
		if e.complexity.User.ProfilePicture == nil {
			break
		}

		return e.complexity.User.ProfilePicture(childComplexity), true

	case "User.roles":
		if e.complexity.User.Roles == nil {
			break
		}

		return e.complexity.User.Roles(childComplexity), true

	case "User.state":
		if e.complexity.User.State == nil {
			break
		}

		return e.complexity.User.State(childComplexity), true

	case "User.status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	case "User.theme":
		if e.complexity.User.Theme == nil {
			break
		}

		return e.complexity.User.Theme(childComplexity), true

	case "User.tier":
		if e.complexity.User.Tier == nil {
			break
		}

		return e.complexity.User.Tier(childComplexity), true

	case "User.title":
		if e.complexity.User.Title == nil {
			break
		}

		return e.complexity.User.Title(childComplexity), true

	case "User.yearOfExperience":
		if e.complexity.User.YearOfExperience == nil {
			break
		}

		return e.complexity.User.YearOfExperience(childComplexity), true

	case "User.zipCode":
		if e.complexity.User.ZipCode == nil {
			break
		}

		return e.complexity.User.ZipCode(childComplexity), true

	case "UserResult.results":
		if e.complexity.UserResult.Results == nil {
			break
		}

		return e.complexity.UserResult.Results(childComplexity), true

	case "UserResult.totalCount":
		if e.complexity.UserResult.TotalCount == nil {
			break
		}

		return e.complexity.UserResult.TotalCount(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "schema.graphql", Input: `type Query {
  profile: User!
  allProfileDoc(userId: ID, filter: FilterInput): ProfileDocResult!
  allAccount(filter: AccountFilterInput): AccountResult!
  allAdjustment(userId: ID): [Adjustment!]!
  allComment(userId: ID): [Comment!]!
  default(userId: ID): Default!
  allPipeline(filter: PipelineFilterInput): PipelineResult!
  allPipelineQualityControl(
    pipelineId: ID!
    filter: FilterInput
  ): PipelineQualityControlResult!
  allPipelineDoc(pipelineId: ID!, filter: FilterInput): PipelineDocResult!
  allPipelinePhoto(pipelineId: ID!, filter: FilterInput): PipelinePhotoResult!
  allPipelineNote(pipelineId: ID!, filter: FilterInput): PipelineNoteResult!
  allCredit: [Credit!]!
  allCompany(filter: CompanyFilterInput): CompanyResult!
  company(id: ID!): Company!
  allUser(filter: UserFilterInput): UserResult!
  pipelineState: PipelineState!
  allEmailTemplate(filter: EmailTemplateFilterInput): EmailTemplateResult!
  allHeader(filter: HeaderFilterInput): HeaderResult!
  allHeaderDetail(parentId: ID!, filter: HeaderFilterInput): HeaderResult!
  headerCode(codes: [String]!): [HeaderCode]
  allInstruction(filter: InstructionFilterInput): InstructionResult!
  allSalesAnalytics(filter: SalesAnalyticsFilterInput!): [SalesAnalytics!]!
  allOrderAnalytics(filter: OrderAnalyticsFilterInput!): [OrderAnalytics!]!
  allQualityControl(filter: FilterInput): QualityControlResult!
  user(id: ID!): User!
  allPipelineQualityControlAndNote(
    pipelineId: ID!
    filter: FilterInput
  ): PipelineQualityControlAndNoteResult!
  pipelineNeighborhood(pipelineId: ID!): PipelineNeighborhood!
  allBalance(filter: BalanceFilterInput): BalanceResult!
  allCheckout(filter: CheckoutFilterInput): CheckoutResult!
  allCredits(filter: CreditsFilterInput): CreditsResult!
  allQcRating(year: Int!, type: String): [QcRating]!
  allOrderSubmit(year: Int!): [OrderSubmit]!
  allQcHistory(filter: QcHistoryFilterInput): QcHistoryResult!
  allQcRequest(filter: QcRequestFilterInput): QcRequestResult!
  allReview(filter: FilterInput): ReviewResult!
  allRequest(filter: RequestFilterInput): RequestResult!
  allQcCompleted(year: Int!): [QcCompleted]!
  pipeline(id: ID!): Pipeline!
  allInvoice(filter: InvoiceFilterInput): [Invoice]!
  allInvoiceRequest(filter: InvoiceRequestFilterInput): InvoiceRequestResult!
  allInvoiceRequestHistory(filter: FilterInput): InvoiceRequestHistoryResult!
  iform(pipelineId: ID!): Iform!
  iformTemp(pipelineId: ID!): IformTemp!
  pipelineRepair(pipelineId: ID!): PipelineRepair!
  allAnnouncement(filter: AnnouncementFilterInput): AnnouncementResult!
  allSession(filter: SessionFilterInput): SessionResult!
  allPermissionGroup(filter: PermissionGroupFilterInput): PermissionGroupResult!
  allLoginLog(filter: LoginLogFilterInput): LoginLogResult!
  allPipelineComparable(
    pipelineId: ID!
    filter: PipelineComparableFilterInput
  ): PipelineComparableResult!
  allBilling(filter: BillingFilterInput): BillingResult!
  allIformGrid(pipelineId: ID!, filter: IformGridFilterInput): IformGridResult!
  allCreditLedger(userId: ID, filter: FilterInput): CreditLedgerResult!
  priceModule: PriceModule!
}

type Mutation {
  login(email: String!, password: String!): Token!
  registerUser(input: RegisterInput!): ID!
  forgetPassword(email: String!): Boolean!
  resetPassword(token: String!, newPassword: String!): Boolean!
  updateProfile(input: ProfileInput!): Boolean!
  saveProfileDoc(input: ProfileDocInput!): ID!
  deleteProfileDoc(id: ID!): Boolean!
  saveAccount(input: AccountInput!): ID!
  updateAccount(id: ID!, input: AccountInput!): Boolean!
  deleteAccount(id: ID!): Boolean!
  updateAdjustment(id: ID!, value: Float!): Boolean!
  setAdjustmentDefault: Boolean!
  saveComment(input: CommentInput!): ID!
  updateComment(id: ID!, value: String!): Boolean!
  deleteComment(id: ID!): Boolean!
  setCommentDefault: Boolean!
  updateDefault(input: DefaultInput!): Boolean!
  savePipeline(input: PipelineInput!): ID!
  updatePipeline(id: ID!, input: UpdatePipelineInput!): Boolean!
  savePipelineQualityControl(pipelineId: ID!, message: String!): ID!
  savePipelineDoc(pipelineId: ID!, input: PipelineDocInput!): ID!
  deletePipelineDoc(id: ID!): Boolean!
  savePipelinePhoto(pipelineId: ID!, input: PipelinePhotoInput!): ID!
  deletePipelinePhoto(id: ID!): Boolean!
  submitPipelinePhoto(id: ID!, IsSubmitPipelinePhoto: Boolean!): Boolean!
  savePipelineNote(pipelineId: ID!, input: SavePipelineNoteInput!): ID!
  saveCredit(input: SaveCreditInput!): ID!
  addCreditLedger(input: AddCreditLedgerInput!): ID!
  saveCompany(input: CompanyInput!): ID!
  updateCompany(id: ID!, input: CompanyInput!): Boolean!
  deleteCompany(id: ID!): Boolean!
  saveUser(input: SaveUserInput!): ID!
  updatePipelineState(input: UpdatePipelineStateInput!): Boolean!
  saveEmailTemplate(input: SaveEmailTemplateInput!): ID!
  updateEmailTemplate(id: ID!, input: UpdateEmailTemplateInput!): Boolean!
  deleteEmailTemplate(id: ID!): Boolean!
  saveHeader(name: String!): ID!
  saveHeaderDetail(parentId: ID!, name: String!): ID!
  updateHeader(id: ID!, name: String!): Boolean!
  deleteHeader(id: ID!): Boolean!
  saveInstruction(input: SaveInstructionInput!): ID!
  deleteInstruction(id: ID!): Boolean!
  saveQualityControl(pipelineID: ID!): ID!
  updateQualityControl(id: ID!, input: UpdateQualityControlInput!): Boolean!
  updatePipelineNeighborhood(
    pipelineId: ID!
    input: UpdatePipelineNeighborhoodInput!
  ): Boolean!
  saveReview(input: SaveReviewInput!): ID!
  updateReview(id: ID!, input: UpdateReviewInput!): Boolean!
  deleteReview(id: ID!): Boolean!
  updateRequest(id: ID!, input: UpdateRequestInput!): Boolean!
  saveRequest(pipelineId: ID!): ID!
  savePipelineQualityControlAndNote(
    pipelineId: ID!
    input: SavePipelineQualityControlAndNoteInput!
  ): ID!
  saveInvoice(input: SaveInvoiceInput!): ID!
  updateInvoice(id: ID!, input: UpdateInvoiceInput!): Boolean!
  cancelInvoice(id: ID!, reason: String): Boolean!
  updateIform(pipelineId: ID!, input: UpdateIformInput!): Boolean!
  updateIformTemp(pipelineId: ID!, input: UpdateIformTempInput!): Boolean!
  updatePipelineRepair(
    pipelineId: ID!
    input: UpdatePipelineRepairInput!
  ): Boolean!
  updateUser(id: ID!, input: UpdateUserInput!): Boolean!
  saveAnnouncement(input: AnnouncementInput!): ID!
  updateAnnouncement(id: ID!, input: AnnouncementInput!): Boolean!
  deleteAnnouncement(id: ID!): Boolean!
  saveSession(userId: ID!, invoiceDate: String!): ID!
  stopSession(userId: ID!): Boolean!
  updateSession(id: ID!, input: UpdateSessionInput!): Boolean!
  savePermissionGroup(input: PermissionGroupInput!): ID!
  updatePermissionGroup(id: ID!, input: PermissionGroupInput!): Boolean!
  deletePermissionGroup(id: ID!): Boolean!
  savePipelineComparable(
    pipelineId: ID!
    input: SavePipelineComparableInput!
  ): ID!
  updatePipelineComparable(id: ID!, mls: String!): Boolean!
  deletePipelineComparable(id: ID!): Boolean!
  saveBilling(input: SaveBillingInput!): ID!
  updateBilling(id: ID!, input: UpdateBillingInput!): Boolean!
  deleteBilling(id: ID!): Boolean!
  saveIformGrid(pipelineId: ID!, input: SaveIformGridInput!): ID!
  deleteIformGrid(id: ID!): Boolean!
  verifyPaypalTransaction(paypalOrderId: String!, billingId: ID): Boolean!
  createBillingExcel(id: String!): String!
  updateQcRequest(id: ID!, input: UpdateQcRequestInput!): Boolean!
  continueSession(userID: ID!): Boolean!
}

type Token {
  token: String
}

type Log {
  datetime: String!
  action: String!
  value: String!
  modifiedBy: String!
}

type HeaderCode {
  code: String
  value: String
}

type User {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  company: String
  phoneNumber: String
  address: String
  city: String
  state: String
  zipCode: String
  title: String
  about: String
  roles: [String]
  status: String
  hdyfu: String
  phoneConsultation: Boolean
  imABroker: Boolean
  broker: String
  brokerLicense: String
  agent: String
  agentLicense: String
  licenseDate: String
  licenseExpirationDate: String
  brokerage: String
  yearOfExperience: String
  profilePicture: String
  createdDateTime: String
  lastUpdateTime: String
  logs: [Log]
  credit: Float
  orderTotal: Int
  assignmentPercentage: Float
  companyList: [ID]
  permissionGroupId: ID
  permissionList: [String]
  priceModule: PriceModule
  disclaimer: String
  theme: String
  isEnableEmailNotification: Boolean
  tier: Int
  mao: Int
  assignDate: String
  assignActive: Int
  assignHold: Int
  assignRush: Int
  assignStandby: Int
}

type PriceModule {
  credits: Float
  orderinterior: Float
  orderexterior: Float
  orderdataEntry: Float
  orderrush: Float
  ordersuperRush: Float
  orderconditionReport: Float
  orderrentalAddendum: Float
  photoExterior: Float
  photoInteriorVacantLB: Float
  photoInteriorAppointment: Float
}

input PriceModuleInput {
  credits: Float
  orderinterior: Float
  orderexterior: Float
  orderdataEntry: Float
  orderrush: Float
  ordersuperRush: Float
  orderconditionReport: Float
  orderrentalAddendum: Float
  photoExterior: Float
  photoInteriorVacantLB: Float
  photoInteriorAppointment: Float
}

input UpdateUserInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phoneNumber: String
  company: String
  address: String
  city: String
  state: String
  zipCode: String
  roles: [String]
  status: String
  hdyfu: String
  broker: String
  brokerLicense: String
  agent: String
  agentLicense: String
  licenseDate: String
  licenseExpirationDate: String
  brokerage: String
  yearOfExperience: String
  assignmentPercentage: Float
  permissionGroupId: ID
  companyList: [ID]
  priceModule: PriceModuleInput
  theme: String
  isEnableEmailNotification: Boolean
}

type ProfileDocResult {
  totalCount: Int
  results: [Doc]
}

type AccountResult {
  totalCount: Int
  results: [Account]
}

type PipelineDocResult {
  totalCount: Int
  results: [PipelineDoc]
}

type CompanyResult {
  totalCount: Int
  results: [Company]
}

type UserResult {
  totalCount: Int
  results: [User]
}

type PipelinePhotoResult {
  totalCount: Int
  results: [PipelinePhoto]
}

type PipelineNoteResult {
  totalCount: Int
  results: [PipelineNote]
}

type PipelineQualityControlResult {
  totalCount: Int
  results: [PipelineQualityControl]
}

type Doc {
  id: ID!
  type: String!
  fileName: String!
  url: String!
  createdDateTime: String
}

type Account {
  id: ID!
  recordType: String!
  company: String!
  webSite: String!
  username: String!
  password: String!
  question1: String
  answer1: String
  question2: String
  answer2: String
  question3: String
  answer3: String
  others: String
  createdDateTime: String
  LastUpdateTime: String
  logs: [Log]
}

type Adjustment {
  id: ID!
  category: String!
  order: Int!
  label: String!
  from: Float!
  to: Float!
  value: Float!
}

type Comment {
  id: ID!
  category: String!
  label: String!
  value: String!
  section: String!
  createdDateTime: String
}

type Default {
  listingType: String!
  alwayssubmitOrder: Boolean!
  autoCompleteStandbyOrder: Boolean!
  initialSearchGla: String!
  initialSearchAge: String!
  initialSearchProximity: String!
  secondSearchGla: String!
  secondSearchAge: String!
  secondSearchProximity: String!
  secondSearchSaleDates: String!
  thirdSearchGla: String!
  thirdSearchAge: String!
  thirdSearchProximity: String!
  thirdSearchSaleDates: String!
  thirdSearchFilterByComplexName: Boolean!
  thirdSearchFilterByCity: Boolean!
  thirdSearchFilterByZip: Boolean!
  thirdSearchFilterByCountry: Boolean!
  useDefaults: Boolean!
  useIformValidations: Boolean!
  subjectType: String!
  styleDesign: String!
  exteriorFinish: String!
  condition: String!
  quality: String!
  view: String!
  pool: String!
  porchPatioDeck: String!
  firePlace: Boolean!
  basement: String!
  condo: String!
  multiUnit: String!
  mobileHome: String!
  sfd: String!
  sfaTownhouse: String!
  theme: String
  isEnableEmailNotification: Boolean
}

input RegisterInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  company: String!
  phoneNumber: String!
  address: String!
  city: String!
  state: String!
  zipCode: String!
  hdyfu: String
  phoneConsultation: Boolean
}

input SavePipelineNoteInput {
  orderNotes: String
  inspectionNotes: String
  exteriorRepairDescription1: String
  exteriorRepairPrice1: Float
  exteriorRepairDescription2: String
  exteriorRepairPrice2: Float
  exteriorRepairDescription3: String
  exteriorRepairPrice3: Float
  exteriorRepairDescription4: String
  exteriorRepairPrice4: Float
  exteriorRepairDescription5: String
  exteriorRepairPrice5: Float
  exteriorRepairDescription6: String
  exteriorRepairPrice6: Float
  exteriorRepairDescription7: String
  exteriorRepairPrice7: Float
  exteriorRepairDescription8: String
  exteriorRepairPrice8: Float
  exteriorRepairDescription9: String
  exteriorRepairPrice9: Float
  exteriorRepairDescription10: String
  exteriorRepairPrice10: Float
  exteriorRepairPriceTotal: Float
  interiorRepairDescription1: String
  interiorRepairPrice1: Float
  interiorRepairDescription2: String
  interiorRepairPrice2: Float
  interiorRepairDescription3: String
  interiorRepairPrice3: Float
  interiorRepairDescription4: String
  interiorRepairPrice4: Float
  interiorRepairDescription5: String
  interiorRepairPrice5: Float
  interiorRepairDescription6: String
  interiorRepairPrice6: Float
  interiorRepairDescription7: String
  interiorRepairPrice7: Float
  interiorRepairDescription8: String
  interiorRepairPrice8: Float
  interiorRepairDescription9: String
  interiorRepairPrice9: Float
  interiorRepairDescription10: String
  interiorRepairPrice10: Float
  interiorRepairPriceTotal: Float
}

type PipelineRepair {
  exteriorRepairDescription1: String
  exteriorRepairPrice1: Float
  exteriorRepairDescription2: String
  exteriorRepairPrice2: Float
  exteriorRepairDescription3: String
  exteriorRepairPrice3: Float
  exteriorRepairDescription4: String
  exteriorRepairPrice4: Float
  exteriorRepairDescription5: String
  exteriorRepairPrice5: Float
  exteriorRepairDescription6: String
  exteriorRepairPrice6: Float
  exteriorRepairDescription7: String
  exteriorRepairPrice7: Float
  exteriorRepairDescription8: String
  exteriorRepairPrice8: Float
  exteriorRepairDescription9: String
  exteriorRepairPrice9: Float
  exteriorRepairDescription10: String
  exteriorRepairPrice10: Float
  exteriorRepairPriceTotal: Float
  interiorRepairDescription1: String
  interiorRepairPrice1: Float
  interiorRepairDescription2: String
  interiorRepairPrice2: Float
  interiorRepairDescription3: String
  interiorRepairPrice3: Float
  interiorRepairDescription4: String
  interiorRepairPrice4: Float
  interiorRepairDescription5: String
  interiorRepairPrice5: Float
  interiorRepairDescription6: String
  interiorRepairPrice6: Float
  interiorRepairDescription7: String
  interiorRepairPrice7: Float
  interiorRepairDescription8: String
  interiorRepairPrice8: Float
  interiorRepairDescription9: String
  interiorRepairPrice9: Float
  interiorRepairDescription10: String
  interiorRepairPrice10: Float
  interiorRepairPriceTotal: Float
}

input UpdatePipelineRepairInput {
  exteriorRepairDescription1: String
  exteriorRepairPrice1: Float
  exteriorRepairDescription2: String
  exteriorRepairPrice2: Float
  exteriorRepairDescription3: String
  exteriorRepairPrice3: Float
  exteriorRepairDescription4: String
  exteriorRepairPrice4: Float
  exteriorRepairDescription5: String
  exteriorRepairPrice5: Float
  exteriorRepairDescription6: String
  exteriorRepairPrice6: Float
  exteriorRepairDescription7: String
  exteriorRepairPrice7: Float
  exteriorRepairDescription8: String
  exteriorRepairPrice8: Float
  exteriorRepairDescription9: String
  exteriorRepairPrice9: Float
  exteriorRepairDescription10: String
  exteriorRepairPrice10: Float
  exteriorRepairPriceTotal: Float
  interiorRepairDescription1: String
  interiorRepairPrice1: Float
  interiorRepairDescription2: String
  interiorRepairPrice2: Float
  interiorRepairDescription3: String
  interiorRepairPrice3: Float
  interiorRepairDescription4: String
  interiorRepairPrice4: Float
  interiorRepairDescription5: String
  interiorRepairPrice5: Float
  interiorRepairDescription6: String
  interiorRepairPrice6: Float
  interiorRepairDescription7: String
  interiorRepairPrice7: Float
  interiorRepairDescription8: String
  interiorRepairPrice8: Float
  interiorRepairDescription9: String
  interiorRepairPrice9: Float
  interiorRepairDescription10: String
  interiorRepairPrice10: Float
  interiorRepairPriceTotal: Float
}

input ProfileInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String
  company: String
  phoneNumber: String
  address: String
  city: String
  state: String
  zipCode: String
  imABroker: Boolean
  broker: String
  brokerLicense: String
  agent: String
  agentLicense: String
  licenseDate: String
  licenseExpirationDate: String
  brokerage: String
  yearOfExperience: String
  profilePicture: Upload
  disclaimer: String
  theme: String
}

input ProfileDocInput {
  type: String!
  doc: Upload!
}

input AccountInput {
  recordType: String!
  company: String!
  webSite: String!
  username: String!
  password: String!
  question1: String
  answer1: String
  question2: String
  answer2: String
  question3: String
  answer3: String
  others: String
}

input CommentInput {
  category: String!
  label: String!
  section: String!
  value: String!
}

input DefaultInput {
  listingType: String
  alwayssubmitOrder: Boolean
  autoCompleteStandbyOrder: Boolean
  initialSearchGla: String
  initialSearchAge: String
  initialSearchProximity: String
  secondSearchGla: String
  secondSearchAge: String
  secondSearchProximity: String
  secondSearchSaleDates: String
  thirdSearchGla: String
  thirdSearchAge: String
  thirdSearchProximity: String
  thirdSearchSaleDates: String
  thirdSearchFilterByComplexName: Boolean
  thirdSearchFilterByCity: Boolean
  thirdSearchFilterByZip: Boolean
  thirdSearchFilterByCountry: Boolean
  useDefaults: Boolean
  useIformValidations: Boolean
  subjectType: String
  styleDesign: String
  exteriorFinish: String
  condition: String
  quality: String
  view: String
  pool: String
  porchPatioDeck: String
  firePlace: Boolean
  basement: String
  condo: String
  multiUnit: String
  mobileHome: String
  sfd: String
  sfaTownhouse: String
  theme: String
  isEnableEmailNotification: Boolean
}

input PipelineInput {
  orderNumber: String!
  address: String!
  country: String!
  county: String
  location: String!
  zipCode: String
  company: String!
  companyId: ID
  premiumCompany: String
  premiumCompanyId: ID
  otherCompany: String
  type: String!
  orderType: String!
  objective: String
  assign: String!
  assignId: ID
  mls: String
  isRushOrder: Boolean
  isSuperRush: Boolean
  isInspection: Boolean
  isInitialBpo: Boolean
  orderFee: Float
  totalFee: Float
  isSyncedToTurboBpo: Boolean
  status: String
  authorId: ID
}

input UpdatePipelineInput {
  orderNumber: String
  address: String
  country: String
  county: String
  location: String
  zipCode: String
  company: String
  companyId: ID
  premiumCompany: String
  premiumCompanyId: ID
  otherCompany: String
  type: String
  orderType: String
  objective: String
  assign: String
  assignId: ID
  mls: String
  isRushOrder: Boolean
  isSuperRush: Boolean
  isInspection: Boolean
  isInitialBpo: Boolean
  orderFee: Float
  totalFee: Float
  isSyncedToTurboBpo: Boolean
  ratingOverAll: Int
  ratingTimeliness: Int
  ratingQuality: Int
  ratingFeedback: String
  status: String
  isProcessIform: Boolean
  isProcessIfill: Boolean
  isProcessReview: Boolean
  isForQa: Boolean
  authorId: ID
  isHold: Boolean
  holdRemarks: String
  unHoldRemarks: String
  cancelRemarks: String
}

type Pipeline {
  id: ID!
  orderNumber: String
  address: String
  country: String
  county: String
  location: String
  zipCode: String
  company: String
  companyId: ID
  premiumCompany: String
  premiumCompanyId: ID
  type: String
  orderType: String
  objective: String
  assign: String
  assignDateTime: String
  assignId: ID
  mls: String
  otherCompany: String
  isRushOrder: Boolean
  isSuperRush: Boolean
  isInspection: Boolean
  isInitialBpo: Boolean
  orderFee: Float
  totalFee: Float
  isSyncedToTurboBpo: Boolean
  createdDateTime: String
  lastUpdateTime: String
  dueDateTime: String
  holdDateTime: String
  ratingOverAll: Int
  ratingTimeliness: Int
  ratingQuality: Int
  ratingFeedback: String
  status: String
  pipelineQualityControlTotal: Int
  pipelinePhotoTotal: Int
  pipelineDocTotal: Int
  pipelineNoteTotal: Int
  authorId: String
  authorName: String
  isProcessIform: Boolean
  processIformModifiedDate: String
  isProcessIfill: Boolean
  ifillProcessModifiedDate: String
  isProcessReview: Boolean
  processReviewModifiedDate: String
  pipelineHistory: [PipelineHistory]
  assignedHistory: [PipelineAssignedHistory]
  isHold: Boolean
  holdRemarks: String
  unHoldRemarks: String
  cancelRemarks: String
  pauseDateTime: String
  isBilled: Boolean
  isQc: Boolean
}

type PipelineHistory {
  logDateTime: String
  action: String
  value: String
  modifiedBy: String
}

type PipelineAssignedHistory {
  logDateTime: String
  action: String
  assignee: String
  assigneeID: String
  assignedBy: String
  assignedByID: String
  modifiedBy: String
}

type PipelineResult {
  totalCount: Int
  results: [Pipeline]
}

type PipelineQualityControl {
  orderNotes: String
  createdBy: String
  createdDateTime: String
}

input SavePipelineQualityControlAndNoteInput {
  qualityControlId: ID!
  message: String
  category: String
  requestType: String
  status: String
}

input PipelineDocInput {
  doc: Upload!
  type: String!
}

type PipelineDoc {
  id: ID
  fileName: String
  url: String
  type: String
  createdBy: String
  createdDateTime: String
}

input PipelinePhotoInput {
  doc: Upload!
}

type PipelinePhoto {
  id: ID
  fileName: String
  fileSize: Int
  url: String
  isSubmitted: Boolean
  createdBy: String
  createdDateTime: String
}

type PipelineNote {
  id: ID
  orderNotes: String
  inspectionNotes: String
  exteriorRepairDescription1: String
  exteriorRepairPrice1: Float
  exteriorRepairDescription2: String
  exteriorRepairPrice2: Float
  exteriorRepairDescription3: String
  exteriorRepairPrice3: Float
  exteriorRepairDescription4: String
  exteriorRepairPrice4: Float
  exteriorRepairDescription5: String
  exteriorRepairPrice5: Float
  exteriorRepairDescription6: String
  exteriorRepairPrice6: Float
  exteriorRepairDescription7: String
  exteriorRepairPrice7: Float
  exteriorRepairDescription8: String
  exteriorRepairPrice8: Float
  exteriorRepairDescription9: String
  exteriorRepairPrice9: Float
  exteriorRepairDescription10: String
  exteriorRepairPrice10: Float
  exteriorRepairPriceTotal: Float
  interiorRepairDescription1: String
  interiorRepairPrice1: Float
  interiorRepairDescription2: String
  interiorRepairPrice2: Float
  interiorRepairDescription3: String
  interiorRepairPrice3: Float
  interiorRepairDescription4: String
  interiorRepairPrice4: Float
  interiorRepairDescription5: String
  interiorRepairPrice5: Float
  interiorRepairDescription6: String
  interiorRepairPrice6: Float
  interiorRepairDescription7: String
  interiorRepairPrice7: Float
  interiorRepairDescription8: String
  interiorRepairPrice8: Float
  interiorRepairDescription9: String
  interiorRepairPrice9: Float
  interiorRepairDescription10: String
  interiorRepairPrice10: Float
  interiorRepairPriceTotal: Float
  createdBy: String
  createdDateTime: String
}

input SaveCreditInput {
  paypalOrderId: String!
  paypalToken: String!
  amount: Float!
}
input AddCreditLedgerInput{
  userID: String
  amount: Float!
}

type Credit {
  id: ID
  amount: Float
  createdDateTime: String
  paypalOrderId: String
  paypalToken: String
}

input FilterInput {
  limit: Int
  offset: Int
}

input CompanyFilterInput {
  limit: Int
  offset: Int
  name: String
  isAdmin: Boolean
  isClient: Boolean
  isPremium: Boolean
}

input UserFilterInput {
  limit: Int
  offset: Int
  name: String
  status: String
  roles: [String]
  orderMonth: Int
  orderYear: Int
}

input AccountFilterInput {
  limit: Int
  offset: Int
  username: String
  userId: ID
}

input PipelineFilterInput {
  limit: Int
  offset: Int
  status: [String]
  orderNumber: String
  address: String
  country: String
  assignId: String
  company: String
  orderType: String
  dateFrom: String
  dateTo: String
  authorId: ID
  isProcessIfill: Boolean
  isProcessIform: Boolean
  isProcessReview: Boolean
  isBilled: Boolean
  qcUserId: String
  reviewerUserId: String
}

type Company {
  id: ID
  name: String
  webSite: String
  isAdmin: Boolean
  isClient: Boolean
  isPremium: Boolean
  forms: [CompanyForm]
}

type CompanyForm {
  name: String
  style: String
}

input CompanyInput {
  name: String!
  webSite: String
  isAdmin: Boolean
  isClient: Boolean
  isPremium: Boolean
  forms: [CompanyFormInput]
}

input CompanyFormInput {
  name: String
  style: String
}

input SaveUserInput {
  roles: [String!]!
  status: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  company: String!
  phoneNumber: String!
  address: String!
  city: String!
  state: String!
  zipCode: String!
  permissionGroupId: ID!
  isEnableEmailNotification: Boolean
}

type PipelineState {
  maxDailyVolume: Int
  standByAutoComplete: Int
  isRush: Boolean
  isNewOrder: Boolean
  orderMessage: String
  tTSlow: Int
  tTModerate: Int
  tTBusy: Int
  tTMax: Int
  tLSlow: String
  tLModerate: String
  tLBusy: String
  oPInterior: Float
  oPExterior: Float
  oPDataEntry: Float
  oPRush: Float
  oPSuperRush: Float
  oPConditionReport: Float
  oPRentalAddendum: Float
  oPInitialBPO: Float
  oPInspection: Float
  pCIsAcceptOrder: Boolean
  pCcatchTime: Int
  oAOfferLimitInMin: Int
  oAIsAutoAssign: Boolean
  qCElapseTime: Int
  todayOrderCount: Int
}

input UpdatePipelineStateInput {
  maxDailyVolume: Int
  standByAutoComplete: Int
  isRush: Boolean
  isNewOrder: Boolean
  orderMessage: String
  tTSlow: Int
  tTModerate: Int
  tTBusy: Int
  tTMax: Int
  tLSlow: String
  tLModerate: String
  tLBusy: String
  oPInterior: Float
  oPExterior: Float
  oPDataEntry: Float
  oPRush: Float
  oPSuperRush: Float
  oPConditionReport: Float
  oPRentalAddendum: Float
  oPInitialBPO: Float
  oPInspection: Float
  pCIsAcceptOrder: Boolean
  pCcatchTime: Int
  oAOfferLimitInMin: Int
  oAIsAutoAssign: Boolean
  qCElapseTime: Int
}

input SaveEmailTemplateInput {
  type: String!
  template: String!
  subject: String!
  message: String!
}
type EmailTemplate {
  id: ID
  type: String
  template: String
  subject: String
  message: String
}

input UpdateEmailTemplateInput {
  type: String!
  template: String!
  subject: String!
  message: String!
}

type EmailTemplateResult {
  totalCount: Int
  results: [EmailTemplate]
}

input EmailTemplateFilterInput {
  limit: Int
  offset: Int
  subject: String
}

type Header {
  id: ID
  name: String
}

type HeaderResult {
  totalCount: Int
  results: [Header]
}

input HeaderFilterInput {
  limit: Int
  offset: Int
  name: String
}

input SaveInstructionInput {
  tag: String!
  client: String
  clientId: String
  company: String
  companyId: ID
  file: Upload!
  comment: String!
}

type Instruction {
  id: ID
  tag: String
  client: String
  clientId: ID
  company: String
  companyId: ID
  url: String
  fileName: String
  comment: String
  createdDateTime: String
}

type InstructionResult {
  totalCount: Int
  results: [Instruction]
}

input InstructionFilterInput {
  limit: Int
  offset: Int
  tag: String
}

type SalesAnalytics {
  day: Int
  completedOrder: Int
}

input SalesAnalyticsFilterInput {
  year: Int
  month: Int
}

type OrderAnalytics {
  client: String
  month: Int
  unpaid: Float
  paid: Float
}

input OrderAnalyticsFilterInput {
  year: Int
  client: String
}

type QualityControl {
  id: ID
  pipelineId: ID
  orderNumber: String
  orderType: String
  orderContractor: String
  orderContractorId: ID
  clientName: String
  requests: Int
  status: String
  assignee: String
  assigneeId: ID
  address: String
  history: [QualityControlHistory]
  createdDateTime: String
  LastUpdateTime: String
}
type QualityControlHistory {
  status: String
  reason: String
  date: String
  cratedby: String
  currentAssignee: String
  newAssignee: String
}

type QualityControlResult {
  totalCount: Int
  results: [QualityControl]
}

input UpdateQualityControlInput {
  status: String
  assignId: ID
  assignReason: String
  isAcceptRequest: Boolean
  requestType: String
}

type PipelineQualityControlAndNote {
  message: String
  date: String
  category: String
  createdBy: String
}

type PipelineQualityControlAndNoteResult {
  totalCount: Int
  results: [PipelineQualityControlAndNote]
}

type PipelineNeighborhood {
  id: ID
  isReoDriven: Boolean
  marketTrend: String
  monthlyPercentage: Int
  sixmonthPercentage: Int
  annualPercentage: Int
  totalListings: Int
  supply: String
  listingsMinValue: Int
  listingsMedValue: Int
  listingsMaxValue: Int
  listingsDomAve: Int
  listingsDomRangeFrom: Int
  listingsDomRangeTo: Int
  fm: Int
  ss: Int
  reo: Int
  distressed: Int
  totalSales: Float
  demand: String
  salesMinValue: Int
  salesMedValue: Int
  salesMaxValue: Int
  salesDomRangeFrom: Int
  salesDomRangeTo: Int
  zntComments: String
  ntComments: String
}

input UpdatePipelineNeighborhoodInput {
  isReoDriven: Boolean
  marketTrend: String
  monthlyPercentage: Int
  sixmonthPercentage: Int
  annualPercentage: Int
  totalListings: Int
  supply: String
  listingsMinValue: Int
  listingsMedValue: Int
  listingsMaxValue: Int
  listingsDomAve: Int
  listingsDomRangeFrom: Int
  listingsDomRangeTo: Int
  fm: Int
  ss: Int
  reo: Int
  distressed: Int
  totalSales: Float
  demand: String
  salesMinValue: Int
  salesMedValue: Int
  salesMaxValue: Int
  salesDomRangeFrom: Int
  salesDomRangeTo: Int
  zntComments: String
  ntComments: String
}

type Balance {
  client: String
  total: Float
  paidAmount: Float
  other: Float
  unpaid: Float
}

type BalanceResult {
  totalCount: Int
  results: [Balance]
}

input BalanceFilterInput {
  limit: Int
  offset: Int
  clientName: String
}

type Checkout {
  clientName: String
  invoice: String
  total: Float
  status: String
  date: String
  url: String
}

type CheckoutResult {
  totalCount: Int
  results: [Checkout]
}

input CheckoutFilterInput {
  limit: Int
  offset: Int
  dateFrom: String
  dateTo: String
}

type Credits {
  clientName: String
  invoice: String
  credits: Float
  expiresAt: String
  date: String
}

type CreditsResult {
  totalCount: Int
  results: [Credits]
}

input CreditsFilterInput {
  limit: Int
  offset: Int
  dateFrom: String
  dateTo: String
}

type QcRating {
  contractorName: String
  month: Int
  year: Int
  noOfOders: Int
  noOfQcL: Int
  percentOfQc: Float
}

type OrderSubmit {
  coordinatorName: String
  month: Int
  year: Int
  count: Int
}

type QcCompleted {
  qualityControlName: String
  month: Int
  year: Int
  normal: Int
  fullRec: Int
  dd: Int
  total: Int
}

type Review {
  id: ID
  orderNumber: ID
  pipelineId: ID
  address: String
  assignedTo: String
  reviewDescription: String
  reviewDate: String
  reviewBy: String
  url: String
  fileName: String
}

type ReviewResult {
  totalCount: Int
  results: [Review]
}

input SaveReviewInput {
  pipelineId: ID!
  reviewDescription: String
  attachment: Upload
}

input UpdateReviewInput {
  reviewDescription: String
  attachment: Upload
}

type QcHistory {
  id: ID
  pipelineId: ID
  orderNumber: String
  address: String
  country: String
  location: String
  company: String
  type: String
  orderType: String
  objective: String
  assign: String
  assignId: ID
  mls: String
  isRushOrder: Boolean
  isSuperRush: Boolean
  isInspection: Boolean
  isInitialBpo: Boolean
  orderFee: Float
  totalFee: Float
  isSyncedToTurboBpo: Boolean
  createdDateTime: String
  lastUpdateTime: String
  ratingOverAll: Int
  ratingTimeliness: Int
  ratingQuality: Int
  ratingFeedback: String
  status: String
  pipelineQualityControlTotal: Int
  pipelinePhotoTotal: Int
  pipelineDocTotal: Int
  pipelineNoteTotal: Int
  authorId: String
  authorName: String
  isProcessIform: Boolean
  processIformModifiedDate: String
  isProcessIfill: Boolean
  ifillProcessModifiedDate: String
  isProcessReview: Boolean
  processReviewModifiedDate: String
  qcHistory: [QualityControlHistory]
}

input QcHistoryFilterInput {
  limit: Int
  offset: Int
  qrcId: ID
  clientId: ID
  companyId: ID
  dateFrom: String
  dateTo: String
}

type QcHistoryResult {
  totalCount: Int
  results: [QcHistory]
}

type QcRequest {
  id: ID
  qcId: Int
  pipelineId: ID
  orderNumber: String
  address: String
  company: String
  type: String
  qcTotal: Int
  notesTotal: Int
  orderAssignee: String
  orderAssigneeId: ID
  qcAssignee: String
  status: String
  requestDate: String
  requestType: String
}

type QcRequestResult {
  totalCount: Int
  results: [QcRequest]
}

input QcRequestFilterInput {
  orderNumber: String
  orderAssignee: String
  qcAssignee: String
  limit: Int
  offset: Int
  dateFrom: String
  dateTo: String
  status: [String]
}

input UpdateQcRequestInput {
  status: String
  requestType: String
}

type Request {
  id: ID
  status: String
  type: String
  orderType: String
  pipelineId: String
  orderNumber: String
  address: String
  company: String
  conditionType: String
  createdDateTime: String
  requestedBy: String
  requestedById: String
  remarks: String
}

type RequestResult {
  totalCount: Int
  results: [Request]
}

input RequestFilterInput {
  limit: Int
  offset: Int
  type: String
  isPending: Boolean
  isPhoto: Boolean
  dateFrom: String
  dateTo: String
  requestedById: String
}

input UpdateRequestInput {
  action: String
  conditionType: String
}

type Invoice {
  id: ID
  type: String
  name: String
  employeeId: ID
  date: String
  orderNumber: String
  address: String
  company: String
  client: String
  orderType: String
  isSuperRush: Boolean
  superRushRemarks: String
  isRush: Boolean
  rushRemarks: String
  isInterior: Boolean
  interiorRemarks: String
  isRentalAddendum: Boolean
  RentalAddendumRemarks: String
  isInitialBpo: Boolean
  initialBpoRemarks: String
  isInspection: Boolean
  inspectionRemarks: String
  isNoCsv: Boolean
  noCsvRemarks: String
  isNoIFill: Boolean
  noIFillRemarks: String
  isOtherPremium: Boolean
  otherPremiumRemarks: String
  qcType: String
}

input InvoiceFilterInput {
  dateFrom: String
  dateTo: String
  employeeId: ID
  isCancelled: Boolean
}

input UpdateInvoiceInput {
  isSuperRush: Boolean
  superRushRemarks: String
  isRush: Boolean
  rushRemarks: String
  isInterior: Boolean
  interiorRemarks: String
  isRentalAddendum: Boolean
  RentalAddendumRemarks: String
  isInitialBpo: Boolean
  initialBpoRemarks: String
  isInspection: Boolean
  inspectionRemarks: String
  isNoCsv: Boolean
  noCsvRemarks: String
  isNoIFill: Boolean
  noIFillRemarks: String
  isOtherPremium: Boolean
  otherPremiumRemarks: String
  orderType: String
}

input SaveInvoiceInput {
  type: String!
  orderNumber: String!
  qcType: String
  remarks: String
}

type InvoiceRequestHistory {
  id: ID
  dateRequested: String
  orderNumber: String
  address: String
  company: String
  remarks: String
  status: String
}

type InvoiceRequestHistoryResult {
  totalCount: Int
  results: [InvoiceRequestHistory]
}

type InvoiceRequestResult {
  totalCount: Int
  results: [Invoice]
}

input InvoiceRequestFilterInput {
  limit: Int
  offset: Int
  dateFrom: String
  dateTo: String
}

type Iform {
  id: ID
  formType: String
  pipelineId: ID
  txtClient: String
  txtCompany: String
  txtOrderNumber: String
  cmbOrderType: String
  txtAddress: String
  txtLocation: String
  txtBrokerChecker: String
  txtPreparerInfoAgent: String
  txtPreparerInfoAgentLicense: String
  txtPreparerInfoBroker: String
  txtPreparerInfoBrokerLicense: String
  txtPreparerInfoAddress: String
  txtPreparerInfoBrokerage: String
  txtPreparerInfoAgentCompany: String
  txtPreparerInfoPhone: String
  txtPreparerInfoYearsOfExperience: String
  txtPreparerInfoEmail: String
  txtSubjectAddress: String
  txtPreparerInfoMilesAwayFromSubject: String
  txtAgentZip: String
  txtAgentCity: String
  txtAgentState: String
  txtDisclaimer: String
  cmbLocation: String
  txtCounty: String
  txtTrullia: String
  txtZillow: String
  txtFindcompsnow: String
  txtAverage: String
  cmbForm: String
  cmbForm2: String
  txtSaleComp1Address: String
  txtSaleComp2Address: String
  txtSaleComp3Address: String
  txtListComp1Address: String
  txtListComp2Address: String
  txtListComp3Address: String
  txtSubjectState: String
  txtSaleComp1State: String
  txtSaleComp2State: String
  txtSaleComp3State: String
  txtListComp1State: String
  txtListComp2State: String
  txtListComp3State: String
  txtSubjectCity: String
  txtSaleComp1City: String
  txtSaleComp2City: String
  txtSaleComp3City: String
  txtListComp1City: String
  txtListComp2City: String
  txtListComp3City: String
  txtSubjectnoUnit: String
  txtSubjectUnitNo: String
  txtSaleComp1noUnit: String
  txtSaleComp1UnitNo: String
  txtSaleComp2noUnit: String
  txtSaleComp2UnitNo: String
  txtSaleComp3noUnit: String
  txtSaleComp3UnitNo: String
  txtListComp1noUnit: String
  txtListComp1UnitNo: String
  txtListComp2noUnit: String
  txtListComp2UnitNo: String
  txtListComp3noUnit: String
  txtListComp3UnitNo: String
  txtSubjectUnits: String
  txtSaleComp1Units: String
  txtSaleComp2Units: String
  txtSaleComp3Units: String
  txtListComp1Units: String
  txtListComp2Units: String
  txtListComp3Units: String
  txtSubjectZip: String
  txtSaleComp1Zip: String
  txtSaleComp2Zip: String
  txtSaleComp3Zip: String
  txtListComp1Zip: String
  txtListComp2Zip: String
  txtListComp3Zip: String
  txtSubjectProximity: String
  txtSaleComp1Proximity: String
  txtSaleComp2Proximity: String
  txtSaleComp3Proximity: String
  txtListComp1Proximity: String
  txtListComp2Proximity: String
  txtListComp3Proximity: String
  txtSubjectDataSource: String
  txtSaleComp1DataSource: String
  txtSaleComp2DataSource: String
  txtSaleComp3DataSource: String
  txtListComp1DataSource: String
  txtListComp2DataSource: String
  txtListComp3DataSource: String
  txtSubjectMLSNumber: String
  txtSaleComp1MLSNumber: String
  txtSaleComp2MLSNumber: String
  txtSaleComp3MLSNumber: String
  txtListComp1MLSNumber: String
  txtListComp2MLSNumber: String
  txtListComp3MLSNumber: String
  cmbSubjectSaleType: String
  cmbSaleComp1SaleType: String
  cmbSaleComp2SaleType: String
  cmbSaleComp3SaleType: String
  cmbListComp1SaleType: String
  cmbListComp2SaleType: String
  cmbListComp3SaleType: String
  cmbSubjectType: String
  cmbSaleComp1Type: String
  cmbSaleComp2Type: String
  cmbSaleComp3Type: String
  cmbListComp1Type: String
  cmbListComp2Type: String
  cmbListComp3Type: String
  cmbSubjectStyle: String
  cmbSaleComp1Style: String
  txtSaleComp1StyleAdjBuiltIn: String
  cmbSaleComp2Style: String
  txtSaleComp2StyleAdjBuiltIn: String
  cmbSaleComp3Style: String
  txtSaleComp3StyleAdjBuiltIn: String
  cmbListComp1Style: String
  txtListComp1StyleAdjBuiltIn: String
  cmbListComp2Style: String
  txtListComp2StyleAdjBuiltIn: String
  cmbListComp3Style: String
  txtListComp3StyleAdjBuiltIn: String
  cmbSubjectExtFinish: String
  cmbSaleComp1ExtFinish: String
  txtSaleComp1ExtFinishAdjBuiltIn: String
  cmbSaleComp2ExtFinish: String
  txtSaleComp2ExtFinishAdjBuiltIn: String
  cmbSaleComp3ExtFinish: String
  txtSaleComp3ExtFinishAdjBuiltIn: String
  cmbListComp1ExtFinish: String
  txtListComp1ExtFinishAdjBuiltIn: String
  cmbListComp2ExtFinish: String
  txtListComp2ExtFinishAdjBuiltIn: String
  cmbListComp3ExtFinish: String
  txtListComp3ExtFinishAdjBuiltIn: String
  cmbSubjectCondition: String
  cmbSaleComp1Condition: String
  txtSaleComp1ConditionAdjBuiltIn: String
  cmbSaleComp2Condition: String
  txtSaleComp2ConditionAdjBuiltIn: String
  cmbSaleComp3Condition: String
  txtSaleComp3ConditionAdjBuiltIn: String
  cmbListComp1Condition: String
  txtListComp1ConditionAdjBuiltIn: String
  cmbListComp2Condition: String
  txtListComp2ConditionAdjBuiltIn: String
  cmbListComp3Condition: String
  txtListComp3ConditionAdjBuiltIn: String
  cmbSubjectQuality: String
  cmbSaleComp1Quality: String
  txtSaleComp1QualityAdjBuiltIn: String
  cmbSaleComp2Quality: String
  txtSaleComp2QualityAdjBuiltIn: String
  cmbSaleComp3Quality: String
  txtSaleComp3QualityAdjBuiltIn: String
  cmbListComp1Quality: String
  txtListComp1QualityAdjBuiltIn: String
  cmbListComp2Quality: String
  txtListComp2QualityAdjBuiltIn: String
  cmbListComp3Quality: String
  txtListComp3QualityAdjBuiltIn: String
  cmbSubjectView: String
  cmbSaleComp1View: String
  txtSaleComp1ViewAdjBuiltIn: String
  cmbSaleComp2View: String
  txtSaleComp2ViewAdjBuiltIn: String
  cmbSaleComp3View: String
  txtSaleComp3ViewAdjBuiltIn: String
  cmbListComp1View: String
  txtListComp1ViewAdjBuiltIn: String
  cmbListComp2View: String
  txtListComp2ViewAdjBuiltIn: String
  cmbListComp3View: String
  txtListComp3ViewAdjBuiltIn: String
  txtSubjectSubdivision: String
  txtSaleComp1Subdivision: String
  txtSaleComp2Subdivision: String
  txtSaleComp3Subdivision: String
  txtListComp1Subdivision: String
  txtListComp2Subdivision: String
  txtListComp3Subdivision: String
  txtSubjectHOAFee: String
  txtSaleComp1HOAFee: String
  txtSaleComp2HOAFee: String
  txtSaleComp3HOAFee: String
  txtListComp1HOAFee: String
  txtListComp2HOAFee: String
  txtListComp3HOAFee: String
  txtSubjectTotalRooms: String
  txtSaleComp1TotalRooms: String
  txtSaleComp1TotalRoomsAdjBuiltIn: String
  txtSaleComp2TotalRooms: String
  txtSaleComp2TotalRoomsAdjBuiltIn: String
  txtSaleComp3TotalRooms: String
  txtSaleComp3TotalRoomsAdjBuiltIn: String
  txtListComp1TotalRooms: String
  txtListComp1TotalRoomsAdjBuiltIn: String
  txtListComp2TotalRooms: String
  txtListComp2TotalRoomsAdjBuiltIn: String
  txtListComp3TotalRooms: String
  txtListComp3TotalRoomsAdjBuiltIn: String
  txtSubjectBedrooms: String
  txtSaleComp1Bedrooms: String
  txtSaleComp1BedroomsAdjBuiltIn: String
  txtSaleComp2Bedrooms: String
  txtSaleComp2BedroomsAdjBuiltIn: String
  txtSaleComp3Bedrooms: String
  txtSaleComp3BedroomsAdjBuiltIn: String
  txtListComp1Bedrooms: String
  txtListComp1BedroomsAdjBuiltIn: String
  txtListComp2Bedrooms: String
  txtListComp2BedroomsAdjBuiltIn: String
  txtListComp3Bedrooms: String
  txtListComp3BedroomsAdjBuiltIn: String
  txtSubjectFullBaths: String
  txtSaleComp1FullBaths: String
  txtSaleComp1FullBathsAdjBuiltIn: String
  txtSaleComp2FullBaths: String
  txtSaleComp2FullBathsAdjBuiltIn: String
  txtSaleComp3FullBaths: String
  txtSaleComp3FullBathsAdjBuiltIn: String
  txtListComp1FullBaths: String
  txtListComp1FullBathsAdjBuiltIn: String
  txtListComp2FullBaths: String
  txtListComp2FullBathsAdjBuiltIn: String
  txtListComp3FullBaths: String
  txtListComp3FullBathsAdjBuiltIn: String
  txtSubjectHalfBaths: String
  txtSaleComp1HalfBaths: String
  txtSaleComp1HalfBathsAdjBuiltIn: String
  txtSaleComp2HalfBaths: String
  txtSaleComp2HalfBathsAdjBuiltIn: String
  txtSaleComp3HalfBaths: String
  txtSaleComp3HalfBathsAdjBuiltIn: String
  txtListComp1HalfBaths: String
  txtListComp1HalfBathsAdjBuiltIn: String
  txtListComp2HalfBaths: String
  txtListComp2HalfBathsAdjBuiltIn: String
  txtListComp3HalfBaths: String
  txtListComp3HalfBathsAdjBuiltIn: String
  txtSubjectGLA: String
  txtSaleComp1GLA: String
  txtSaleComp1GLAAdjBuiltIn: String
  txtSaleComp2GLA: String
  txtSaleComp2GLAAdjBuiltIn: String
  txtSaleComp3GLA: String
  txtSaleComp3GLAAdjBuiltIn: String
  txtListComp1GLA: String
  txtListComp1GLAAdjBuiltIn: String
  txtListComp2GLA: String
  txtListComp2GLAAdjBuiltIn: String
  txtListComp3GLA: String
  txtListComp3GLAAdjBuiltIn: String
  txtSubjectYearBuilt: String
  txtSaleComp1YearBuilt: String
  txtSaleComp1YearBuiltAdjBuiltIn: String
  txtSaleComp2YearBuilt: String
  txtSaleComp2YearBuiltAdjBuiltIn: String
  txtSaleComp3YearBuilt: String
  txtSaleComp3YearBuiltAdjBuiltIn: String
  txtListComp1YearBuilt: String
  txtListComp1YearBuiltAdjBuiltIn: String
  txtListComp2YearBuilt: String
  txtListComp2YearBuiltAdjBuiltIn: String
  txtListComp3YearBuilt: String
  txtListComp3YearBuiltAdjBuiltIn: String
  txtSubjectAge: String
  txtSaleComp1Age: String
  txtSaleComp2Age: String
  txtSaleComp3Age: String
  txtListComp1Age: String
  txtListComp2Age: String
  txtListComp3Age: String
  txtSubjectAcres: String
  txtSaleComp1Acres: String
  txtSaleComp1AcresAdjBuiltIn: String
  txtSaleComp2Acres: String
  txtSaleComp2AcresAdjBuiltIn: String
  txtSaleComp3Acres: String
  txtSaleComp3AcresAdjBuiltIn: String
  txtListComp1Acres: String
  txtListComp1AcresAdjBuiltIn: String
  txtListComp2Acres: String
  txtListComp2AcresAdjBuiltIn: String
  txtListComp3Acres: String
  txtListComp3AcresAdjBuiltIn: String
  txtSubjectSquareFeet: String
  txtSaleComp1SquareFeet: String
  txtSaleComp2SquareFeet: String
  txtSaleComp3SquareFeet: String
  txtListComp1SquareFeet: String
  txtListComp2SquareFeet: String
  txtListComp3SquareFeet: String
  cmbSubjectGarage: String
  cmbSaleComp1Garage: String
  txtSaleComp1GarageAdjBuiltIn: String
  cmbSaleComp2Garage: String
  txtSaleComp2GarageAdjBuiltIn: String
  cmbSaleComp3Garage: String
  txtSaleComp3GarageAdjBuiltIn: String
  cmbListComp1Garage: String
  txtListComp1GarageAdjBuiltIn: String
  cmbListComp2Garage: String
  txtListComp2GarageAdjBuiltIn: String
  cmbListComp3Garage: String
  txtListComp3GarageAdjBuiltIn: String
  cmbSubjectPool: String
  cmbSaleComp1Pool: String
  txtSaleComp1PoolAdjBuiltIn: String
  cmbSaleComp2Pool: String
  txtSaleComp2PoolAdjBuiltIn: String
  cmbSaleComp3Pool: String
  txtSaleComp3PoolAdjBuiltIn: String
  cmbListComp1Pool: String
  txtListComp1PoolAdjBuiltIn: String
  cmbListComp2Pool: String
  txtListComp2PoolAdjBuiltIn: String
  cmbListComp3Pool: String
  txtListComp3PoolAdjBuiltIn: String
  cmbSubjectPorchPatioDeck: String
  cmbSaleComp1PorchPatioDeck: String
  txtSaleComp1PorchPatioDeckAdjBuiltIn: String
  cmbSaleComp2PorchPatioDeck: String
  txtSaleComp2PorchPatioDeckAdjBuiltIn: String
  cmbSaleComp3PorchPatioDeck: String
  txtSaleComp3PorchPatioDeckAdjBuiltIn: String
  cmbListComp1PorchPatioDeck: String
  txtListComp1PorchPatioDeckAdjBuiltIn: String
  cmbListComp2PorchPatioDeck: String
  txtListComp2PorchPatioDeckAdjBuiltIn: String
  cmbListComp3PorchPatioDeck: String
  txtListComp3PorchPatioDeckAdjBuiltIn: String
  cmbSubjectFireplace: String
  cmbSaleComp1Fireplace: String
  txtSaleComp1FireplaceAdjBuiltIn: String
  cmbSaleComp2Fireplace: String
  txtSaleComp2FireplaceAdjBuiltIn: String
  cmbSaleComp3Fireplace: String
  txtSaleComp3FireplaceAdjBuiltIn: String
  cmbListComp1Fireplace: String
  txtListComp1FireplaceAdjBuiltIn: String
  cmbListComp2Fireplace: String
  txtListComp2FireplaceAdjBuiltIn: String
  cmbListComp3Fireplace: String
  txtListComp3FireplaceAdjBuiltIn: String
  cmbSubjectBasement: String
  cmbSaleComp1Basement: String
  txtSaleComp1BasementAdjBuiltIn: String
  cmbSaleComp2Basement: String
  txtSaleComp2BasementAdjBuiltIn: String
  cmbSaleComp3Basement: String
  txtSaleComp3BasementAdjBuiltIn: String
  cmbListComp1Basement: String
  txtListComp1BasementAdjBuiltIn: String
  cmbListComp2Basement: String
  txtListComp2BasementAdjBuiltIn: String
  cmbListComp3Basement: String
  txtListComp3BasementAdjBuiltIn: String
  cmbSubjectIsFinished: String
  cmbSaleComp1IsFinished: String
  txtSaleComp1IsFinishedAdjBuiltIn: String
  cmbSaleComp2IsFinished: String
  txtSaleComp2IsFinishedAdjBuiltIn: String
  cmbSaleComp3IsFinished: String
  txtSaleComp3IsFinishedAdjBuiltIn: String
  cmbListComp1IsFinished: String
  txtListComp1IsFinishedAdjBuiltIn: String
  cmbListComp2IsFinished: String
  txtListComp2IsFinishedAdjBuiltIn: String
  cmbListComp3IsFinished: String
  txtListComp3IsFinishedAdjBuiltIn: String
  cmbSubjectPercentFinished: String
  cmbSaleComp1PercentFinished: String
  txtSaleComp1PercentFinishedAdjBuiltIn: String
  cmbSaleComp2PercentFinished: String
  txtSaleComp2PercentFinishedAdjBuiltIn: String
  cmbSaleComp3PercentFinished: String
  txtSaleComp3PercentFinishedAdjBuiltIn: String
  cmbListComp1PercentFinished: String
  txtListComp1PercentFinishedAdjBuiltIn: String
  cmbListComp2PercentFinished: String
  txtListComp2PercentFinishedAdjBuiltIn: String
  cmbListComp3PercentFinished: String
  txtListComp3PercentFinishedAdjBuiltIn: String
  txtSubjectBasementSqFt: String
  txtSaleComp1BasementSqFt: String
  txtSaleComp1BasementSqFtAdjBuiltIn: String
  txtSaleComp2BasementSqFt: String
  txtSaleComp2BasementSqFtAdjBuiltIn: String
  txtSaleComp3BasementSqFt: String
  txtSaleComp3BasementSqFtAdjBuiltIn: String
  txtListComp1BasementSqFt: String
  txtListComp1BasementSqFtAdjBuiltIn: String
  txtListComp2BasementSqFt: String
  txtListComp2BasementSqFtAdjBuiltIn: String
  txtListComp3BasementSqFt: String
  txtListComp3BasementSqFtAdjBuiltIn: String
  txtSubjectOriginalListDate: String
  txtSaleComp1OriginalListDate: String
  txtSaleComp2OriginalListDate: String
  txtSaleComp3OriginalListDate: String
  txtListComp1OriginalListDate: String
  txtListComp2OriginalListDate: String
  txtListComp3OriginalListDate: String
  txtSubjectCurrentListDate: String
  txtSaleComp1CurrentListDate: String
  txtSaleComp2CurrentListDate: String
  txtSaleComp3CurrentListDate: String
  txtListComp1CurrentListDate: String
  txtListComp2CurrentListDate: String
  txtListComp3CurrentListDate: String
  txtSubjectOriginalListPrice: String
  txtSaleComp1OriginalListPrice: String
  txtSaleComp2OriginalListPrice: String
  txtSaleComp3OriginalListPrice: String
  txtListComp1OriginalListPrice: String
  txtListComp2OriginalListPrice: String
  txtListComp3OriginalListPrice: String
  txtSubjectListPrice: String
  txtSaleComp1ListPrice: String
  txtSaleComp2ListPrice: String
  txtSaleComp3ListPrice: String
  txtListComp1ListPrice: String
  txtListComp2ListPrice: String
  txtListComp3ListPrice: String
  txtSubjectSalePrice: String
  txtSaleComp1SalePrice: String
  txtSaleComp2SalePrice: String
  txtSaleComp3SalePrice: String
  txtSubjectSaleDate: String
  txtSaleComp1SaleDate: String
  txtSaleComp2SaleDate: String
  txtSaleComp3SaleDate: String
  cmbSubjectFinancing: String
  cmbSaleComp1Financing: String
  cmbSaleComp2Financing: String
  cmbSaleComp3Financing: String
  cmbListComp1Financing: String
  cmbListComp2Financing: String
  cmbListComp3Financing: String
  txtSubjectDOM: String
  txtSaleComp1DOM: String
  txtSaleComp2DOM: String
  txtSaleComp3DOM: String
  txtListComp1DOM: String
  txtListComp2DOM: String
  txtListComp3DOM: String
  txtSubjectPricePerSqFt: String
  txtSaleComp1PricePerSqFt: String
  txtSaleComp2PricePerSqFt: String
  txtSaleComp3PricePerSqFt: String
  txtListComp1PricePerSqFt: String
  txtListComp2PricePerSqFt: String
  txtListComp3PricePerSqFt: String
  txtSubjectAdjustments: String
  txtSaleComp1Adjustments: String
  txtSaleComp2Adjustments: String
  txtSaleComp3Adjustments: String
  txtListComp1Adjustments: String
  txtListComp2Adjustments: String
  txtListComp3Adjustments: String
  txtSubjectCompTotals: String
  txtSaleComp1CompTotals: String
  txtSaleComp2CompTotals: String
  txtSaleComp3CompTotals: String
  txtListComp1CompTotals: String
  txtListComp2CompTotals: String
  txtListComp3CompTotals: String
  cmbListComp1CommentType: String
  txtListComp1ComparableComments: String
  txtListComp1FormatAdjustments: String
  txtListComp1MLSComments: String
  cmbListComp2CommentType: String
  txtListComp2ComparableComments: String
  txtListComp2FormatAdjustments: String
  txtListComp2MLSComments: String
  cmbListComp3CommentType: String
  txtListComp3ComparableComments: String
  txtListComp3FormatAdjustments: String
  txtListComp3MLSComments: String
  cmbSaleComp1CommentType: String
  txtSaleComp1ComparableComments: String
  txtSaleComp1FormatAdjustments: String
  txtSaleComp1MLSComments: String
  cmbSaleComp2CommentType: String
  txtSaleComp2ComparableComments: String
  txtSaleComp2FormatAdjustments: String
  txtSaleComp2MLSComments: String
  cmbSaleComp3CommentType: String
  txtSaleComp3ComparableComments: String
  txtSaleComp3FormatAdjustments: String
  txtSaleComp3MLSComments: String
  cmbNeighborhoodTrend: String
  txtMonthlyPecent: String
  txtEstimatedRent: String
  txtEstimatedDaysOnMarket: String
  txtNoBoarded: String
  txtNoOfActive: String
  txt6MonthPecent: String
  txtAnnualPecent: String
  txtListings: String
  cmbSupply: String
  txtListingsMinValue: String
  txtListingsRange1: String
  txtListingsMedValue: String
  txtListingsMaxValue: String
  txtListingsRange2: String
  txtListingsDOM: String
  txtListingsDOMRange1: String
  txtListingsDOMRange2: String
  cmbREOTrend: String
  txtNoOfFM: String
  txtNoOfSS: String
  txtNoOfREO: String
  txtNoOfDistressed: String
  txtSales: String
  cmbDemand: String
  txtSalesRange1: String
  txtSalesMedValue: String
  txtSalesRange2: String
  txtSalesDOM: String
  txtSalesDOMRange1: String
  txtSalesDOMRange2: String
  txtZillowNeighborhoodTrend: String
  txtNeighborhoodTrendComments: String
  txtTotalListings: String
  txtTotalSales: String
  txtNoOfREOListings: String
  txtNoOfSSListings: String
  txtNoOfREOSales: String
  txtNoOfSSSales: String
  txtTaxID: String
  txtLastSaleDate: String
  txtLastSalePrice: String
  cmbIsListed: String
  txtOwnerOccupied: String
  txtRenterOccupied: String
  txtMarketRent: String
  txtNoOfRentals: String
  txtTypicalDOM: String
  txtNoRentHomes: String
  txtTypicalRentalRates: String
  adjustmentPrice: String
  txtCalculatedGLA: String
  txtCalculatedAge: String
  txtCalculatedSaleDates: String
  txtCalculatedProximity: String
  txtCalculatedStyle: String
  txtCalculatedMonthsSupply: String
  txtCalculatedProxim: String
  txtCalculatedGLAs: String
  txtCalculatedAges: String
  txtCalculatedCond: String
  txtCalculatedView: String
  txtCalculatedStyle1: String
  txtCalculatedLots: String
  txtCalculatedBeds: String
  txtCalculatedBath: String
  rdbresaletext: String
  rdbmarketedtext: String
  txtpmi: String
  txtOtherComments: String
  txtcbnew: String
  txtcbold: String
  txtcbstyle: String
  txtcblot: String
  txtcbview: String
  txtcbdamage: String
  txtcbupgrade: String
  txtcbinfluence: String
  txtSubjectComments: String
  txtNeighborhoodComments: String
  txtNeighborhoodTrend: String
  txtValidation1: String
  txtUniqueComments: String
  txtMarketingStrategy: String
  txtDisclaimer2: String
  txtBrokerComments: String
  txtValidation: String
  txt30DayQuickSale: String
  txt60DayQuickSale: String
  txt90DayAsIsValue: String
  txt120DayQuickSale: String
  txt180DayQuickSale: String
  txtListPriceFinalValues: String
  txt30DayListPriceFinalValues: String
  txt30DayQuickSaleRepaired: String
  txt60DayQuickSaleRepaired: String
  txt90DayAsIsValueRepaired: String
  txt120DayQuickSaleRepaired: String
  txt180DayQuickSaleRepaired: String
  txtListPriceRepaired: String
  txt30DayListPriceRepaired: String
  cmbHouse: String
  cmbPositive: String
  cmbNegative: String
  cmbView: String
  cmbMarket: String
  cmbPricing: String
  cmbListing: String
  cmbExtra: String
  txtUnique: String
  priceComment: String
  rangeComment: String
  proxException: String
  glaException: String
  ageException: String
  condException: String
  viewException: String
  styleException: String
  lotException: String
  bedException: String
  bathException: String
  history: [IformHistory]
}

type IformTemp {
  id: ID
  formType: String
  pipelineId: ID
  txtClient: String
  txtCompany: String
  txtOrderNumber: String
  cmbOrderType: String
  txtAddress: String
  txtLocation: String
  txtBrokerChecker: String
  txtPreparerInfoAgent: String
  txtPreparerInfoAgentLicense: String
  txtPreparerInfoBroker: String
  txtPreparerInfoBrokerLicense: String
  txtPreparerInfoAddress: String
  txtPreparerInfoBrokerage: String
  txtPreparerInfoAgentCompany: String
  txtPreparerInfoPhone: String
  txtPreparerInfoYearsOfExperience: String
  txtPreparerInfoEmail: String
  txtSubjectAddress: String
  txtPreparerInfoMilesAwayFromSubject: String
  txtAgentZip: String
  txtAgentCity: String
  txtAgentState: String
  txtDisclaimer: String
  cmbLocation: String
  txtCounty: String
  txtTrullia: String
  txtZillow: String
  txtFindcompsnow: String
  txtAverage: String
  cmbForm: String
  cmbForm2: String
  txtSaleComp1Address: String
  txtSaleComp2Address: String
  txtSaleComp3Address: String
  txtListComp1Address: String
  txtListComp2Address: String
  txtListComp3Address: String
  txtSubjectState: String
  txtSaleComp1State: String
  txtSaleComp2State: String
  txtSaleComp3State: String
  txtListComp1State: String
  txtListComp2State: String
  txtListComp3State: String
  txtSubjectCity: String
  txtSaleComp1City: String
  txtSaleComp2City: String
  txtSaleComp3City: String
  txtListComp1City: String
  txtListComp2City: String
  txtListComp3City: String
  txtSubjectnoUnit: String
  txtSubjectUnitNo: String
  txtSaleComp1noUnit: String
  txtSaleComp1UnitNo: String
  txtSaleComp2noUnit: String
  txtSaleComp2UnitNo: String
  txtSaleComp3noUnit: String
  txtSaleComp3UnitNo: String
  txtListComp1noUnit: String
  txtListComp1UnitNo: String
  txtListComp2noUnit: String
  txtListComp2UnitNo: String
  txtListComp3noUnit: String
  txtListComp3UnitNo: String
  txtSubjectUnits: String
  txtSaleComp1Units: String
  txtSaleComp2Units: String
  txtSaleComp3Units: String
  txtListComp1Units: String
  txtListComp2Units: String
  txtListComp3Units: String
  txtSubjectZip: String
  txtSaleComp1Zip: String
  txtSaleComp2Zip: String
  txtSaleComp3Zip: String
  txtListComp1Zip: String
  txtListComp2Zip: String
  txtListComp3Zip: String
  txtSubjectProximity: String
  txtSaleComp1Proximity: String
  txtSaleComp2Proximity: String
  txtSaleComp3Proximity: String
  txtListComp1Proximity: String
  txtListComp2Proximity: String
  txtListComp3Proximity: String
  txtSubjectDataSource: String
  txtSaleComp1DataSource: String
  txtSaleComp2DataSource: String
  txtSaleComp3DataSource: String
  txtListComp1DataSource: String
  txtListComp2DataSource: String
  txtListComp3DataSource: String
  txtSubjectMLSNumber: String
  txtSaleComp1MLSNumber: String
  txtSaleComp2MLSNumber: String
  txtSaleComp3MLSNumber: String
  txtListComp1MLSNumber: String
  txtListComp2MLSNumber: String
  txtListComp3MLSNumber: String
  cmbSubjectSaleType: String
  cmbSaleComp1SaleType: String
  cmbSaleComp2SaleType: String
  cmbSaleComp3SaleType: String
  cmbListComp1SaleType: String
  cmbListComp2SaleType: String
  cmbListComp3SaleType: String
  cmbSubjectType: String
  cmbSaleComp1Type: String
  cmbSaleComp2Type: String
  cmbSaleComp3Type: String
  cmbListComp1Type: String
  cmbListComp2Type: String
  cmbListComp3Type: String
  cmbSubjectStyle: String
  cmbSaleComp1Style: String
  txtSaleComp1StyleAdjBuiltIn: String
  cmbSaleComp2Style: String
  txtSaleComp2StyleAdjBuiltIn: String
  cmbSaleComp3Style: String
  txtSaleComp3StyleAdjBuiltIn: String
  cmbListComp1Style: String
  txtListComp1StyleAdjBuiltIn: String
  cmbListComp2Style: String
  txtListComp2StyleAdjBuiltIn: String
  cmbListComp3Style: String
  txtListComp3StyleAdjBuiltIn: String
  cmbSubjectExtFinish: String
  cmbSaleComp1ExtFinish: String
  txtSaleComp1ExtFinishAdjBuiltIn: String
  cmbSaleComp2ExtFinish: String
  txtSaleComp2ExtFinishAdjBuiltIn: String
  cmbSaleComp3ExtFinish: String
  txtSaleComp3ExtFinishAdjBuiltIn: String
  cmbListComp1ExtFinish: String
  txtListComp1ExtFinishAdjBuiltIn: String
  cmbListComp2ExtFinish: String
  txtListComp2ExtFinishAdjBuiltIn: String
  cmbListComp3ExtFinish: String
  txtListComp3ExtFinishAdjBuiltIn: String
  cmbSubjectCondition: String
  cmbSaleComp1Condition: String
  txtSaleComp1ConditionAdjBuiltIn: String
  cmbSaleComp2Condition: String
  txtSaleComp2ConditionAdjBuiltIn: String
  cmbSaleComp3Condition: String
  txtSaleComp3ConditionAdjBuiltIn: String
  cmbListComp1Condition: String
  txtListComp1ConditionAdjBuiltIn: String
  cmbListComp2Condition: String
  txtListComp2ConditionAdjBuiltIn: String
  cmbListComp3Condition: String
  txtListComp3ConditionAdjBuiltIn: String
  cmbSubjectQuality: String
  cmbSaleComp1Quality: String
  txtSaleComp1QualityAdjBuiltIn: String
  cmbSaleComp2Quality: String
  txtSaleComp2QualityAdjBuiltIn: String
  cmbSaleComp3Quality: String
  txtSaleComp3QualityAdjBuiltIn: String
  cmbListComp1Quality: String
  txtListComp1QualityAdjBuiltIn: String
  cmbListComp2Quality: String
  txtListComp2QualityAdjBuiltIn: String
  cmbListComp3Quality: String
  txtListComp3QualityAdjBuiltIn: String
  cmbSubjectView: String
  cmbSaleComp1View: String
  txtSaleComp1ViewAdjBuiltIn: String
  cmbSaleComp2View: String
  txtSaleComp2ViewAdjBuiltIn: String
  cmbSaleComp3View: String
  txtSaleComp3ViewAdjBuiltIn: String
  cmbListComp1View: String
  txtListComp1ViewAdjBuiltIn: String
  cmbListComp2View: String
  txtListComp2ViewAdjBuiltIn: String
  cmbListComp3View: String
  txtListComp3ViewAdjBuiltIn: String
  txtSubjectSubdivision: String
  txtSaleComp1Subdivision: String
  txtSaleComp2Subdivision: String
  txtSaleComp3Subdivision: String
  txtListComp1Subdivision: String
  txtListComp2Subdivision: String
  txtListComp3Subdivision: String
  txtSubjectHOAFee: String
  txtSaleComp1HOAFee: String
  txtSaleComp2HOAFee: String
  txtSaleComp3HOAFee: String
  txtListComp1HOAFee: String
  txtListComp2HOAFee: String
  txtListComp3HOAFee: String
  txtSubjectTotalRooms: String
  txtSaleComp1TotalRooms: String
  txtSaleComp1TotalRoomsAdjBuiltIn: String
  txtSaleComp2TotalRooms: String
  txtSaleComp2TotalRoomsAdjBuiltIn: String
  txtSaleComp3TotalRooms: String
  txtSaleComp3TotalRoomsAdjBuiltIn: String
  txtListComp1TotalRooms: String
  txtListComp1TotalRoomsAdjBuiltIn: String
  txtListComp2TotalRooms: String
  txtListComp2TotalRoomsAdjBuiltIn: String
  txtListComp3TotalRooms: String
  txtListComp3TotalRoomsAdjBuiltIn: String
  txtSubjectBedrooms: String
  txtSaleComp1Bedrooms: String
  txtSaleComp1BedroomsAdjBuiltIn: String
  txtSaleComp2Bedrooms: String
  txtSaleComp2BedroomsAdjBuiltIn: String
  txtSaleComp3Bedrooms: String
  txtSaleComp3BedroomsAdjBuiltIn: String
  txtListComp1Bedrooms: String
  txtListComp1BedroomsAdjBuiltIn: String
  txtListComp2Bedrooms: String
  txtListComp2BedroomsAdjBuiltIn: String
  txtListComp3Bedrooms: String
  txtListComp3BedroomsAdjBuiltIn: String
  txtSubjectFullBaths: String
  txtSaleComp1FullBaths: String
  txtSaleComp1FullBathsAdjBuiltIn: String
  txtSaleComp2FullBaths: String
  txtSaleComp2FullBathsAdjBuiltIn: String
  txtSaleComp3FullBaths: String
  txtSaleComp3FullBathsAdjBuiltIn: String
  txtListComp1FullBaths: String
  txtListComp1FullBathsAdjBuiltIn: String
  txtListComp2FullBaths: String
  txtListComp2FullBathsAdjBuiltIn: String
  txtListComp3FullBaths: String
  txtListComp3FullBathsAdjBuiltIn: String
  txtSubjectHalfBaths: String
  txtSaleComp1HalfBaths: String
  txtSaleComp1HalfBathsAdjBuiltIn: String
  txtSaleComp2HalfBaths: String
  txtSaleComp2HalfBathsAdjBuiltIn: String
  txtSaleComp3HalfBaths: String
  txtSaleComp3HalfBathsAdjBuiltIn: String
  txtListComp1HalfBaths: String
  txtListComp1HalfBathsAdjBuiltIn: String
  txtListComp2HalfBaths: String
  txtListComp2HalfBathsAdjBuiltIn: String
  txtListComp3HalfBaths: String
  txtListComp3HalfBathsAdjBuiltIn: String
  txtSubjectGLA: String
  txtSaleComp1GLA: String
  txtSaleComp1GLAAdjBuiltIn: String
  txtSaleComp2GLA: String
  txtSaleComp2GLAAdjBuiltIn: String
  txtSaleComp3GLA: String
  txtSaleComp3GLAAdjBuiltIn: String
  txtListComp1GLA: String
  txtListComp1GLAAdjBuiltIn: String
  txtListComp2GLA: String
  txtListComp2GLAAdjBuiltIn: String
  txtListComp3GLA: String
  txtListComp3GLAAdjBuiltIn: String
  txtSubjectYearBuilt: String
  txtSaleComp1YearBuilt: String
  txtSaleComp1YearBuiltAdjBuiltIn: String
  txtSaleComp2YearBuilt: String
  txtSaleComp2YearBuiltAdjBuiltIn: String
  txtSaleComp3YearBuilt: String
  txtSaleComp3YearBuiltAdjBuiltIn: String
  txtListComp1YearBuilt: String
  txtListComp1YearBuiltAdjBuiltIn: String
  txtListComp2YearBuilt: String
  txtListComp2YearBuiltAdjBuiltIn: String
  txtListComp3YearBuilt: String
  txtListComp3YearBuiltAdjBuiltIn: String
  txtSubjectAge: String
  txtSaleComp1Age: String
  txtSaleComp2Age: String
  txtSaleComp3Age: String
  txtListComp1Age: String
  txtListComp2Age: String
  txtListComp3Age: String
  txtSubjectAcres: String
  txtSaleComp1Acres: String
  txtSaleComp1AcresAdjBuiltIn: String
  txtSaleComp2Acres: String
  txtSaleComp2AcresAdjBuiltIn: String
  txtSaleComp3Acres: String
  txtSaleComp3AcresAdjBuiltIn: String
  txtListComp1Acres: String
  txtListComp1AcresAdjBuiltIn: String
  txtListComp2Acres: String
  txtListComp2AcresAdjBuiltIn: String
  txtListComp3Acres: String
  txtListComp3AcresAdjBuiltIn: String
  txtSubjectSquareFeet: String
  txtSaleComp1SquareFeet: String
  txtSaleComp2SquareFeet: String
  txtSaleComp3SquareFeet: String
  txtListComp1SquareFeet: String
  txtListComp2SquareFeet: String
  txtListComp3SquareFeet: String
  cmbSubjectGarage: String
  cmbSaleComp1Garage: String
  txtSaleComp1GarageAdjBuiltIn: String
  cmbSaleComp2Garage: String
  txtSaleComp2GarageAdjBuiltIn: String
  cmbSaleComp3Garage: String
  txtSaleComp3GarageAdjBuiltIn: String
  cmbListComp1Garage: String
  txtListComp1GarageAdjBuiltIn: String
  cmbListComp2Garage: String
  txtListComp2GarageAdjBuiltIn: String
  cmbListComp3Garage: String
  txtListComp3GarageAdjBuiltIn: String
  cmbSubjectPool: String
  cmbSaleComp1Pool: String
  txtSaleComp1PoolAdjBuiltIn: String
  cmbSaleComp2Pool: String
  txtSaleComp2PoolAdjBuiltIn: String
  cmbSaleComp3Pool: String
  txtSaleComp3PoolAdjBuiltIn: String
  cmbListComp1Pool: String
  txtListComp1PoolAdjBuiltIn: String
  cmbListComp2Pool: String
  txtListComp2PoolAdjBuiltIn: String
  cmbListComp3Pool: String
  txtListComp3PoolAdjBuiltIn: String
  cmbSubjectPorchPatioDeck: String
  cmbSaleComp1PorchPatioDeck: String
  txtSaleComp1PorchPatioDeckAdjBuiltIn: String
  cmbSaleComp2PorchPatioDeck: String
  txtSaleComp2PorchPatioDeckAdjBuiltIn: String
  cmbSaleComp3PorchPatioDeck: String
  txtSaleComp3PorchPatioDeckAdjBuiltIn: String
  cmbListComp1PorchPatioDeck: String
  txtListComp1PorchPatioDeckAdjBuiltIn: String
  cmbListComp2PorchPatioDeck: String
  txtListComp2PorchPatioDeckAdjBuiltIn: String
  cmbListComp3PorchPatioDeck: String
  txtListComp3PorchPatioDeckAdjBuiltIn: String
  cmbSubjectFireplace: String
  cmbSaleComp1Fireplace: String
  txtSaleComp1FireplaceAdjBuiltIn: String
  cmbSaleComp2Fireplace: String
  txtSaleComp2FireplaceAdjBuiltIn: String
  cmbSaleComp3Fireplace: String
  txtSaleComp3FireplaceAdjBuiltIn: String
  cmbListComp1Fireplace: String
  txtListComp1FireplaceAdjBuiltIn: String
  cmbListComp2Fireplace: String
  txtListComp2FireplaceAdjBuiltIn: String
  cmbListComp3Fireplace: String
  txtListComp3FireplaceAdjBuiltIn: String
  cmbSubjectBasement: String
  cmbSaleComp1Basement: String
  txtSaleComp1BasementAdjBuiltIn: String
  cmbSaleComp2Basement: String
  txtSaleComp2BasementAdjBuiltIn: String
  cmbSaleComp3Basement: String
  txtSaleComp3BasementAdjBuiltIn: String
  cmbListComp1Basement: String
  txtListComp1BasementAdjBuiltIn: String
  cmbListComp2Basement: String
  txtListComp2BasementAdjBuiltIn: String
  cmbListComp3Basement: String
  txtListComp3BasementAdjBuiltIn: String
  cmbSubjectIsFinished: String
  cmbSaleComp1IsFinished: String
  txtSaleComp1IsFinishedAdjBuiltIn: String
  cmbSaleComp2IsFinished: String
  txtSaleComp2IsFinishedAdjBuiltIn: String
  cmbSaleComp3IsFinished: String
  txtSaleComp3IsFinishedAdjBuiltIn: String
  cmbListComp1IsFinished: String
  txtListComp1IsFinishedAdjBuiltIn: String
  cmbListComp2IsFinished: String
  txtListComp2IsFinishedAdjBuiltIn: String
  cmbListComp3IsFinished: String
  txtListComp3IsFinishedAdjBuiltIn: String
  cmbSubjectPercentFinished: String
  cmbSaleComp1PercentFinished: String
  txtSaleComp1PercentFinishedAdjBuiltIn: String
  cmbSaleComp2PercentFinished: String
  txtSaleComp2PercentFinishedAdjBuiltIn: String
  cmbSaleComp3PercentFinished: String
  txtSaleComp3PercentFinishedAdjBuiltIn: String
  cmbListComp1PercentFinished: String
  txtListComp1PercentFinishedAdjBuiltIn: String
  cmbListComp2PercentFinished: String
  txtListComp2PercentFinishedAdjBuiltIn: String
  cmbListComp3PercentFinished: String
  txtListComp3PercentFinishedAdjBuiltIn: String
  txtSubjectBasementSqFt: String
  txtSaleComp1BasementSqFt: String
  txtSaleComp1BasementSqFtAdjBuiltIn: String
  txtSaleComp2BasementSqFt: String
  txtSaleComp2BasementSqFtAdjBuiltIn: String
  txtSaleComp3BasementSqFt: String
  txtSaleComp3BasementSqFtAdjBuiltIn: String
  txtListComp1BasementSqFt: String
  txtListComp1BasementSqFtAdjBuiltIn: String
  txtListComp2BasementSqFt: String
  txtListComp2BasementSqFtAdjBuiltIn: String
  txtListComp3BasementSqFt: String
  txtListComp3BasementSqFtAdjBuiltIn: String
  txtSubjectOriginalListDate: String
  txtSaleComp1OriginalListDate: String
  txtSaleComp2OriginalListDate: String
  txtSaleComp3OriginalListDate: String
  txtListComp1OriginalListDate: String
  txtListComp2OriginalListDate: String
  txtListComp3OriginalListDate: String
  txtSubjectCurrentListDate: String
  txtSaleComp1CurrentListDate: String
  txtSaleComp2CurrentListDate: String
  txtSaleComp3CurrentListDate: String
  txtListComp1CurrentListDate: String
  txtListComp2CurrentListDate: String
  txtListComp3CurrentListDate: String
  txtSubjectOriginalListPrice: String
  txtSaleComp1OriginalListPrice: String
  txtSaleComp2OriginalListPrice: String
  txtSaleComp3OriginalListPrice: String
  txtListComp1OriginalListPrice: String
  txtListComp2OriginalListPrice: String
  txtListComp3OriginalListPrice: String
  txtSubjectListPrice: String
  txtSaleComp1ListPrice: String
  txtSaleComp2ListPrice: String
  txtSaleComp3ListPrice: String
  txtListComp1ListPrice: String
  txtListComp2ListPrice: String
  txtListComp3ListPrice: String
  txtSubjectSalePrice: String
  txtSaleComp1SalePrice: String
  txtSaleComp2SalePrice: String
  txtSaleComp3SalePrice: String
  txtSubjectSaleDate: String
  txtSaleComp1SaleDate: String
  txtSaleComp2SaleDate: String
  txtSaleComp3SaleDate: String
  cmbSubjectFinancing: String
  cmbSaleComp1Financing: String
  cmbSaleComp2Financing: String
  cmbSaleComp3Financing: String
  cmbListComp1Financing: String
  cmbListComp2Financing: String
  cmbListComp3Financing: String
  txtSubjectDOM: String
  txtSaleComp1DOM: String
  txtSaleComp2DOM: String
  txtSaleComp3DOM: String
  txtListComp1DOM: String
  txtListComp2DOM: String
  txtListComp3DOM: String
  txtSubjectPricePerSqFt: String
  txtSaleComp1PricePerSqFt: String
  txtSaleComp2PricePerSqFt: String
  txtSaleComp3PricePerSqFt: String
  txtListComp1PricePerSqFt: String
  txtListComp2PricePerSqFt: String
  txtListComp3PricePerSqFt: String
  txtSubjectAdjustments: String
  txtSaleComp1Adjustments: String
  txtSaleComp2Adjustments: String
  txtSaleComp3Adjustments: String
  txtListComp1Adjustments: String
  txtListComp2Adjustments: String
  txtListComp3Adjustments: String
  txtSubjectCompTotals: String
  txtSaleComp1CompTotals: String
  txtSaleComp2CompTotals: String
  txtSaleComp3CompTotals: String
  txtListComp1CompTotals: String
  txtListComp2CompTotals: String
  txtListComp3CompTotals: String
  cmbListComp1CommentType: String
  txtListComp1ComparableComments: String
  txtListComp1FormatAdjustments: String
  txtListComp1MLSComments: String
  cmbListComp2CommentType: String
  txtListComp2ComparableComments: String
  txtListComp2FormatAdjustments: String
  txtListComp2MLSComments: String
  cmbListComp3CommentType: String
  txtListComp3ComparableComments: String
  txtListComp3FormatAdjustments: String
  txtListComp3MLSComments: String
  cmbSaleComp1CommentType: String
  txtSaleComp1ComparableComments: String
  txtSaleComp1FormatAdjustments: String
  txtSaleComp1MLSComments: String
  cmbSaleComp2CommentType: String
  txtSaleComp2ComparableComments: String
  txtSaleComp2FormatAdjustments: String
  txtSaleComp2MLSComments: String
  cmbSaleComp3CommentType: String
  txtSaleComp3ComparableComments: String
  txtSaleComp3FormatAdjustments: String
  txtSaleComp3MLSComments: String
  cmbNeighborhoodTrend: String
  txtMonthlyPecent: String
  txtEstimatedRent: String
  txtEstimatedDaysOnMarket: String
  txtNoBoarded: String
  txtNoOfActive: String
  txt6MonthPecent: String
  txtAnnualPecent: String
  txtListings: String
  cmbSupply: String
  txtListingsMinValue: String
  txtListingsRange1: String
  txtListingsMedValue: String
  txtListingsMaxValue: String
  txtListingsRange2: String
  txtListingsDOM: String
  txtListingsDOMRange1: String
  txtListingsDOMRange2: String
  cmbREOTrend: String
  txtNoOfFM: String
  txtNoOfSS: String
  txtNoOfREO: String
  txtNoOfDistressed: String
  txtSales: String
  cmbDemand: String
  txtSalesRange1: String
  txtSalesMedValue: String
  txtSalesRange2: String
  txtSalesDOM: String
  txtSalesDOMRange1: String
  txtSalesDOMRange2: String
  txtZillowNeighborhoodTrend: String
  txtNeighborhoodTrendComments: String
  txtTotalListings: String
  txtTotalSales: String
  txtNoOfREOListings: String
  txtNoOfSSListings: String
  txtNoOfREOSales: String
  txtNoOfSSSales: String
  txtTaxID: String
  txtLastSaleDate: String
  txtLastSalePrice: String
  cmbIsListed: String
  txtOwnerOccupied: String
  txtRenterOccupied: String
  txtMarketRent: String
  txtNoOfRentals: String
  txtTypicalDOM: String
  txtNoRentHomes: String
  txtTypicalRentalRates: String
  adjustmentPrice: String
  txtCalculatedGLA: String
  txtCalculatedAge: String
  txtCalculatedSaleDates: String
  txtCalculatedProximity: String
  txtCalculatedStyle: String
  txtCalculatedMonthsSupply: String
  txtCalculatedProxim: String
  txtCalculatedGLAs: String
  txtCalculatedAges: String
  txtCalculatedCond: String
  txtCalculatedView: String
  txtCalculatedStyle1: String
  txtCalculatedLots: String
  txtCalculatedBeds: String
  txtCalculatedBath: String
  rdbresaletext: String
  rdbmarketedtext: String
  txtpmi: String
  txtOtherComments: String
  txtcbnew: String
  txtcbold: String
  txtcbstyle: String
  txtcblot: String
  txtcbview: String
  txtcbdamage: String
  txtcbupgrade: String
  txtcbinfluence: String
  txtSubjectComments: String
  txtNeighborhoodComments: String
  txtNeighborhoodTrend: String
  txtValidation1: String
  txtUniqueComments: String
  txtMarketingStrategy: String
  txtDisclaimer2: String
  txtBrokerComments: String
  txtValidation: String
  txt30DayQuickSale: String
  txt60DayQuickSale: String
  txt90DayAsIsValue: String
  txt120DayQuickSale: String
  txt180DayQuickSale: String
  txtListPriceFinalValues: String
  txt30DayListPriceFinalValues: String
  txt30DayQuickSaleRepaired: String
  txt60DayQuickSaleRepaired: String
  txt90DayAsIsValueRepaired: String
  txt120DayQuickSaleRepaired: String
  txt180DayQuickSaleRepaired: String
  txtListPriceRepaired: String
  txt30DayListPriceRepaired: String
  cmbHouse: String
  cmbPositive: String
  cmbNegative: String
  cmbView: String
  cmbMarket: String
  cmbPricing: String
  cmbListing: String
  cmbExtra: String
  txtUnique: String
  priceComment: String
  rangeComment: String
  proxException: String
  glaException: String
  ageException: String
  condException: String
  viewException: String
  styleException: String
  lotException: String
  bedException: String
  bathException: String
  history: [IformHistory]
}

type IformHistory {
  createdDate: String
  updatedDate: String
  modifiedBy: String
  url: String
}

input UpdateIformInput {
  formType: String
  txtClient: String
  txtCompany: String
  txtOrderNumber: String
  cmbOrderType: String
  txtAddress: String
  txtLocation: String
  txtBrokerChecker: String
  txtPreparerInfoAgent: String
  txtPreparerInfoAgentLicense: String
  txtPreparerInfoBroker: String
  txtPreparerInfoBrokerLicense: String
  txtPreparerInfoAddress: String
  txtPreparerInfoBrokerage: String
  txtPreparerInfoAgentCompany: String
  txtPreparerInfoPhone: String
  txtPreparerInfoYearsOfExperience: String
  txtPreparerInfoEmail: String
  txtSubjectAddress: String
  txtPreparerInfoMilesAwayFromSubject: String
  txtAgentZip: String
  txtAgentCity: String
  txtAgentState: String
  txtDisclaimer: String
  cmbLocation: String
  txtCounty: String
  txtTrullia: String
  txtZillow: String
  txtFindcompsnow: String
  txtAverage: String
  cmbForm: String
  cmbForm2: String
  txtSaleComp1Address: String
  txtSaleComp2Address: String
  txtSaleComp3Address: String
  txtListComp1Address: String
  txtListComp2Address: String
  txtListComp3Address: String
  txtSubjectState: String
  txtSaleComp1State: String
  txtSaleComp2State: String
  txtSaleComp3State: String
  txtListComp1State: String
  txtListComp2State: String
  txtListComp3State: String
  txtSubjectCity: String
  txtSaleComp1City: String
  txtSaleComp2City: String
  txtSaleComp3City: String
  txtListComp1City: String
  txtListComp2City: String
  txtListComp3City: String
  txtSubjectnoUnit: String
  txtSubjectUnitNo: String
  txtSaleComp1noUnit: String
  txtSaleComp1UnitNo: String
  txtSaleComp2noUnit: String
  txtSaleComp2UnitNo: String
  txtSaleComp3noUnit: String
  txtSaleComp3UnitNo: String
  txtListComp1noUnit: String
  txtListComp1UnitNo: String
  txtListComp2noUnit: String
  txtListComp2UnitNo: String
  txtListComp3noUnit: String
  txtListComp3UnitNo: String
  txtSubjectUnits: String
  txtSaleComp1Units: String
  txtSaleComp2Units: String
  txtSaleComp3Units: String
  txtListComp1Units: String
  txtListComp2Units: String
  txtListComp3Units: String
  txtSubjectZip: String
  txtSaleComp1Zip: String
  txtSaleComp2Zip: String
  txtSaleComp3Zip: String
  txtListComp1Zip: String
  txtListComp2Zip: String
  txtListComp3Zip: String
  txtSubjectProximity: String
  txtSaleComp1Proximity: String
  txtSaleComp2Proximity: String
  txtSaleComp3Proximity: String
  txtListComp1Proximity: String
  txtListComp2Proximity: String
  txtListComp3Proximity: String
  txtSubjectDataSource: String
  txtSaleComp1DataSource: String
  txtSaleComp2DataSource: String
  txtSaleComp3DataSource: String
  txtListComp1DataSource: String
  txtListComp2DataSource: String
  txtListComp3DataSource: String
  txtSubjectMLSNumber: String
  txtSaleComp1MLSNumber: String
  txtSaleComp2MLSNumber: String
  txtSaleComp3MLSNumber: String
  txtListComp1MLSNumber: String
  txtListComp2MLSNumber: String
  txtListComp3MLSNumber: String
  cmbSubjectSaleType: String
  cmbSaleComp1SaleType: String
  cmbSaleComp2SaleType: String
  cmbSaleComp3SaleType: String
  cmbListComp1SaleType: String
  cmbListComp2SaleType: String
  cmbListComp3SaleType: String
  cmbSubjectType: String
  cmbSaleComp1Type: String
  cmbSaleComp2Type: String
  cmbSaleComp3Type: String
  cmbListComp1Type: String
  cmbListComp2Type: String
  cmbListComp3Type: String
  cmbSubjectStyle: String
  cmbSaleComp1Style: String
  txtSaleComp1StyleAdjBuiltIn: String
  cmbSaleComp2Style: String
  txtSaleComp2StyleAdjBuiltIn: String
  cmbSaleComp3Style: String
  txtSaleComp3StyleAdjBuiltIn: String
  cmbListComp1Style: String
  txtListComp1StyleAdjBuiltIn: String
  cmbListComp2Style: String
  txtListComp2StyleAdjBuiltIn: String
  cmbListComp3Style: String
  txtListComp3StyleAdjBuiltIn: String
  cmbSubjectExtFinish: String
  cmbSaleComp1ExtFinish: String
  txtSaleComp1ExtFinishAdjBuiltIn: String
  cmbSaleComp2ExtFinish: String
  txtSaleComp2ExtFinishAdjBuiltIn: String
  cmbSaleComp3ExtFinish: String
  txtSaleComp3ExtFinishAdjBuiltIn: String
  cmbListComp1ExtFinish: String
  txtListComp1ExtFinishAdjBuiltIn: String
  cmbListComp2ExtFinish: String
  txtListComp2ExtFinishAdjBuiltIn: String
  cmbListComp3ExtFinish: String
  txtListComp3ExtFinishAdjBuiltIn: String
  cmbSubjectCondition: String
  cmbSaleComp1Condition: String
  txtSaleComp1ConditionAdjBuiltIn: String
  cmbSaleComp2Condition: String
  txtSaleComp2ConditionAdjBuiltIn: String
  cmbSaleComp3Condition: String
  txtSaleComp3ConditionAdjBuiltIn: String
  cmbListComp1Condition: String
  txtListComp1ConditionAdjBuiltIn: String
  cmbListComp2Condition: String
  txtListComp2ConditionAdjBuiltIn: String
  cmbListComp3Condition: String
  txtListComp3ConditionAdjBuiltIn: String
  cmbSubjectQuality: String
  cmbSaleComp1Quality: String
  txtSaleComp1QualityAdjBuiltIn: String
  cmbSaleComp2Quality: String
  txtSaleComp2QualityAdjBuiltIn: String
  cmbSaleComp3Quality: String
  txtSaleComp3QualityAdjBuiltIn: String
  cmbListComp1Quality: String
  txtListComp1QualityAdjBuiltIn: String
  cmbListComp2Quality: String
  txtListComp2QualityAdjBuiltIn: String
  cmbListComp3Quality: String
  txtListComp3QualityAdjBuiltIn: String
  cmbSubjectView: String
  cmbSaleComp1View: String
  txtSaleComp1ViewAdjBuiltIn: String
  cmbSaleComp2View: String
  txtSaleComp2ViewAdjBuiltIn: String
  cmbSaleComp3View: String
  txtSaleComp3ViewAdjBuiltIn: String
  cmbListComp1View: String
  txtListComp1ViewAdjBuiltIn: String
  cmbListComp2View: String
  txtListComp2ViewAdjBuiltIn: String
  cmbListComp3View: String
  txtListComp3ViewAdjBuiltIn: String
  txtSubjectSubdivision: String
  txtSaleComp1Subdivision: String
  txtSaleComp2Subdivision: String
  txtSaleComp3Subdivision: String
  txtListComp1Subdivision: String
  txtListComp2Subdivision: String
  txtListComp3Subdivision: String
  txtSubjectHOAFee: String
  txtSaleComp1HOAFee: String
  txtSaleComp2HOAFee: String
  txtSaleComp3HOAFee: String
  txtListComp1HOAFee: String
  txtListComp2HOAFee: String
  txtListComp3HOAFee: String
  txtSubjectTotalRooms: String
  txtSaleComp1TotalRooms: String
  txtSaleComp1TotalRoomsAdjBuiltIn: String
  txtSaleComp2TotalRooms: String
  txtSaleComp2TotalRoomsAdjBuiltIn: String
  txtSaleComp3TotalRooms: String
  txtSaleComp3TotalRoomsAdjBuiltIn: String
  txtListComp1TotalRooms: String
  txtListComp1TotalRoomsAdjBuiltIn: String
  txtListComp2TotalRooms: String
  txtListComp2TotalRoomsAdjBuiltIn: String
  txtListComp3TotalRooms: String
  txtListComp3TotalRoomsAdjBuiltIn: String
  txtSubjectBedrooms: String
  txtSaleComp1Bedrooms: String
  txtSaleComp1BedroomsAdjBuiltIn: String
  txtSaleComp2Bedrooms: String
  txtSaleComp2BedroomsAdjBuiltIn: String
  txtSaleComp3Bedrooms: String
  txtSaleComp3BedroomsAdjBuiltIn: String
  txtListComp1Bedrooms: String
  txtListComp1BedroomsAdjBuiltIn: String
  txtListComp2Bedrooms: String
  txtListComp2BedroomsAdjBuiltIn: String
  txtListComp3Bedrooms: String
  txtListComp3BedroomsAdjBuiltIn: String
  txtSubjectFullBaths: String
  txtSaleComp1FullBaths: String
  txtSaleComp1FullBathsAdjBuiltIn: String
  txtSaleComp2FullBaths: String
  txtSaleComp2FullBathsAdjBuiltIn: String
  txtSaleComp3FullBaths: String
  txtSaleComp3FullBathsAdjBuiltIn: String
  txtListComp1FullBaths: String
  txtListComp1FullBathsAdjBuiltIn: String
  txtListComp2FullBaths: String
  txtListComp2FullBathsAdjBuiltIn: String
  txtListComp3FullBaths: String
  txtListComp3FullBathsAdjBuiltIn: String
  txtSubjectHalfBaths: String
  txtSaleComp1HalfBaths: String
  txtSaleComp1HalfBathsAdjBuiltIn: String
  txtSaleComp2HalfBaths: String
  txtSaleComp2HalfBathsAdjBuiltIn: String
  txtSaleComp3HalfBaths: String
  txtSaleComp3HalfBathsAdjBuiltIn: String
  txtListComp1HalfBaths: String
  txtListComp1HalfBathsAdjBuiltIn: String
  txtListComp2HalfBaths: String
  txtListComp2HalfBathsAdjBuiltIn: String
  txtListComp3HalfBaths: String
  txtListComp3HalfBathsAdjBuiltIn: String
  txtSubjectGLA: String
  txtSaleComp1GLA: String
  txtSaleComp1GLAAdjBuiltIn: String
  txtSaleComp2GLA: String
  txtSaleComp2GLAAdjBuiltIn: String
  txtSaleComp3GLA: String
  txtSaleComp3GLAAdjBuiltIn: String
  txtListComp1GLA: String
  txtListComp1GLAAdjBuiltIn: String
  txtListComp2GLA: String
  txtListComp2GLAAdjBuiltIn: String
  txtListComp3GLA: String
  txtListComp3GLAAdjBuiltIn: String
  txtSubjectYearBuilt: String
  txtSaleComp1YearBuilt: String
  txtSaleComp1YearBuiltAdjBuiltIn: String
  txtSaleComp2YearBuilt: String
  txtSaleComp2YearBuiltAdjBuiltIn: String
  txtSaleComp3YearBuilt: String
  txtSaleComp3YearBuiltAdjBuiltIn: String
  txtListComp1YearBuilt: String
  txtListComp1YearBuiltAdjBuiltIn: String
  txtListComp2YearBuilt: String
  txtListComp2YearBuiltAdjBuiltIn: String
  txtListComp3YearBuilt: String
  txtListComp3YearBuiltAdjBuiltIn: String
  txtSubjectAge: String
  txtSaleComp1Age: String
  txtSaleComp2Age: String
  txtSaleComp3Age: String
  txtListComp1Age: String
  txtListComp2Age: String
  txtListComp3Age: String
  txtSubjectAcres: String
  txtSaleComp1Acres: String
  txtSaleComp1AcresAdjBuiltIn: String
  txtSaleComp2Acres: String
  txtSaleComp2AcresAdjBuiltIn: String
  txtSaleComp3Acres: String
  txtSaleComp3AcresAdjBuiltIn: String
  txtListComp1Acres: String
  txtListComp1AcresAdjBuiltIn: String
  txtListComp2Acres: String
  txtListComp2AcresAdjBuiltIn: String
  txtListComp3Acres: String
  txtListComp3AcresAdjBuiltIn: String
  txtSubjectSquareFeet: String
  txtSaleComp1SquareFeet: String
  txtSaleComp2SquareFeet: String
  txtSaleComp3SquareFeet: String
  txtListComp1SquareFeet: String
  txtListComp2SquareFeet: String
  txtListComp3SquareFeet: String
  cmbSubjectGarage: String
  cmbSaleComp1Garage: String
  txtSaleComp1GarageAdjBuiltIn: String
  cmbSaleComp2Garage: String
  txtSaleComp2GarageAdjBuiltIn: String
  cmbSaleComp3Garage: String
  txtSaleComp3GarageAdjBuiltIn: String
  cmbListComp1Garage: String
  txtListComp1GarageAdjBuiltIn: String
  cmbListComp2Garage: String
  txtListComp2GarageAdjBuiltIn: String
  cmbListComp3Garage: String
  txtListComp3GarageAdjBuiltIn: String
  cmbSubjectPool: String
  cmbSaleComp1Pool: String
  txtSaleComp1PoolAdjBuiltIn: String
  cmbSaleComp2Pool: String
  txtSaleComp2PoolAdjBuiltIn: String
  cmbSaleComp3Pool: String
  txtSaleComp3PoolAdjBuiltIn: String
  cmbListComp1Pool: String
  txtListComp1PoolAdjBuiltIn: String
  cmbListComp2Pool: String
  txtListComp2PoolAdjBuiltIn: String
  cmbListComp3Pool: String
  txtListComp3PoolAdjBuiltIn: String
  cmbSubjectPorchPatioDeck: String
  cmbSaleComp1PorchPatioDeck: String
  txtSaleComp1PorchPatioDeckAdjBuiltIn: String
  cmbSaleComp2PorchPatioDeck: String
  txtSaleComp2PorchPatioDeckAdjBuiltIn: String
  cmbSaleComp3PorchPatioDeck: String
  txtSaleComp3PorchPatioDeckAdjBuiltIn: String
  cmbListComp1PorchPatioDeck: String
  txtListComp1PorchPatioDeckAdjBuiltIn: String
  cmbListComp2PorchPatioDeck: String
  txtListComp2PorchPatioDeckAdjBuiltIn: String
  cmbListComp3PorchPatioDeck: String
  txtListComp3PorchPatioDeckAdjBuiltIn: String
  cmbSubjectFireplace: String
  cmbSaleComp1Fireplace: String
  txtSaleComp1FireplaceAdjBuiltIn: String
  cmbSaleComp2Fireplace: String
  txtSaleComp2FireplaceAdjBuiltIn: String
  cmbSaleComp3Fireplace: String
  txtSaleComp3FireplaceAdjBuiltIn: String
  cmbListComp1Fireplace: String
  txtListComp1FireplaceAdjBuiltIn: String
  cmbListComp2Fireplace: String
  txtListComp2FireplaceAdjBuiltIn: String
  cmbListComp3Fireplace: String
  txtListComp3FireplaceAdjBuiltIn: String
  cmbSubjectBasement: String
  cmbSaleComp1Basement: String
  txtSaleComp1BasementAdjBuiltIn: String
  cmbSaleComp2Basement: String
  txtSaleComp2BasementAdjBuiltIn: String
  cmbSaleComp3Basement: String
  txtSaleComp3BasementAdjBuiltIn: String
  cmbListComp1Basement: String
  txtListComp1BasementAdjBuiltIn: String
  cmbListComp2Basement: String
  txtListComp2BasementAdjBuiltIn: String
  cmbListComp3Basement: String
  txtListComp3BasementAdjBuiltIn: String
  cmbSubjectIsFinished: String
  cmbSaleComp1IsFinished: String
  txtSaleComp1IsFinishedAdjBuiltIn: String
  cmbSaleComp2IsFinished: String
  txtSaleComp2IsFinishedAdjBuiltIn: String
  cmbSaleComp3IsFinished: String
  txtSaleComp3IsFinishedAdjBuiltIn: String
  cmbListComp1IsFinished: String
  txtListComp1IsFinishedAdjBuiltIn: String
  cmbListComp2IsFinished: String
  txtListComp2IsFinishedAdjBuiltIn: String
  cmbListComp3IsFinished: String
  txtListComp3IsFinishedAdjBuiltIn: String
  cmbSubjectPercentFinished: String
  cmbSaleComp1PercentFinished: String
  txtSaleComp1PercentFinishedAdjBuiltIn: String
  cmbSaleComp2PercentFinished: String
  txtSaleComp2PercentFinishedAdjBuiltIn: String
  cmbSaleComp3PercentFinished: String
  txtSaleComp3PercentFinishedAdjBuiltIn: String
  cmbListComp1PercentFinished: String
  txtListComp1PercentFinishedAdjBuiltIn: String
  cmbListComp2PercentFinished: String
  txtListComp2PercentFinishedAdjBuiltIn: String
  cmbListComp3PercentFinished: String
  txtListComp3PercentFinishedAdjBuiltIn: String
  txtSubjectBasementSqFt: String
  txtSaleComp1BasementSqFt: String
  txtSaleComp1BasementSqFtAdjBuiltIn: String
  txtSaleComp2BasementSqFt: String
  txtSaleComp2BasementSqFtAdjBuiltIn: String
  txtSaleComp3BasementSqFt: String
  txtSaleComp3BasementSqFtAdjBuiltIn: String
  txtListComp1BasementSqFt: String
  txtListComp1BasementSqFtAdjBuiltIn: String
  txtListComp2BasementSqFt: String
  txtListComp2BasementSqFtAdjBuiltIn: String
  txtListComp3BasementSqFt: String
  txtListComp3BasementSqFtAdjBuiltIn: String
  txtSubjectOriginalListDate: String
  txtSaleComp1OriginalListDate: String
  txtSaleComp2OriginalListDate: String
  txtSaleComp3OriginalListDate: String
  txtListComp1OriginalListDate: String
  txtListComp2OriginalListDate: String
  txtListComp3OriginalListDate: String
  txtSubjectCurrentListDate: String
  txtSaleComp1CurrentListDate: String
  txtSaleComp2CurrentListDate: String
  txtSaleComp3CurrentListDate: String
  txtListComp1CurrentListDate: String
  txtListComp2CurrentListDate: String
  txtListComp3CurrentListDate: String
  txtSubjectOriginalListPrice: String
  txtSaleComp1OriginalListPrice: String
  txtSaleComp2OriginalListPrice: String
  txtSaleComp3OriginalListPrice: String
  txtListComp1OriginalListPrice: String
  txtListComp2OriginalListPrice: String
  txtListComp3OriginalListPrice: String
  txtSubjectListPrice: String
  txtSaleComp1ListPrice: String
  txtSaleComp2ListPrice: String
  txtSaleComp3ListPrice: String
  txtListComp1ListPrice: String
  txtListComp2ListPrice: String
  txtListComp3ListPrice: String
  txtSubjectSalePrice: String
  txtSaleComp1SalePrice: String
  txtSaleComp2SalePrice: String
  txtSaleComp3SalePrice: String
  txtSubjectSaleDate: String
  txtSaleComp1SaleDate: String
  txtSaleComp2SaleDate: String
  txtSaleComp3SaleDate: String
  cmbSubjectFinancing: String
  cmbSaleComp1Financing: String
  cmbSaleComp2Financing: String
  cmbSaleComp3Financing: String
  cmbListComp1Financing: String
  cmbListComp2Financing: String
  cmbListComp3Financing: String
  txtSubjectDOM: String
  txtSaleComp1DOM: String
  txtSaleComp2DOM: String
  txtSaleComp3DOM: String
  txtListComp1DOM: String
  txtListComp2DOM: String
  txtListComp3DOM: String
  txtSubjectPricePerSqFt: String
  txtSaleComp1PricePerSqFt: String
  txtSaleComp2PricePerSqFt: String
  txtSaleComp3PricePerSqFt: String
  txtListComp1PricePerSqFt: String
  txtListComp2PricePerSqFt: String
  txtListComp3PricePerSqFt: String
  txtSubjectAdjustments: String
  txtSaleComp1Adjustments: String
  txtSaleComp2Adjustments: String
  txtSaleComp3Adjustments: String
  txtListComp1Adjustments: String
  txtListComp2Adjustments: String
  txtListComp3Adjustments: String
  txtSubjectCompTotals: String
  txtSaleComp1CompTotals: String
  txtSaleComp2CompTotals: String
  txtSaleComp3CompTotals: String
  txtListComp1CompTotals: String
  txtListComp2CompTotals: String
  txtListComp3CompTotals: String
  cmbListComp1CommentType: String
  txtListComp1ComparableComments: String
  txtListComp1FormatAdjustments: String
  txtListComp1MLSComments: String
  cmbListComp2CommentType: String
  txtListComp2ComparableComments: String
  txtListComp2FormatAdjustments: String
  txtListComp2MLSComments: String
  cmbListComp3CommentType: String
  txtListComp3ComparableComments: String
  txtListComp3FormatAdjustments: String
  txtListComp3MLSComments: String
  cmbSaleComp1CommentType: String
  txtSaleComp1ComparableComments: String
  txtSaleComp1FormatAdjustments: String
  txtSaleComp1MLSComments: String
  cmbSaleComp2CommentType: String
  txtSaleComp2ComparableComments: String
  txtSaleComp2FormatAdjustments: String
  txtSaleComp2MLSComments: String
  cmbSaleComp3CommentType: String
  txtSaleComp3ComparableComments: String
  txtSaleComp3FormatAdjustments: String
  txtSaleComp3MLSComments: String
  cmbNeighborhoodTrend: String
  txtMonthlyPecent: String
  txtEstimatedRent: String
  txtEstimatedDaysOnMarket: String
  txtNoBoarded: String
  txtNoOfActive: String
  txt6MonthPecent: String
  txtAnnualPecent: String
  txtListings: String
  cmbSupply: String
  txtListingsMinValue: String
  txtListingsRange1: String
  txtListingsMedValue: String
  txtListingsMaxValue: String
  txtListingsRange2: String
  txtListingsDOM: String
  txtListingsDOMRange1: String
  txtListingsDOMRange2: String
  cmbREOTrend: String
  txtNoOfFM: String
  txtNoOfSS: String
  txtNoOfREO: String
  txtNoOfDistressed: String
  txtSales: String
  cmbDemand: String
  txtSalesRange1: String
  txtSalesMedValue: String
  txtSalesRange2: String
  txtSalesDOM: String
  txtSalesDOMRange1: String
  txtSalesDOMRange2: String
  txtZillowNeighborhoodTrend: String
  txtNeighborhoodTrendComments: String
  txtTotalListings: String
  txtTotalSales: String
  txtNoOfREOListings: String
  txtNoOfSSListings: String
  txtNoOfREOSales: String
  txtNoOfSSSales: String
  txtTaxID: String
  txtLastSaleDate: String
  txtLastSalePrice: String
  cmbIsListed: String
  txtOwnerOccupied: String
  txtRenterOccupied: String
  txtMarketRent: String
  txtNoOfRentals: String
  txtTypicalDOM: String
  txtNoRentHomes: String
  txtTypicalRentalRates: String
  adjustmentPrice: String
  txtCalculatedGLA: String
  txtCalculatedAge: String
  txtCalculatedSaleDates: String
  txtCalculatedProximity: String
  txtCalculatedStyle: String
  txtCalculatedMonthsSupply: String
  txtCalculatedProxim: String
  txtCalculatedGLAs: String
  txtCalculatedAges: String
  txtCalculatedCond: String
  txtCalculatedView: String
  txtCalculatedStyle1: String
  txtCalculatedLots: String
  txtCalculatedBeds: String
  txtCalculatedBath: String
  rdbresaletext: String
  rdbmarketedtext: String
  txtpmi: String
  txtOtherComments: String
  txtcbnew: String
  txtcbold: String
  txtcbstyle: String
  txtcblot: String
  txtcbview: String
  txtcbdamage: String
  txtcbupgrade: String
  txtcbinfluence: String
  txtSubjectComments: String
  txtNeighborhoodComments: String
  txtNeighborhoodTrend: String
  txtValidation1: String
  txtUniqueComments: String
  txtMarketingStrategy: String
  txtDisclaimer2: String
  txtBrokerComments: String
  txtValidation: String
  txt30DayQuickSale: String
  txt60DayQuickSale: String
  txt90DayAsIsValue: String
  txt120DayQuickSale: String
  txt180DayQuickSale: String
  txtListPriceFinalValues: String
  txt30DayListPriceFinalValues: String
  txt30DayQuickSaleRepaired: String
  txt60DayQuickSaleRepaired: String
  txt90DayAsIsValueRepaired: String
  txt120DayQuickSaleRepaired: String
  txt180DayQuickSaleRepaired: String
  txtListPriceRepaired: String
  txt30DayListPriceRepaired: String
  cmbHouse: String
  cmbPositive: String
  cmbNegative: String
  cmbView: String
  cmbMarket: String
  cmbPricing: String
  cmbListing: String
  cmbExtra: String
  txtUnique: String
  priceComment: String
  rangeComment: String
  proxException: String
  glaException: String
  ageException: String
  condException: String
  viewException: String
  styleException: String
  lotException: String
  bedException: String
  bathException: String
}

input UpdateIformTempInput {
  formType: String
  txtClient: String
  txtCompany: String
  txtOrderNumber: String
  cmbOrderType: String
  txtAddress: String
  txtLocation: String
  txtBrokerChecker: String
  txtPreparerInfoAgent: String
  txtPreparerInfoAgentLicense: String
  txtPreparerInfoBroker: String
  txtPreparerInfoBrokerLicense: String
  txtPreparerInfoAddress: String
  txtPreparerInfoBrokerage: String
  txtPreparerInfoAgentCompany: String
  txtPreparerInfoPhone: String
  txtPreparerInfoYearsOfExperience: String
  txtPreparerInfoEmail: String
  txtSubjectAddress: String
  txtPreparerInfoMilesAwayFromSubject: String
  txtAgentZip: String
  txtAgentCity: String
  txtAgentState: String
  txtDisclaimer: String
  cmbLocation: String
  txtCounty: String
  txtTrullia: String
  txtZillow: String
  txtFindcompsnow: String
  txtAverage: String
  cmbForm: String
  cmbForm2: String
  txtSaleComp1Address: String
  txtSaleComp2Address: String
  txtSaleComp3Address: String
  txtListComp1Address: String
  txtListComp2Address: String
  txtListComp3Address: String
  txtSubjectState: String
  txtSaleComp1State: String
  txtSaleComp2State: String
  txtSaleComp3State: String
  txtListComp1State: String
  txtListComp2State: String
  txtListComp3State: String
  txtSubjectCity: String
  txtSaleComp1City: String
  txtSaleComp2City: String
  txtSaleComp3City: String
  txtListComp1City: String
  txtListComp2City: String
  txtListComp3City: String
  txtSubjectnoUnit: String
  txtSubjectUnitNo: String
  txtSaleComp1noUnit: String
  txtSaleComp1UnitNo: String
  txtSaleComp2noUnit: String
  txtSaleComp2UnitNo: String
  txtSaleComp3noUnit: String
  txtSaleComp3UnitNo: String
  txtListComp1noUnit: String
  txtListComp1UnitNo: String
  txtListComp2noUnit: String
  txtListComp2UnitNo: String
  txtListComp3noUnit: String
  txtListComp3UnitNo: String
  txtSubjectUnits: String
  txtSaleComp1Units: String
  txtSaleComp2Units: String
  txtSaleComp3Units: String
  txtListComp1Units: String
  txtListComp2Units: String
  txtListComp3Units: String
  txtSubjectZip: String
  txtSaleComp1Zip: String
  txtSaleComp2Zip: String
  txtSaleComp3Zip: String
  txtListComp1Zip: String
  txtListComp2Zip: String
  txtListComp3Zip: String
  txtSubjectProximity: String
  txtSaleComp1Proximity: String
  txtSaleComp2Proximity: String
  txtSaleComp3Proximity: String
  txtListComp1Proximity: String
  txtListComp2Proximity: String
  txtListComp3Proximity: String
  txtSubjectDataSource: String
  txtSaleComp1DataSource: String
  txtSaleComp2DataSource: String
  txtSaleComp3DataSource: String
  txtListComp1DataSource: String
  txtListComp2DataSource: String
  txtListComp3DataSource: String
  txtSubjectMLSNumber: String
  txtSaleComp1MLSNumber: String
  txtSaleComp2MLSNumber: String
  txtSaleComp3MLSNumber: String
  txtListComp1MLSNumber: String
  txtListComp2MLSNumber: String
  txtListComp3MLSNumber: String
  cmbSubjectSaleType: String
  cmbSaleComp1SaleType: String
  cmbSaleComp2SaleType: String
  cmbSaleComp3SaleType: String
  cmbListComp1SaleType: String
  cmbListComp2SaleType: String
  cmbListComp3SaleType: String
  cmbSubjectType: String
  cmbSaleComp1Type: String
  cmbSaleComp2Type: String
  cmbSaleComp3Type: String
  cmbListComp1Type: String
  cmbListComp2Type: String
  cmbListComp3Type: String
  cmbSubjectStyle: String
  cmbSaleComp1Style: String
  txtSaleComp1StyleAdjBuiltIn: String
  cmbSaleComp2Style: String
  txtSaleComp2StyleAdjBuiltIn: String
  cmbSaleComp3Style: String
  txtSaleComp3StyleAdjBuiltIn: String
  cmbListComp1Style: String
  txtListComp1StyleAdjBuiltIn: String
  cmbListComp2Style: String
  txtListComp2StyleAdjBuiltIn: String
  cmbListComp3Style: String
  txtListComp3StyleAdjBuiltIn: String
  cmbSubjectExtFinish: String
  cmbSaleComp1ExtFinish: String
  txtSaleComp1ExtFinishAdjBuiltIn: String
  cmbSaleComp2ExtFinish: String
  txtSaleComp2ExtFinishAdjBuiltIn: String
  cmbSaleComp3ExtFinish: String
  txtSaleComp3ExtFinishAdjBuiltIn: String
  cmbListComp1ExtFinish: String
  txtListComp1ExtFinishAdjBuiltIn: String
  cmbListComp2ExtFinish: String
  txtListComp2ExtFinishAdjBuiltIn: String
  cmbListComp3ExtFinish: String
  txtListComp3ExtFinishAdjBuiltIn: String
  cmbSubjectCondition: String
  cmbSaleComp1Condition: String
  txtSaleComp1ConditionAdjBuiltIn: String
  cmbSaleComp2Condition: String
  txtSaleComp2ConditionAdjBuiltIn: String
  cmbSaleComp3Condition: String
  txtSaleComp3ConditionAdjBuiltIn: String
  cmbListComp1Condition: String
  txtListComp1ConditionAdjBuiltIn: String
  cmbListComp2Condition: String
  txtListComp2ConditionAdjBuiltIn: String
  cmbListComp3Condition: String
  txtListComp3ConditionAdjBuiltIn: String
  cmbSubjectQuality: String
  cmbSaleComp1Quality: String
  txtSaleComp1QualityAdjBuiltIn: String
  cmbSaleComp2Quality: String
  txtSaleComp2QualityAdjBuiltIn: String
  cmbSaleComp3Quality: String
  txtSaleComp3QualityAdjBuiltIn: String
  cmbListComp1Quality: String
  txtListComp1QualityAdjBuiltIn: String
  cmbListComp2Quality: String
  txtListComp2QualityAdjBuiltIn: String
  cmbListComp3Quality: String
  txtListComp3QualityAdjBuiltIn: String
  cmbSubjectView: String
  cmbSaleComp1View: String
  txtSaleComp1ViewAdjBuiltIn: String
  cmbSaleComp2View: String
  txtSaleComp2ViewAdjBuiltIn: String
  cmbSaleComp3View: String
  txtSaleComp3ViewAdjBuiltIn: String
  cmbListComp1View: String
  txtListComp1ViewAdjBuiltIn: String
  cmbListComp2View: String
  txtListComp2ViewAdjBuiltIn: String
  cmbListComp3View: String
  txtListComp3ViewAdjBuiltIn: String
  txtSubjectSubdivision: String
  txtSaleComp1Subdivision: String
  txtSaleComp2Subdivision: String
  txtSaleComp3Subdivision: String
  txtListComp1Subdivision: String
  txtListComp2Subdivision: String
  txtListComp3Subdivision: String
  txtSubjectHOAFee: String
  txtSaleComp1HOAFee: String
  txtSaleComp2HOAFee: String
  txtSaleComp3HOAFee: String
  txtListComp1HOAFee: String
  txtListComp2HOAFee: String
  txtListComp3HOAFee: String
  txtSubjectTotalRooms: String
  txtSaleComp1TotalRooms: String
  txtSaleComp1TotalRoomsAdjBuiltIn: String
  txtSaleComp2TotalRooms: String
  txtSaleComp2TotalRoomsAdjBuiltIn: String
  txtSaleComp3TotalRooms: String
  txtSaleComp3TotalRoomsAdjBuiltIn: String
  txtListComp1TotalRooms: String
  txtListComp1TotalRoomsAdjBuiltIn: String
  txtListComp2TotalRooms: String
  txtListComp2TotalRoomsAdjBuiltIn: String
  txtListComp3TotalRooms: String
  txtListComp3TotalRoomsAdjBuiltIn: String
  txtSubjectBedrooms: String
  txtSaleComp1Bedrooms: String
  txtSaleComp1BedroomsAdjBuiltIn: String
  txtSaleComp2Bedrooms: String
  txtSaleComp2BedroomsAdjBuiltIn: String
  txtSaleComp3Bedrooms: String
  txtSaleComp3BedroomsAdjBuiltIn: String
  txtListComp1Bedrooms: String
  txtListComp1BedroomsAdjBuiltIn: String
  txtListComp2Bedrooms: String
  txtListComp2BedroomsAdjBuiltIn: String
  txtListComp3Bedrooms: String
  txtListComp3BedroomsAdjBuiltIn: String
  txtSubjectFullBaths: String
  txtSaleComp1FullBaths: String
  txtSaleComp1FullBathsAdjBuiltIn: String
  txtSaleComp2FullBaths: String
  txtSaleComp2FullBathsAdjBuiltIn: String
  txtSaleComp3FullBaths: String
  txtSaleComp3FullBathsAdjBuiltIn: String
  txtListComp1FullBaths: String
  txtListComp1FullBathsAdjBuiltIn: String
  txtListComp2FullBaths: String
  txtListComp2FullBathsAdjBuiltIn: String
  txtListComp3FullBaths: String
  txtListComp3FullBathsAdjBuiltIn: String
  txtSubjectHalfBaths: String
  txtSaleComp1HalfBaths: String
  txtSaleComp1HalfBathsAdjBuiltIn: String
  txtSaleComp2HalfBaths: String
  txtSaleComp2HalfBathsAdjBuiltIn: String
  txtSaleComp3HalfBaths: String
  txtSaleComp3HalfBathsAdjBuiltIn: String
  txtListComp1HalfBaths: String
  txtListComp1HalfBathsAdjBuiltIn: String
  txtListComp2HalfBaths: String
  txtListComp2HalfBathsAdjBuiltIn: String
  txtListComp3HalfBaths: String
  txtListComp3HalfBathsAdjBuiltIn: String
  txtSubjectGLA: String
  txtSaleComp1GLA: String
  txtSaleComp1GLAAdjBuiltIn: String
  txtSaleComp2GLA: String
  txtSaleComp2GLAAdjBuiltIn: String
  txtSaleComp3GLA: String
  txtSaleComp3GLAAdjBuiltIn: String
  txtListComp1GLA: String
  txtListComp1GLAAdjBuiltIn: String
  txtListComp2GLA: String
  txtListComp2GLAAdjBuiltIn: String
  txtListComp3GLA: String
  txtListComp3GLAAdjBuiltIn: String
  txtSubjectYearBuilt: String
  txtSaleComp1YearBuilt: String
  txtSaleComp1YearBuiltAdjBuiltIn: String
  txtSaleComp2YearBuilt: String
  txtSaleComp2YearBuiltAdjBuiltIn: String
  txtSaleComp3YearBuilt: String
  txtSaleComp3YearBuiltAdjBuiltIn: String
  txtListComp1YearBuilt: String
  txtListComp1YearBuiltAdjBuiltIn: String
  txtListComp2YearBuilt: String
  txtListComp2YearBuiltAdjBuiltIn: String
  txtListComp3YearBuilt: String
  txtListComp3YearBuiltAdjBuiltIn: String
  txtSubjectAge: String
  txtSaleComp1Age: String
  txtSaleComp2Age: String
  txtSaleComp3Age: String
  txtListComp1Age: String
  txtListComp2Age: String
  txtListComp3Age: String
  txtSubjectAcres: String
  txtSaleComp1Acres: String
  txtSaleComp1AcresAdjBuiltIn: String
  txtSaleComp2Acres: String
  txtSaleComp2AcresAdjBuiltIn: String
  txtSaleComp3Acres: String
  txtSaleComp3AcresAdjBuiltIn: String
  txtListComp1Acres: String
  txtListComp1AcresAdjBuiltIn: String
  txtListComp2Acres: String
  txtListComp2AcresAdjBuiltIn: String
  txtListComp3Acres: String
  txtListComp3AcresAdjBuiltIn: String
  txtSubjectSquareFeet: String
  txtSaleComp1SquareFeet: String
  txtSaleComp2SquareFeet: String
  txtSaleComp3SquareFeet: String
  txtListComp1SquareFeet: String
  txtListComp2SquareFeet: String
  txtListComp3SquareFeet: String
  cmbSubjectGarage: String
  cmbSaleComp1Garage: String
  txtSaleComp1GarageAdjBuiltIn: String
  cmbSaleComp2Garage: String
  txtSaleComp2GarageAdjBuiltIn: String
  cmbSaleComp3Garage: String
  txtSaleComp3GarageAdjBuiltIn: String
  cmbListComp1Garage: String
  txtListComp1GarageAdjBuiltIn: String
  cmbListComp2Garage: String
  txtListComp2GarageAdjBuiltIn: String
  cmbListComp3Garage: String
  txtListComp3GarageAdjBuiltIn: String
  cmbSubjectPool: String
  cmbSaleComp1Pool: String
  txtSaleComp1PoolAdjBuiltIn: String
  cmbSaleComp2Pool: String
  txtSaleComp2PoolAdjBuiltIn: String
  cmbSaleComp3Pool: String
  txtSaleComp3PoolAdjBuiltIn: String
  cmbListComp1Pool: String
  txtListComp1PoolAdjBuiltIn: String
  cmbListComp2Pool: String
  txtListComp2PoolAdjBuiltIn: String
  cmbListComp3Pool: String
  txtListComp3PoolAdjBuiltIn: String
  cmbSubjectPorchPatioDeck: String
  cmbSaleComp1PorchPatioDeck: String
  txtSaleComp1PorchPatioDeckAdjBuiltIn: String
  cmbSaleComp2PorchPatioDeck: String
  txtSaleComp2PorchPatioDeckAdjBuiltIn: String
  cmbSaleComp3PorchPatioDeck: String
  txtSaleComp3PorchPatioDeckAdjBuiltIn: String
  cmbListComp1PorchPatioDeck: String
  txtListComp1PorchPatioDeckAdjBuiltIn: String
  cmbListComp2PorchPatioDeck: String
  txtListComp2PorchPatioDeckAdjBuiltIn: String
  cmbListComp3PorchPatioDeck: String
  txtListComp3PorchPatioDeckAdjBuiltIn: String
  cmbSubjectFireplace: String
  cmbSaleComp1Fireplace: String
  txtSaleComp1FireplaceAdjBuiltIn: String
  cmbSaleComp2Fireplace: String
  txtSaleComp2FireplaceAdjBuiltIn: String
  cmbSaleComp3Fireplace: String
  txtSaleComp3FireplaceAdjBuiltIn: String
  cmbListComp1Fireplace: String
  txtListComp1FireplaceAdjBuiltIn: String
  cmbListComp2Fireplace: String
  txtListComp2FireplaceAdjBuiltIn: String
  cmbListComp3Fireplace: String
  txtListComp3FireplaceAdjBuiltIn: String
  cmbSubjectBasement: String
  cmbSaleComp1Basement: String
  txtSaleComp1BasementAdjBuiltIn: String
  cmbSaleComp2Basement: String
  txtSaleComp2BasementAdjBuiltIn: String
  cmbSaleComp3Basement: String
  txtSaleComp3BasementAdjBuiltIn: String
  cmbListComp1Basement: String
  txtListComp1BasementAdjBuiltIn: String
  cmbListComp2Basement: String
  txtListComp2BasementAdjBuiltIn: String
  cmbListComp3Basement: String
  txtListComp3BasementAdjBuiltIn: String
  cmbSubjectIsFinished: String
  cmbSaleComp1IsFinished: String
  txtSaleComp1IsFinishedAdjBuiltIn: String
  cmbSaleComp2IsFinished: String
  txtSaleComp2IsFinishedAdjBuiltIn: String
  cmbSaleComp3IsFinished: String
  txtSaleComp3IsFinishedAdjBuiltIn: String
  cmbListComp1IsFinished: String
  txtListComp1IsFinishedAdjBuiltIn: String
  cmbListComp2IsFinished: String
  txtListComp2IsFinishedAdjBuiltIn: String
  cmbListComp3IsFinished: String
  txtListComp3IsFinishedAdjBuiltIn: String
  cmbSubjectPercentFinished: String
  cmbSaleComp1PercentFinished: String
  txtSaleComp1PercentFinishedAdjBuiltIn: String
  cmbSaleComp2PercentFinished: String
  txtSaleComp2PercentFinishedAdjBuiltIn: String
  cmbSaleComp3PercentFinished: String
  txtSaleComp3PercentFinishedAdjBuiltIn: String
  cmbListComp1PercentFinished: String
  txtListComp1PercentFinishedAdjBuiltIn: String
  cmbListComp2PercentFinished: String
  txtListComp2PercentFinishedAdjBuiltIn: String
  cmbListComp3PercentFinished: String
  txtListComp3PercentFinishedAdjBuiltIn: String
  txtSubjectBasementSqFt: String
  txtSaleComp1BasementSqFt: String
  txtSaleComp1BasementSqFtAdjBuiltIn: String
  txtSaleComp2BasementSqFt: String
  txtSaleComp2BasementSqFtAdjBuiltIn: String
  txtSaleComp3BasementSqFt: String
  txtSaleComp3BasementSqFtAdjBuiltIn: String
  txtListComp1BasementSqFt: String
  txtListComp1BasementSqFtAdjBuiltIn: String
  txtListComp2BasementSqFt: String
  txtListComp2BasementSqFtAdjBuiltIn: String
  txtListComp3BasementSqFt: String
  txtListComp3BasementSqFtAdjBuiltIn: String
  txtSubjectOriginalListDate: String
  txtSaleComp1OriginalListDate: String
  txtSaleComp2OriginalListDate: String
  txtSaleComp3OriginalListDate: String
  txtListComp1OriginalListDate: String
  txtListComp2OriginalListDate: String
  txtListComp3OriginalListDate: String
  txtSubjectCurrentListDate: String
  txtSaleComp1CurrentListDate: String
  txtSaleComp2CurrentListDate: String
  txtSaleComp3CurrentListDate: String
  txtListComp1CurrentListDate: String
  txtListComp2CurrentListDate: String
  txtListComp3CurrentListDate: String
  txtSubjectOriginalListPrice: String
  txtSaleComp1OriginalListPrice: String
  txtSaleComp2OriginalListPrice: String
  txtSaleComp3OriginalListPrice: String
  txtListComp1OriginalListPrice: String
  txtListComp2OriginalListPrice: String
  txtListComp3OriginalListPrice: String
  txtSubjectListPrice: String
  txtSaleComp1ListPrice: String
  txtSaleComp2ListPrice: String
  txtSaleComp3ListPrice: String
  txtListComp1ListPrice: String
  txtListComp2ListPrice: String
  txtListComp3ListPrice: String
  txtSubjectSalePrice: String
  txtSaleComp1SalePrice: String
  txtSaleComp2SalePrice: String
  txtSaleComp3SalePrice: String
  txtSubjectSaleDate: String
  txtSaleComp1SaleDate: String
  txtSaleComp2SaleDate: String
  txtSaleComp3SaleDate: String
  cmbSubjectFinancing: String
  cmbSaleComp1Financing: String
  cmbSaleComp2Financing: String
  cmbSaleComp3Financing: String
  cmbListComp1Financing: String
  cmbListComp2Financing: String
  cmbListComp3Financing: String
  txtSubjectDOM: String
  txtSaleComp1DOM: String
  txtSaleComp2DOM: String
  txtSaleComp3DOM: String
  txtListComp1DOM: String
  txtListComp2DOM: String
  txtListComp3DOM: String
  txtSubjectPricePerSqFt: String
  txtSaleComp1PricePerSqFt: String
  txtSaleComp2PricePerSqFt: String
  txtSaleComp3PricePerSqFt: String
  txtListComp1PricePerSqFt: String
  txtListComp2PricePerSqFt: String
  txtListComp3PricePerSqFt: String
  txtSubjectAdjustments: String
  txtSaleComp1Adjustments: String
  txtSaleComp2Adjustments: String
  txtSaleComp3Adjustments: String
  txtListComp1Adjustments: String
  txtListComp2Adjustments: String
  txtListComp3Adjustments: String
  txtSubjectCompTotals: String
  txtSaleComp1CompTotals: String
  txtSaleComp2CompTotals: String
  txtSaleComp3CompTotals: String
  txtListComp1CompTotals: String
  txtListComp2CompTotals: String
  txtListComp3CompTotals: String
  cmbListComp1CommentType: String
  txtListComp1ComparableComments: String
  txtListComp1FormatAdjustments: String
  txtListComp1MLSComments: String
  cmbListComp2CommentType: String
  txtListComp2ComparableComments: String
  txtListComp2FormatAdjustments: String
  txtListComp2MLSComments: String
  cmbListComp3CommentType: String
  txtListComp3ComparableComments: String
  txtListComp3FormatAdjustments: String
  txtListComp3MLSComments: String
  cmbSaleComp1CommentType: String
  txtSaleComp1ComparableComments: String
  txtSaleComp1FormatAdjustments: String
  txtSaleComp1MLSComments: String
  cmbSaleComp2CommentType: String
  txtSaleComp2ComparableComments: String
  txtSaleComp2FormatAdjustments: String
  txtSaleComp2MLSComments: String
  cmbSaleComp3CommentType: String
  txtSaleComp3ComparableComments: String
  txtSaleComp3FormatAdjustments: String
  txtSaleComp3MLSComments: String
  cmbNeighborhoodTrend: String
  txtMonthlyPecent: String
  txtEstimatedRent: String
  txtEstimatedDaysOnMarket: String
  txtNoBoarded: String
  txtNoOfActive: String
  txt6MonthPecent: String
  txtAnnualPecent: String
  txtListings: String
  cmbSupply: String
  txtListingsMinValue: String
  txtListingsRange1: String
  txtListingsMedValue: String
  txtListingsMaxValue: String
  txtListingsRange2: String
  txtListingsDOM: String
  txtListingsDOMRange1: String
  txtListingsDOMRange2: String
  cmbREOTrend: String
  txtNoOfFM: String
  txtNoOfSS: String
  txtNoOfREO: String
  txtNoOfDistressed: String
  txtSales: String
  cmbDemand: String
  txtSalesRange1: String
  txtSalesMedValue: String
  txtSalesRange2: String
  txtSalesDOM: String
  txtSalesDOMRange1: String
  txtSalesDOMRange2: String
  txtZillowNeighborhoodTrend: String
  txtNeighborhoodTrendComments: String
  txtTotalListings: String
  txtTotalSales: String
  txtNoOfREOListings: String
  txtNoOfSSListings: String
  txtNoOfREOSales: String
  txtNoOfSSSales: String
  txtTaxID: String
  txtLastSaleDate: String
  txtLastSalePrice: String
  cmbIsListed: String
  txtOwnerOccupied: String
  txtRenterOccupied: String
  txtMarketRent: String
  txtNoOfRentals: String
  txtTypicalDOM: String
  txtNoRentHomes: String
  txtTypicalRentalRates: String
  adjustmentPrice: String
  txtCalculatedGLA: String
  txtCalculatedAge: String
  txtCalculatedSaleDates: String
  txtCalculatedProximity: String
  txtCalculatedStyle: String
  txtCalculatedMonthsSupply: String
  txtCalculatedProxim: String
  txtCalculatedGLAs: String
  txtCalculatedAges: String
  txtCalculatedCond: String
  txtCalculatedView: String
  txtCalculatedStyle1: String
  txtCalculatedLots: String
  txtCalculatedBeds: String
  txtCalculatedBath: String
  rdbresaletext: String
  rdbmarketedtext: String
  txtpmi: String
  txtOtherComments: String
  txtcbnew: String
  txtcbold: String
  txtcbstyle: String
  txtcblot: String
  txtcbview: String
  txtcbdamage: String
  txtcbupgrade: String
  txtcbinfluence: String
  txtSubjectComments: String
  txtNeighborhoodComments: String
  txtNeighborhoodTrend: String
  txtValidation1: String
  txtUniqueComments: String
  txtMarketingStrategy: String
  txtDisclaimer2: String
  txtBrokerComments: String
  txtValidation: String
  txt30DayQuickSale: String
  txt60DayQuickSale: String
  txt90DayAsIsValue: String
  txt120DayQuickSale: String
  txt180DayQuickSale: String
  txtListPriceFinalValues: String
  txt30DayListPriceFinalValues: String
  txt30DayQuickSaleRepaired: String
  txt60DayQuickSaleRepaired: String
  txt90DayAsIsValueRepaired: String
  txt120DayQuickSaleRepaired: String
  txt180DayQuickSaleRepaired: String
  txtListPriceRepaired: String
  txt30DayListPriceRepaired: String
  cmbHouse: String
  cmbPositive: String
  cmbNegative: String
  cmbView: String
  cmbMarket: String
  cmbPricing: String
  cmbListing: String
  cmbExtra: String
  txtUnique: String
  priceComment: String
  rangeComment: String
  proxException: String
  glaException: String
  ageException: String
  condException: String
  viewException: String
  styleException: String
  lotException: String
  bedException: String
  bathException: String
}

type Announcement {
  id: ID
  subject: String
  startDate: String
  endDate: String
  message: String
  createdBy: String
  createdDateTime: String
}

type AnnouncementResult {
  totalCount: Int
  results: [Announcement]
}

input AnnouncementFilterInput {
  limit: Int
  offset: Int
  search: String
  isActive: Boolean
}

input AnnouncementInput {
  subject: String
  startDate: String
  endDate: String
  message: String
}

type Session {
  id: ID
  invoiceDate: String
  start: String
  end: String
}

type SessionResult {
  totalCount: Int
  results: [Session]
}

input UpdateSessionInput {
  invoiceDate: String
  start: String
  end: String
}

input SessionFilterInput {
  limit: Int
  offset: Int
  userId: ID
  dateFrom: String
  dateTo: String
}

type PermissionGroup {
  id: ID
  name: String
  permissions: [String]
}

input PermissionGroupInput {
  name: String
  permissions: [String]
}

type PermissionGroupResult {
  totalCount: Int
  results: [PermissionGroup]
}

input PermissionGroupFilterInput {
  limit: Int
  offset: Int
  name: String
}

type LoginLog {
  username: String
  datetime: String
  ipAddress: String
}

type LoginLogResult {
  totalCount: Int
  results: [LoginLog]
}
input LoginLogFilterInput {
  id: ID
  limit: Int
  offset: Int
  dateFrom: String
  dateTo: String
}

input SavePipelineComparableInput {
  mls: String!
  status: String!
  order: Int!
}

type PipelineComparable {
  id: ID
  pipelineId: ID!
  mls: String
  status: String
  order: Int
}

type PipelineComparableResult {
  totalCount: Int
  results: [PipelineComparable]
}

input PipelineComparableFilterInput {
  limit: Int
  offset: Int
  dateFrom: String
  dateTo: String
}

type Billing {
  id: ID
  invoiceNumber: String
  status: String
  date: String
  dateFrom: String
  dateTo: String
  dueDate: String
  userId: String
  userName: String
  entries: [BillingEntry]
}

type BillingEntry {
  orderNumber: String
  description: String
  amount: Float
  type: String
}

type BillingResult {
  totalCount: Int
  results: [Billing]
}

input SaveBillingInput {
  userId: ID!
  invoiceNumber: String!
  date: String!
  dateFrom: String
  dateTo: String
  dueDate: String!
  entries: [BillingEntryInput!]!
}

input UpdateBillingInput {
  userId: ID
  invoiceNumber: String
  date: String
  dateFrom: String
  dateTo: String
  dueDate: String
  status: String
  entries: [BillingEntryInput!]
}

input BillingEntryInput {
  orderNumber: String
  description: String!
  amount: Float!
  type: String!
}

input BillingFilterInput {
  limit: Int
  offset: Int
  dateFrom: String
  dateTo: String
  userId: ID
  orderNumber: String
}

input SaveIformGridInput {
  address: String
  age: String
  basementFinishedSqFt: String
  basementSquareFeet: String
  basementType: String
  bathrooms: String
  bedrooms: String
  carport: String
  city: String
  construction: String
  daysOnMarket: String
  exterior: String
  exteriorFeatures: String
  fireplace: String
  fullBaths: String
  garage: String
  garageDescription: String
  halfBaths: String
  hOAFee: String
  listDate: String
  listPrice: String
  lotSize: String
  mlsNumber: String
  mlsComments: String
  originalListDate: String
  originalListPrice: String
  parkingSpacesCarport: String
  parkingSpacesGarage: String
  pool: String
  porch: String
  priceClosed: String
  priceList: String
  propertyStyle: String
  proplmg: String
  proximity: String
  realEstateOwned: String
  saleDate: String
  salePrice: String
  saleType: String
  selType: String
  shortSale: String
  squareFootage: String
  status: String
  streetDirection: String
  streetName: String
  streetNumber: String
  streetType: String
  subdivision: String
  termsOfSale: String
  totalRooms: String
  totalUnits: String
  unitNumber: String
  view: String
  waterfront: String
  yearBuilt: String
  zip: String
}

type IformGrid {
  id: ID
  address: String
  age: String
  basementFinishedSqFt: String
  basementSquareFeet: String
  basementType: String
  bathrooms: String
  bedrooms: String
  carport: String
  city: String
  construction: String
  daysOnMarket: String
  exterior: String
  exteriorFeatures: String
  fireplace: String
  fullBaths: String
  garage: String
  garageDescription: String
  halfBaths: String
  hOAFee: String
  listDate: String
  listPrice: String
  lotSize: String
  mlsNumber: String
  mlsComments: String
  originalListDate: String
  originalListPrice: String
  parkingSpacesCarport: String
  parkingSpacesGarage: String
  pool: String
  porch: String
  priceClosed: String
  priceList: String
  propertyStyle: String
  proplmg: String
  proximity: String
  realEstateOwned: String
  saleDate: String
  salePrice: String
  saleType: String
  selType: String
  shortSale: String
  squareFootage: String
  status: String
  streetDirection: String
  streetName: String
  streetNumber: String
  streetType: String
  subdivision: String
  termsOfSale: String
  totalRooms: String
  totalUnits: String
  unitNumber: String
  view: String
  waterfront: String
  yearBuilt: String
  zip: String
}

type IformGridResult {
  totalCount: Int
  results: [IformGrid]
}

input IformGridFilterInput {
  limit: Int
  offset: Int
  search: String
}

type CreditLedger {
  id: ID
  clientName: String
  clientId: ID
  paypalOrderId: String
  type: String
  orderNumber: String
  orderAddress: String
  createdDateTime: String
  balance: Float
  iformCharge: Float
  amount: Float
}

type CreditLedgerResult {
  totalCount: Int
  results: [CreditLedger]
}

scalar Upload
`},
)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_addCreditLedger_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.AddCreditLedgerInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAddCreditLedgerInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAddCreditLedgerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelInvoice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["reason"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reason"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_continueSession_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBillingExcel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAnnouncement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteBilling_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEmailTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteHeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteIformGrid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteInstruction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePermissionGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePipelineComparable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePipelineDoc_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePipelinePhoto_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProfileDoc_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_forgetPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["password"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_registerUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.RegisterInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRegisterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRegisterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resetPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["newPassword"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newPassword"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_saveAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.AccountInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAccountInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveAnnouncement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.AnnouncementInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAnnouncementInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncementInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveBilling_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SaveBillingInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSaveBillingInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveBillingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CommentInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCommentInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCommentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.CompanyInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCompanyInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveCredit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SaveCreditInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSaveCreditInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveCreditInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveEmailTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SaveEmailTemplateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSaveEmailTemplateInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveEmailTemplateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveHeaderDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["parentId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["parentId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_saveHeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveIformGrid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 models.SaveIformGridInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNSaveIformGridInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveIformGridInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_saveInstruction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SaveInstructionInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSaveInstructionInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveInstructionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveInvoice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SaveInvoiceInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSaveInvoiceInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveInvoiceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_savePermissionGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.PermissionGroupInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPermissionGroupInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroupInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_savePipelineComparable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 models.SavePipelineComparableInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNSavePipelineComparableInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSavePipelineComparableInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_savePipelineDoc_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 models.PipelineDocInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNPipelineDocInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineDocInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_savePipelineNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 models.SavePipelineNoteInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNSavePipelineNoteInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSavePipelineNoteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_savePipelinePhoto_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 models.PipelinePhotoInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNPipelinePhotoInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelinePhotoInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_savePipelineQualityControlAndNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 models.SavePipelineQualityControlAndNoteInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNSavePipelineQualityControlAndNoteInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSavePipelineQualityControlAndNoteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_savePipelineQualityControl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["message"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["message"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_savePipeline_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.PipelineInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPipelineInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveProfileDoc_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ProfileDocInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNProfileDocInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐProfileDocInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveQualityControl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SaveReviewInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSaveReviewInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveReviewInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_saveSession_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["invoiceDate"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["invoiceDate"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_saveUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SaveUserInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSaveUserInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_stopSession_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitPipelinePhoto_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["IsSubmitPipelinePhoto"]; ok {
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsSubmitPipelinePhoto"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.AccountInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAccountInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdjustment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 float64
	if tmp, ok := rawArgs["value"]; ok {
		arg1, err = ec.unmarshalNFloat2float64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAnnouncement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.AnnouncementInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAnnouncementInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncementInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBilling_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.UpdateBillingInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdateBillingInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateBillingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.CompanyInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNCompanyInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDefault_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.DefaultInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDefaultInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐDefaultInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEmailTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.UpdateEmailTemplateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdateEmailTemplateInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateEmailTemplateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateHeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIformTemp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 models.UpdateIformTempInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdateIformTempInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateIformTempInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateIform_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 models.UpdateIformInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdateIformInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateIformInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateInvoice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.UpdateInvoiceInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdateInvoiceInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateInvoiceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePermissionGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.PermissionGroupInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNPermissionGroupInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroupInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePipelineComparable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["mls"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mls"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePipelineNeighborhood_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 models.UpdatePipelineNeighborhoodInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdatePipelineNeighborhoodInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdatePipelineNeighborhoodInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePipelineRepair_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 models.UpdatePipelineRepairInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdatePipelineRepairInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdatePipelineRepairInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePipelineState_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.UpdatePipelineStateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUpdatePipelineStateInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdatePipelineStateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePipeline_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.UpdatePipelineInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdatePipelineInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdatePipelineInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.ProfileInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNProfileInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐProfileInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateQcRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.UpdateQcRequestInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdateQcRequestInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateQcRequestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateQualityControl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.UpdateQualityControlInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdateQualityControlInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateQualityControlInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.UpdateRequestInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdateRequestInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateRequestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.UpdateReviewInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdateReviewInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateReviewInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSession_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.UpdateSessionInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdateSessionInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateSessionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 models.UpdateUserInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUpdateUserInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_verifyPaypalTransaction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["paypalOrderId"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paypalOrderId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["billingId"]; ok {
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["billingId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.AccountFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAccountFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccountFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allAdjustment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userId"]; ok {
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allAnnouncement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.AnnouncementFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAnnouncementFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncementFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.BalanceFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOBalanceFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBalanceFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allBilling_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.BillingFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOBillingFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allCheckout_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.CheckoutFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCheckoutFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCheckoutFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userId"]; ok {
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.CompanyFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCompanyFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allCreditLedger_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userId"]; ok {
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 *models.FilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg1, err = ec.unmarshalOFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_allCredits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.CreditsFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCreditsFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditsFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allEmailTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.EmailTemplateFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOEmailTemplateFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐEmailTemplateFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allHeaderDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["parentId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["parentId"] = arg0
	var arg1 *models.HeaderFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg1, err = ec.unmarshalOHeaderFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_allHeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.HeaderFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOHeaderFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allIformGrid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 *models.IformGridFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg1, err = ec.unmarshalOIformGridFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformGridFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_allInstruction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.InstructionFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOInstructionFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInstructionFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allInvoiceRequestHistory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.FilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allInvoiceRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.InvoiceRequestFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOInvoiceRequestFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allInvoice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.InvoiceFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOInvoiceFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allLoginLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.LoginLogFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLoginLogFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLoginLogFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allOrderAnalytics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.OrderAnalyticsFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalNOrderAnalyticsFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐOrderAnalyticsFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allOrderSubmit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["year"]; ok {
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["year"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allPermissionGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.PermissionGroupFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOPermissionGroupFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroupFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allPipelineComparable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 *models.PipelineComparableFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg1, err = ec.unmarshalOPipelineComparableFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineComparableFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_allPipelineDoc_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 *models.FilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg1, err = ec.unmarshalOFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_allPipelineNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 *models.FilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg1, err = ec.unmarshalOFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_allPipelinePhoto_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 *models.FilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg1, err = ec.unmarshalOFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_allPipelineQualityControlAndNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 *models.FilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg1, err = ec.unmarshalOFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_allPipelineQualityControl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	var arg1 *models.FilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg1, err = ec.unmarshalOFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_allPipeline_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.PipelineFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOPipelineFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allProfileDoc_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userId"]; ok {
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 *models.FilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg1, err = ec.unmarshalOFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_allQcCompleted_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["year"]; ok {
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["year"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allQcHistory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.QcHistoryFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOQcHistoryFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcHistoryFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allQcRating_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["year"]; ok {
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["year"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["type"]; ok {
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_allQcRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.QcRequestFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOQcRequestFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRequestFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allQualityControl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.FilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.RequestFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORequestFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRequestFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.FilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allSalesAnalytics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 models.SalesAnalyticsFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalNSalesAnalyticsFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSalesAnalyticsFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allSession_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.SessionFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOSessionFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSessionFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *models.UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_company_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_default_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userId"]; ok {
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_headerCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*string
	if tmp, ok := rawArgs["codes"]; ok {
		arg0, err = ec.unmarshalNString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["codes"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_iformTemp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_iform_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_pipelineNeighborhood_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_pipelineRepair_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["pipelineId"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pipelineId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_pipeline_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Account_id(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_recordType(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_company(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_webSite(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebSite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_username(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_password(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_question1(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Question1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_answer1(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_question2(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Question2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_answer2(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_question3(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Question3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_answer3(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_others(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Others, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_LastUpdateTime(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Account_logs(ctx context.Context, field graphql.CollectedField, obj *models.Account) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Account",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Log)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOLog2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLog(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.AccountResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AccountResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AccountResult_results(ctx context.Context, field graphql.CollectedField, obj *models.AccountResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AccountResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Account)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOAccount2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Adjustment_id(ctx context.Context, field graphql.CollectedField, obj *models.Adjustment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Adjustment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Adjustment_category(ctx context.Context, field graphql.CollectedField, obj *models.Adjustment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Adjustment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Adjustment_order(ctx context.Context, field graphql.CollectedField, obj *models.Adjustment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Adjustment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Adjustment_label(ctx context.Context, field graphql.CollectedField, obj *models.Adjustment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Adjustment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Adjustment_from(ctx context.Context, field graphql.CollectedField, obj *models.Adjustment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Adjustment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Adjustment_to(ctx context.Context, field graphql.CollectedField, obj *models.Adjustment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Adjustment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Adjustment_value(ctx context.Context, field graphql.CollectedField, obj *models.Adjustment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Adjustment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_id(ctx context.Context, field graphql.CollectedField, obj *models.Announcement) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Announcement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_subject(ctx context.Context, field graphql.CollectedField, obj *models.Announcement) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Announcement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_startDate(ctx context.Context, field graphql.CollectedField, obj *models.Announcement) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Announcement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_endDate(ctx context.Context, field graphql.CollectedField, obj *models.Announcement) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Announcement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_message(ctx context.Context, field graphql.CollectedField, obj *models.Announcement) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Announcement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.Announcement) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Announcement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Announcement_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.Announcement) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Announcement",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AnnouncementResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.AnnouncementResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AnnouncementResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AnnouncementResult_results(ctx context.Context, field graphql.CollectedField, obj *models.AnnouncementResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "AnnouncementResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Announcement)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOAnnouncement2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncement(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_client(ctx context.Context, field graphql.CollectedField, obj *models.Balance) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Balance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Client, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_total(ctx context.Context, field graphql.CollectedField, obj *models.Balance) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Balance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_paidAmount(ctx context.Context, field graphql.CollectedField, obj *models.Balance) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Balance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaidAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_other(ctx context.Context, field graphql.CollectedField, obj *models.Balance) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Balance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Other, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_unpaid(ctx context.Context, field graphql.CollectedField, obj *models.Balance) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Balance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unpaid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BalanceResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.BalanceResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BalanceResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _BalanceResult_results(ctx context.Context, field graphql.CollectedField, obj *models.BalanceResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BalanceResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Balance)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBalance2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBalance(ctx, field.Selections, res)
}

func (ec *executionContext) _Billing_id(ctx context.Context, field graphql.CollectedField, obj *models.Billing) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Billing",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Billing_invoiceNumber(ctx context.Context, field graphql.CollectedField, obj *models.Billing) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Billing",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvoiceNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Billing_status(ctx context.Context, field graphql.CollectedField, obj *models.Billing) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Billing",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Billing_date(ctx context.Context, field graphql.CollectedField, obj *models.Billing) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Billing",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Billing_dateFrom(ctx context.Context, field graphql.CollectedField, obj *models.Billing) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Billing",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Billing_dateTo(ctx context.Context, field graphql.CollectedField, obj *models.Billing) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Billing",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Billing_dueDate(ctx context.Context, field graphql.CollectedField, obj *models.Billing) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Billing",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Billing_userId(ctx context.Context, field graphql.CollectedField, obj *models.Billing) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Billing",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Billing_userName(ctx context.Context, field graphql.CollectedField, obj *models.Billing) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Billing",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Billing_entries(ctx context.Context, field graphql.CollectedField, obj *models.Billing) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Billing",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.BillingEntry)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBillingEntry2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _BillingEntry_orderNumber(ctx context.Context, field graphql.CollectedField, obj *models.BillingEntry) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BillingEntry",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BillingEntry_description(ctx context.Context, field graphql.CollectedField, obj *models.BillingEntry) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BillingEntry",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BillingEntry_amount(ctx context.Context, field graphql.CollectedField, obj *models.BillingEntry) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BillingEntry",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _BillingEntry_type(ctx context.Context, field graphql.CollectedField, obj *models.BillingEntry) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BillingEntry",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BillingResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.BillingResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BillingResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _BillingResult_results(ctx context.Context, field graphql.CollectedField, obj *models.BillingResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "BillingResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Billing)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBilling2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBilling(ctx, field.Selections, res)
}

func (ec *executionContext) _Checkout_clientName(ctx context.Context, field graphql.CollectedField, obj *models.Checkout) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Checkout",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Checkout_invoice(ctx context.Context, field graphql.CollectedField, obj *models.Checkout) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Checkout",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invoice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Checkout_total(ctx context.Context, field graphql.CollectedField, obj *models.Checkout) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Checkout",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Checkout_status(ctx context.Context, field graphql.CollectedField, obj *models.Checkout) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Checkout",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Checkout_date(ctx context.Context, field graphql.CollectedField, obj *models.Checkout) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Checkout",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Checkout_url(ctx context.Context, field graphql.CollectedField, obj *models.Checkout) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Checkout",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckoutResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.CheckoutResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CheckoutResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckoutResult_results(ctx context.Context, field graphql.CollectedField, obj *models.CheckoutResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CheckoutResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Checkout)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCheckout2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCheckout(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_id(ctx context.Context, field graphql.CollectedField, obj *models.Comment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_category(ctx context.Context, field graphql.CollectedField, obj *models.Comment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_label(ctx context.Context, field graphql.CollectedField, obj *models.Comment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_value(ctx context.Context, field graphql.CollectedField, obj *models.Comment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_section(ctx context.Context, field graphql.CollectedField, obj *models.Comment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Section, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.Comment) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_id(ctx context.Context, field graphql.CollectedField, obj *models.Company) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_name(ctx context.Context, field graphql.CollectedField, obj *models.Company) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_webSite(ctx context.Context, field graphql.CollectedField, obj *models.Company) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebSite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_isAdmin(ctx context.Context, field graphql.CollectedField, obj *models.Company) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_isClient(ctx context.Context, field graphql.CollectedField, obj *models.Company) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsClient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_isPremium(ctx context.Context, field graphql.CollectedField, obj *models.Company) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPremium, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Company_forms(ctx context.Context, field graphql.CollectedField, obj *models.Company) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Company",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Forms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.CompanyForm)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCompanyForm2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyForm(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyForm_name(ctx context.Context, field graphql.CollectedField, obj *models.CompanyForm) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CompanyForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyForm_style(ctx context.Context, field graphql.CollectedField, obj *models.CompanyForm) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CompanyForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Style, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.CompanyResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CompanyResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CompanyResult_results(ctx context.Context, field graphql.CollectedField, obj *models.CompanyResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CompanyResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Company)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCompany2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _Credit_id(ctx context.Context, field graphql.CollectedField, obj *models.Credit) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Credit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Credit_amount(ctx context.Context, field graphql.CollectedField, obj *models.Credit) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Credit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Credit_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.Credit) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Credit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Credit_paypalOrderId(ctx context.Context, field graphql.CollectedField, obj *models.Credit) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Credit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaypalOrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Credit_paypalToken(ctx context.Context, field graphql.CollectedField, obj *models.Credit) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Credit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaypalToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditLedger_id(ctx context.Context, field graphql.CollectedField, obj *models.CreditLedger) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditLedger",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditLedger_clientName(ctx context.Context, field graphql.CollectedField, obj *models.CreditLedger) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditLedger",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditLedger_clientId(ctx context.Context, field graphql.CollectedField, obj *models.CreditLedger) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditLedger",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditLedger_paypalOrderId(ctx context.Context, field graphql.CollectedField, obj *models.CreditLedger) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditLedger",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaypalOrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditLedger_type(ctx context.Context, field graphql.CollectedField, obj *models.CreditLedger) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditLedger",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditLedger_orderNumber(ctx context.Context, field graphql.CollectedField, obj *models.CreditLedger) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditLedger",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditLedger_orderAddress(ctx context.Context, field graphql.CollectedField, obj *models.CreditLedger) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditLedger",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditLedger_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.CreditLedger) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditLedger",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditLedger_balance(ctx context.Context, field graphql.CollectedField, obj *models.CreditLedger) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditLedger",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditLedger_iformCharge(ctx context.Context, field graphql.CollectedField, obj *models.CreditLedger) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditLedger",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IformCharge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditLedger_amount(ctx context.Context, field graphql.CollectedField, obj *models.CreditLedger) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditLedger",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditLedgerResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.CreditLedgerResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditLedgerResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditLedgerResult_results(ctx context.Context, field graphql.CollectedField, obj *models.CreditLedgerResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditLedgerResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.CreditLedger)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCreditLedger2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditLedger(ctx, field.Selections, res)
}

func (ec *executionContext) _Credits_clientName(ctx context.Context, field graphql.CollectedField, obj *models.Credits) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Credits",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Credits_invoice(ctx context.Context, field graphql.CollectedField, obj *models.Credits) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Credits",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invoice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Credits_credits(ctx context.Context, field graphql.CollectedField, obj *models.Credits) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Credits",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Credits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Credits_expiresAt(ctx context.Context, field graphql.CollectedField, obj *models.Credits) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Credits",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Credits_date(ctx context.Context, field graphql.CollectedField, obj *models.Credits) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Credits",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditsResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.CreditsResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditsResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CreditsResult_results(ctx context.Context, field graphql.CollectedField, obj *models.CreditsResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "CreditsResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Credits)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCredits2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCredits(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_listingType(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_alwayssubmitOrder(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlwayssubmitOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_autoCompleteStandbyOrder(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoCompleteStandbyOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_initialSearchGla(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialSearchGla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_initialSearchAge(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialSearchAge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_initialSearchProximity(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialSearchProximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_secondSearchGla(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondSearchGla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_secondSearchAge(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondSearchAge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_secondSearchProximity(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondSearchProximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_secondSearchSaleDates(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondSearchSaleDates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_thirdSearchGla(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdSearchGla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_thirdSearchAge(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdSearchAge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_thirdSearchProximity(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdSearchProximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_thirdSearchSaleDates(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdSearchSaleDates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_thirdSearchFilterByComplexName(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdSearchFilterByComplexName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_thirdSearchFilterByCity(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdSearchFilterByCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_thirdSearchFilterByZip(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdSearchFilterByZip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_thirdSearchFilterByCountry(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThirdSearchFilterByCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_useDefaults(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseDefaults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_useIformValidations(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseIformValidations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_subjectType(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_styleDesign(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StyleDesign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_exteriorFinish(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_condition(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_quality(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_view(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_pool(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_porchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_firePlace(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirePlace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_basement(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Basement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_condo(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Condo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_multiUnit(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MultiUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_mobileHome(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MobileHome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_sfd(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sfd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_sfaTownhouse(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SfaTownhouse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_theme(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Theme, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Default_isEnableEmailNotification(ctx context.Context, field graphql.CollectedField, obj *models.Default) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Default",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnableEmailNotification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Doc_id(ctx context.Context, field graphql.CollectedField, obj *models.Doc) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Doc",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Doc_type(ctx context.Context, field graphql.CollectedField, obj *models.Doc) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Doc",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Doc_fileName(ctx context.Context, field graphql.CollectedField, obj *models.Doc) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Doc",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Doc_url(ctx context.Context, field graphql.CollectedField, obj *models.Doc) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Doc",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Doc_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.Doc) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Doc",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplate_id(ctx context.Context, field graphql.CollectedField, obj *models.EmailTemplate) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "EmailTemplate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplate_type(ctx context.Context, field graphql.CollectedField, obj *models.EmailTemplate) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "EmailTemplate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplate_template(ctx context.Context, field graphql.CollectedField, obj *models.EmailTemplate) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "EmailTemplate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Template, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplate_subject(ctx context.Context, field graphql.CollectedField, obj *models.EmailTemplate) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "EmailTemplate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplate_message(ctx context.Context, field graphql.CollectedField, obj *models.EmailTemplate) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "EmailTemplate",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplateResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.EmailTemplateResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "EmailTemplateResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailTemplateResult_results(ctx context.Context, field graphql.CollectedField, obj *models.EmailTemplateResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "EmailTemplateResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.EmailTemplate)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOEmailTemplate2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐEmailTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) _Header_id(ctx context.Context, field graphql.CollectedField, obj *models.Header) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Header",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Header_name(ctx context.Context, field graphql.CollectedField, obj *models.Header) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Header",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HeaderCode_code(ctx context.Context, field graphql.CollectedField, obj *models.HeaderCode) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HeaderCode",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HeaderCode_value(ctx context.Context, field graphql.CollectedField, obj *models.HeaderCode) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HeaderCode",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HeaderResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.HeaderResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HeaderResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _HeaderResult_results(ctx context.Context, field graphql.CollectedField, obj *models.HeaderResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "HeaderResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Header)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOHeader2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeader(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_id(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_formType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_pipelineId(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtClient(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtClient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCompany(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtOrderNumber(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtOrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbOrderType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbOrderType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtAddress(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtLocation(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtBrokerChecker(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtBrokerChecker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtPreparerInfoAgent(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtPreparerInfoAgentLicense(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoAgentLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtPreparerInfoBroker(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoBroker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtPreparerInfoBrokerLicense(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoBrokerLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtPreparerInfoAddress(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtPreparerInfoBrokerage(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoBrokerage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtPreparerInfoAgentCompany(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoAgentCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtPreparerInfoPhone(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtPreparerInfoYearsOfExperience(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoYearsOfExperience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtPreparerInfoEmail(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectAddress(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtPreparerInfoMilesAwayFromSubject(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoMilesAwayFromSubject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtAgentZip(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtAgentZip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtAgentCity(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtAgentCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtAgentState(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtAgentState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtDisclaimer(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtDisclaimer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbLocation(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCounty(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCounty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtTrullia(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtTrullia, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtZillow(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtZillow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtFindcompsnow(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtFindcompsnow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtAverage(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtAverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbForm(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbForm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbForm2(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbForm2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1Address(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2Address(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3Address(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1Address(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2Address(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3Address(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectState(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1State(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2State(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3State(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1State(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2State(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3State(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectCity(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1City(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2City(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3City(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1City(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2City(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3City(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectnoUnit(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectnoUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectUnitNo(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectUnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1noUnit(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1noUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1UnitNo(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1UnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2noUnit(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2noUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2UnitNo(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2UnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3noUnit(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3noUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3UnitNo(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3UnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1noUnit(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1noUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1UnitNo(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1UnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2noUnit(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2noUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2UnitNo(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2UnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3noUnit(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3noUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3UnitNo(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3UnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectUnits(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectUnits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1Units(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2Units(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3Units(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1Units(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2Units(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3Units(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectZip(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectZip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1Zip(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2Zip(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3Zip(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1Zip(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2Zip(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3Zip(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectProximity(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectProximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1Proximity(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Proximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2Proximity(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Proximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3Proximity(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Proximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1Proximity(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Proximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2Proximity(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Proximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3Proximity(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Proximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectDataSource(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectDataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1DataSource(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1DataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2DataSource(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2DataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3DataSource(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3DataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1DataSource(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1DataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2DataSource(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2DataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3DataSource(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3DataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectMLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectMLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1MLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1MLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2MLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2MLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3MLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3MLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1MLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1MLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2MLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2MLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3MLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3MLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectSaleType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectSaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1SaleType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1SaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2SaleType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2SaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3SaleType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3SaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1SaleType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1SaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2SaleType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2SaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3SaleType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3SaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1Type(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2Type(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3Type(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1Type(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2Type(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3Type(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectStyle(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1Style(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Style, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1StyleAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1StyleAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2Style(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Style, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2StyleAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2StyleAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3Style(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Style, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3StyleAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3StyleAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1Style(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Style, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1StyleAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1StyleAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2Style(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Style, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2StyleAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2StyleAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3Style(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Style, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3StyleAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3StyleAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1ExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1ExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1ExtFinishAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1ExtFinishAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2ExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2ExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2ExtFinishAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2ExtFinishAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3ExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3ExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3ExtFinishAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3ExtFinishAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1ExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1ExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1ExtFinishAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1ExtFinishAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2ExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2ExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2ExtFinishAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2ExtFinishAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3ExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3ExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3ExtFinishAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3ExtFinishAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectCondition(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectCondition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1Condition(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1ConditionAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1ConditionAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2Condition(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2ConditionAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2ConditionAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3Condition(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3ConditionAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3ConditionAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1Condition(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1ConditionAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1ConditionAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2Condition(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2ConditionAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2ConditionAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3Condition(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3ConditionAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3ConditionAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectQuality(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectQuality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1Quality(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Quality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1QualityAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1QualityAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2Quality(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Quality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2QualityAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2QualityAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3Quality(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Quality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3QualityAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3QualityAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1Quality(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Quality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1QualityAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1QualityAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2Quality(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Quality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2QualityAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2QualityAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3Quality(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Quality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3QualityAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3QualityAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectView(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectView, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1View(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1ViewAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1ViewAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2View(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2ViewAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2ViewAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3View(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3ViewAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3ViewAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1View(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1ViewAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1ViewAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2View(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2ViewAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2ViewAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3View(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3ViewAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3ViewAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectSubdivision(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectSubdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1Subdivision(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Subdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2Subdivision(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Subdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3Subdivision(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Subdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1Subdivision(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Subdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2Subdivision(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Subdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3Subdivision(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Subdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectHOAFee(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectHOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1HOAFee(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1HOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2HOAFee(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2HOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3HOAFee(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3HOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1HOAFee(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1HOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2HOAFee(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2HOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3HOAFee(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3HOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectTotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectTotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1TotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1TotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1TotalRoomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1TotalRoomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2TotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2TotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2TotalRoomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2TotalRoomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3TotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3TotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3TotalRoomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3TotalRoomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1TotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1TotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1TotalRoomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1TotalRoomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2TotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2TotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2TotalRoomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2TotalRoomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3TotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3TotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3TotalRoomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3TotalRoomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectBedrooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectBedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1Bedrooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Bedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1BedroomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1BedroomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2Bedrooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Bedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2BedroomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2BedroomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3Bedrooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Bedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3BedroomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3BedroomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1Bedrooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Bedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1BedroomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1BedroomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2Bedrooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Bedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2BedroomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2BedroomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3Bedrooms(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Bedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3BedroomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3BedroomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectFullBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectFullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1FullBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1FullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1FullBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1FullBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2FullBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2FullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2FullBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2FullBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3FullBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3FullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3FullBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3FullBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1FullBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1FullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1FullBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1FullBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2FullBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2FullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2FullBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2FullBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3FullBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3FullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3FullBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3FullBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectHalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectHalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1HalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1HalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1HalfBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1HalfBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2HalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2HalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2HalfBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2HalfBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3HalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3HalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3HalfBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3HalfBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1HalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1HalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1HalfBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1HalfBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2HalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2HalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2HalfBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2HalfBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3HalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3HalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3HalfBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3HalfBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectGLA(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectGla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1GLA(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1gla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1GLAAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1GLAAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2GLA(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2gla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2GLAAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2GLAAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3GLA(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3gla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3GLAAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3GLAAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1GLA(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1gla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1GLAAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1GLAAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2GLA(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2gla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2GLAAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2GLAAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3GLA(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3gla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3GLAAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3GLAAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectYearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectYearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1YearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1YearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1YearBuiltAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1YearBuiltAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2YearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2YearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2YearBuiltAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2YearBuiltAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3YearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3YearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3YearBuiltAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3YearBuiltAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1YearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1YearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1YearBuiltAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1YearBuiltAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2YearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2YearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2YearBuiltAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2YearBuiltAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3YearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3YearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3YearBuiltAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3YearBuiltAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectAge(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectAge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1Age(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2Age(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3Age(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1Age(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2Age(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3Age(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectAcres(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectAcres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1Acres(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Acres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1AcresAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1AcresAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2Acres(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Acres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2AcresAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2AcresAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3Acres(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Acres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3AcresAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3AcresAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1Acres(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Acres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1AcresAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1AcresAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2Acres(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Acres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2AcresAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2AcresAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3Acres(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Acres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3AcresAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3AcresAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectSquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectSquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1SquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1SquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2SquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2SquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3SquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3SquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1SquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1SquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2SquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2SquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3SquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3SquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectGarage(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectGarage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1Garage(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Garage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1GarageAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1GarageAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2Garage(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Garage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2GarageAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2GarageAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3Garage(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Garage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3GarageAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3GarageAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1Garage(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Garage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1GarageAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1GarageAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2Garage(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Garage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2GarageAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2GarageAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3Garage(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Garage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3GarageAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3GarageAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectPool(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectPool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1Pool(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1PoolAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1PoolAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2Pool(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2PoolAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2PoolAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3Pool(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3PoolAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3PoolAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1Pool(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1PoolAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1PoolAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2Pool(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2PoolAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2PoolAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3Pool(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3PoolAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3PoolAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectPorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectPorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1PorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1PorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1PorchPatioDeckAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1PorchPatioDeckAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2PorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2PorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2PorchPatioDeckAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2PorchPatioDeckAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3PorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3PorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3PorchPatioDeckAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3PorchPatioDeckAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1PorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1PorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1PorchPatioDeckAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1PorchPatioDeckAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2PorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2PorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2PorchPatioDeckAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2PorchPatioDeckAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3PorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3PorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3PorchPatioDeckAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3PorchPatioDeckAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectFireplace(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectFireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1Fireplace(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Fireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1FireplaceAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1FireplaceAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2Fireplace(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Fireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2FireplaceAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2FireplaceAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3Fireplace(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Fireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3FireplaceAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3FireplaceAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1Fireplace(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Fireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1FireplaceAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1FireplaceAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2Fireplace(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Fireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2FireplaceAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2FireplaceAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3Fireplace(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Fireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3FireplaceAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3FireplaceAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectBasement(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectBasement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1Basement(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Basement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1BasementAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1BasementAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2Basement(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Basement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2BasementAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2BasementAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3Basement(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Basement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3BasementAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3BasementAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1Basement(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Basement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1BasementAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1BasementAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2Basement(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Basement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2BasementAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2BasementAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3Basement(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Basement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3BasementAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3BasementAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectIsFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectIsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1IsFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1IsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1IsFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1IsFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2IsFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2IsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2IsFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2IsFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3IsFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3IsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3IsFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3IsFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1IsFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1IsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1IsFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1IsFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2IsFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2IsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2IsFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2IsFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3IsFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3IsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3IsFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3IsFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectPercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectPercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1PercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1PercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1PercentFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1PercentFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2PercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2PercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2PercentFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2PercentFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3PercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3PercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3PercentFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3PercentFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1PercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1PercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1PercentFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1PercentFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2PercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2PercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2PercentFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2PercentFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3PercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3PercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3PercentFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3PercentFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectBasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectBasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1BasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1BasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1BasementSqFtAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1BasementSqFtAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2BasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2BasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2BasementSqFtAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2BasementSqFtAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3BasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3BasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3BasementSqFtAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3BasementSqFtAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1BasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1BasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1BasementSqFtAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1BasementSqFtAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2BasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2BasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2BasementSqFtAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2BasementSqFtAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3BasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3BasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3BasementSqFtAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3BasementSqFtAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectOriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectOriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1OriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1OriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2OriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2OriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3OriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3OriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1OriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1OriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2OriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2OriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3OriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3OriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectCurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectCurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1CurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1CurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2CurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2CurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3CurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3CurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1CurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1CurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2CurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2CurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3CurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3CurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectOriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectOriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1OriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1OriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2OriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2OriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3OriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3OriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1OriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1OriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2OriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2OriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3OriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3OriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1ListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1ListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2ListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2ListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3ListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3ListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1ListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1ListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2ListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2ListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3ListPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3ListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectSalePrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectSalePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1SalePrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1SalePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2SalePrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2SalePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3SalePrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3SalePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectSaleDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectSaleDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1SaleDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1SaleDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2SaleDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2SaleDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3SaleDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3SaleDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSubjectFinancing(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectFinancing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1Financing(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Financing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2Financing(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Financing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3Financing(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Financing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1Financing(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Financing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2Financing(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Financing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3Financing(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Financing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectDOM(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectDom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1DOM(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1dom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2DOM(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2dom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3DOM(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3dom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1DOM(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1dom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2DOM(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2dom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3DOM(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3dom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectPricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectPricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1PricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1PricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2PricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2PricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3PricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3PricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1PricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1PricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2PricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2PricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3PricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3PricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1Adjustments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Adjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2Adjustments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Adjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3Adjustments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Adjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1Adjustments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Adjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2Adjustments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Adjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3Adjustments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Adjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectCompTotals(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectCompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1CompTotals(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1CompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2CompTotals(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2CompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3CompTotals(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3CompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1CompTotals(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1CompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2CompTotals(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2CompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3CompTotals(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3CompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp1CommentType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1CommentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1ComparableComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1ComparableComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1FormatAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1FormatAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp1MLSComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1MLSComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp2CommentType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2CommentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2ComparableComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2ComparableComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2FormatAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2FormatAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp2MLSComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2MLSComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListComp3CommentType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3CommentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3ComparableComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3ComparableComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3FormatAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3FormatAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListComp3MLSComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3MLSComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp1CommentType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1CommentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1ComparableComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1ComparableComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1FormatAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1FormatAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp1MLSComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1MLSComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp2CommentType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2CommentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2ComparableComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2ComparableComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2FormatAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2FormatAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp2MLSComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2MLSComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSaleComp3CommentType(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3CommentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3ComparableComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3ComparableComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3FormatAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3FormatAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSaleComp3MLSComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3MLSComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbNeighborhoodTrend(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbNeighborhoodTrend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtMonthlyPecent(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtMonthlyPecent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtEstimatedRent(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtEstimatedRent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtEstimatedDaysOnMarket(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtEstimatedDaysOnMarket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNoBoarded(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoBoarded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNoOfActive(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txt6MonthPecent(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt6MonthPecent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtAnnualPecent(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtAnnualPecent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListings(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbSupply(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSupply, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListingsMinValue(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsMinValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListingsRange1(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsRange1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListingsMedValue(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsMedValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListingsMaxValue(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsMaxValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListingsRange2(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsRange2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListingsDOM(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsDom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListingsDOMRange1(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsDOMRange1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListingsDOMRange2(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsDOMRange2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbREOTrend(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbREOTrend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNoOfFM(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfFm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNoOfSS(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfSs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNoOfREO(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfReo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNoOfDistressed(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfDistressed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSales(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSales, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbDemand(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbDemand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSalesRange1(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSalesRange1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSalesMedValue(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSalesMedValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSalesRange2(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSalesRange2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSalesDOM(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSalesDom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSalesDOMRange1(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSalesDOMRange1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSalesDOMRange2(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSalesDOMRange2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtZillowNeighborhoodTrend(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtZillowNeighborhoodTrend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNeighborhoodTrendComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNeighborhoodTrendComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtTotalListings(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtTotalListings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtTotalSales(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtTotalSales, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNoOfREOListings(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfREOListings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNoOfSSListings(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfSSListings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNoOfREOSales(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfREOSales, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNoOfSSSales(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfSSSales, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtTaxID(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtTaxID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtLastSaleDate(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtLastSaleDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtLastSalePrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtLastSalePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbIsListed(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbIsListed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtOwnerOccupied(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtOwnerOccupied, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtRenterOccupied(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtRenterOccupied, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtMarketRent(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtMarketRent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNoOfRentals(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfRentals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtTypicalDOM(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtTypicalDom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNoRentHomes(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoRentHomes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtTypicalRentalRates(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtTypicalRentalRates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_adjustmentPrice(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdjustmentPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedGLA(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedGla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedAge(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedAge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedSaleDates(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedSaleDates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedProximity(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedProximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedStyle(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedMonthsSupply(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedMonthsSupply, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedProxim(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedProxim, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedGLAs(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedGLAs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedAges(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedAges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedCond(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedCond, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedView(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedView, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedStyle1(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedStyle1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedLots(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedLots, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedBeds(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedBeds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtCalculatedBath(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedBath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_rdbresaletext(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rdbresaletext, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_rdbmarketedtext(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rdbmarketedtext, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtpmi(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtpmi, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtOtherComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtOtherComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtcbnew(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbnew, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtcbold(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtcbstyle(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbstyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtcblot(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcblot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtcbview(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtcbdamage(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbdamage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtcbupgrade(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbupgrade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtcbinfluence(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbinfluence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtSubjectComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNeighborhoodComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNeighborhoodComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtNeighborhoodTrend(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNeighborhoodTrend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtValidation1(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtValidation1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtUniqueComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtUniqueComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtMarketingStrategy(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtMarketingStrategy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtDisclaimer2(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtDisclaimer2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtBrokerComments(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtBrokerComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtValidation(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtValidation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txt30DayQuickSale(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt30DayQuickSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txt60DayQuickSale(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt60DayQuickSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txt90DayAsIsValue(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt90DayAsIsValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txt120DayQuickSale(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt120DayQuickSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txt180DayQuickSale(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt180DayQuickSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListPriceFinalValues(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListPriceFinalValues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txt30DayListPriceFinalValues(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt30DayListPriceFinalValues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txt30DayQuickSaleRepaired(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt30DayQuickSaleRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txt60DayQuickSaleRepaired(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt60DayQuickSaleRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txt90DayAsIsValueRepaired(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt90DayAsIsValueRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txt120DayQuickSaleRepaired(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt120DayQuickSaleRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txt180DayQuickSaleRepaired(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt180DayQuickSaleRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtListPriceRepaired(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListPriceRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txt30DayListPriceRepaired(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt30DayListPriceRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbHouse(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbHouse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbPositive(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbPositive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbNegative(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbNegative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbView(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbView, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbMarket(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbMarket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbPricing(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbPricing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbListing(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_cmbExtra(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbExtra, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_txtUnique(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtUnique, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_priceComment(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceComment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_rangeComment(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RangeComment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_proxException(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProxException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_glaException(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GlaException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_ageException(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgeException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_condException(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CondException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_viewException(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_styleException(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StyleException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_lotException(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LotException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_bedException(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BedException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_bathException(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BathException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Iform_history(ctx context.Context, field graphql.CollectedField, obj *models.Iform) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Iform",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.History, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.IformHistory)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIformHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformHistory(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_id(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_address(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_age(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_basementFinishedSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BasementFinishedSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_basementSquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BasementSquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_basementType(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BasementType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_bathrooms(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bathrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_bedrooms(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_carport(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Carport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_city(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_construction(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Construction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_daysOnMarket(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DaysOnMarket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_exterior(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Exterior, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_exteriorFeatures(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorFeatures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_fireplace(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_fullBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_garage(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Garage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_garageDescription(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GarageDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_halfBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_hOAFee(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_listDate(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_listPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_lotSize(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LotSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_mlsNumber(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MlsNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_mlsComments(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MlsComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_originalListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_originalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_parkingSpacesCarport(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParkingSpacesCarport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_parkingSpacesGarage(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParkingSpacesGarage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_pool(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_porch(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Porch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_priceClosed(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceClosed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_priceList(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_propertyStyle(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PropertyStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_proplmg(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Proplmg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_proximity(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Proximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_realEstateOwned(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RealEstateOwned, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_saleDate(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SaleDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_salePrice(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_saleType(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_selType(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_shortSale(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_squareFootage(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SquareFootage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_status(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_streetDirection(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetDirection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_streetName(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_streetNumber(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_streetType(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_subdivision(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_termsOfSale(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TermsOfSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_totalRooms(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_totalUnits(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalUnits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_unitNumber(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_view(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_waterfront(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Waterfront, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_yearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGrid_zip(ctx context.Context, field graphql.CollectedField, obj *models.IformGrid) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGrid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGridResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.IformGridResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGridResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _IformGridResult_results(ctx context.Context, field graphql.CollectedField, obj *models.IformGridResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformGridResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.IformGrid)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIformGrid2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformGrid(ctx, field.Selections, res)
}

func (ec *executionContext) _IformHistory_createdDate(ctx context.Context, field graphql.CollectedField, obj *models.IformHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformHistory_updatedDate(ctx context.Context, field graphql.CollectedField, obj *models.IformHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformHistory_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.IformHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformHistory_url(ctx context.Context, field graphql.CollectedField, obj *models.IformHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_id(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_formType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_pipelineId(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtClient(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtClient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCompany(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtOrderNumber(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtOrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbOrderType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbOrderType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtAddress(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtLocation(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtBrokerChecker(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtBrokerChecker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtPreparerInfoAgent(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtPreparerInfoAgentLicense(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoAgentLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtPreparerInfoBroker(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoBroker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtPreparerInfoBrokerLicense(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoBrokerLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtPreparerInfoAddress(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtPreparerInfoBrokerage(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoBrokerage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtPreparerInfoAgentCompany(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoAgentCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtPreparerInfoPhone(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtPreparerInfoYearsOfExperience(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoYearsOfExperience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtPreparerInfoEmail(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectAddress(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtPreparerInfoMilesAwayFromSubject(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtPreparerInfoMilesAwayFromSubject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtAgentZip(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtAgentZip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtAgentCity(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtAgentCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtAgentState(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtAgentState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtDisclaimer(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtDisclaimer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbLocation(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCounty(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCounty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtTrullia(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtTrullia, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtZillow(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtZillow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtFindcompsnow(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtFindcompsnow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtAverage(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtAverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbForm(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbForm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbForm2(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbForm2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1Address(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2Address(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3Address(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1Address(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2Address(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3Address(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectState(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1State(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2State(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3State(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1State(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2State(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3State(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectCity(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1City(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2City(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3City(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1City(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2City(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3City(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectnoUnit(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectnoUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectUnitNo(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectUnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1noUnit(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1noUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1UnitNo(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1UnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2noUnit(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2noUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2UnitNo(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2UnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3noUnit(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3noUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3UnitNo(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3UnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1noUnit(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1noUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1UnitNo(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1UnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2noUnit(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2noUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2UnitNo(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2UnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3noUnit(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3noUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3UnitNo(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3UnitNo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectUnits(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectUnits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1Units(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2Units(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3Units(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1Units(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2Units(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3Units(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectZip(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectZip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1Zip(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2Zip(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3Zip(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1Zip(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2Zip(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3Zip(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectProximity(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectProximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1Proximity(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Proximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2Proximity(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Proximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3Proximity(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Proximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1Proximity(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Proximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2Proximity(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Proximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3Proximity(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Proximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectDataSource(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectDataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1DataSource(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1DataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2DataSource(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2DataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3DataSource(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3DataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1DataSource(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1DataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2DataSource(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2DataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3DataSource(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3DataSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectMLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectMLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1MLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1MLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2MLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2MLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3MLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3MLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1MLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1MLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2MLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2MLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3MLSNumber(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3MLSNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectSaleType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectSaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1SaleType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1SaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2SaleType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2SaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3SaleType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3SaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1SaleType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1SaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2SaleType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2SaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3SaleType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3SaleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1Type(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2Type(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3Type(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1Type(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2Type(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3Type(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectStyle(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1Style(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Style, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1StyleAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1StyleAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2Style(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Style, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2StyleAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2StyleAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3Style(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Style, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3StyleAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3StyleAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1Style(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Style, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1StyleAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1StyleAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2Style(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Style, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2StyleAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2StyleAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3Style(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Style, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3StyleAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3StyleAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1ExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1ExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1ExtFinishAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1ExtFinishAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2ExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2ExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2ExtFinishAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2ExtFinishAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3ExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3ExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3ExtFinishAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3ExtFinishAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1ExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1ExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1ExtFinishAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1ExtFinishAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2ExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2ExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2ExtFinishAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2ExtFinishAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3ExtFinish(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3ExtFinish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3ExtFinishAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3ExtFinishAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectCondition(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectCondition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1Condition(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1ConditionAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1ConditionAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2Condition(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2ConditionAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2ConditionAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3Condition(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3ConditionAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3ConditionAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1Condition(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1ConditionAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1ConditionAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2Condition(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2ConditionAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2ConditionAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3Condition(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3ConditionAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3ConditionAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectQuality(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectQuality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1Quality(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Quality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1QualityAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1QualityAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2Quality(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Quality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2QualityAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2QualityAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3Quality(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Quality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3QualityAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3QualityAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1Quality(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Quality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1QualityAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1QualityAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2Quality(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Quality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2QualityAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2QualityAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3Quality(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Quality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3QualityAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3QualityAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectView(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectView, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1View(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1ViewAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1ViewAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2View(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2ViewAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2ViewAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3View(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3ViewAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3ViewAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1View(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1ViewAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1ViewAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2View(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2ViewAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2ViewAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3View(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3ViewAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3ViewAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectSubdivision(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectSubdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1Subdivision(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Subdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2Subdivision(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Subdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3Subdivision(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Subdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1Subdivision(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Subdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2Subdivision(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Subdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3Subdivision(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Subdivision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectHOAFee(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectHOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1HOAFee(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1HOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2HOAFee(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2HOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3HOAFee(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3HOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1HOAFee(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1HOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2HOAFee(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2HOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3HOAFee(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3HOAFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectTotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectTotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1TotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1TotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1TotalRoomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1TotalRoomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2TotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2TotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2TotalRoomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2TotalRoomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3TotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3TotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3TotalRoomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3TotalRoomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1TotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1TotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1TotalRoomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1TotalRoomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2TotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2TotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2TotalRoomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2TotalRoomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3TotalRooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3TotalRooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3TotalRoomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3TotalRoomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectBedrooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectBedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1Bedrooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Bedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1BedroomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1BedroomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2Bedrooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Bedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2BedroomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2BedroomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3Bedrooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Bedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3BedroomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3BedroomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1Bedrooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Bedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1BedroomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1BedroomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2Bedrooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Bedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2BedroomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2BedroomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3Bedrooms(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Bedrooms, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3BedroomsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3BedroomsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectFullBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectFullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1FullBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1FullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1FullBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1FullBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2FullBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2FullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2FullBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2FullBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3FullBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3FullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3FullBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3FullBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1FullBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1FullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1FullBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1FullBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2FullBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2FullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2FullBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2FullBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3FullBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3FullBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3FullBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3FullBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectHalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectHalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1HalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1HalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1HalfBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1HalfBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2HalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2HalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2HalfBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2HalfBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3HalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3HalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3HalfBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3HalfBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1HalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1HalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1HalfBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1HalfBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2HalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2HalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2HalfBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2HalfBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3HalfBaths(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3HalfBaths, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3HalfBathsAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3HalfBathsAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectGLA(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectGla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1GLA(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1gla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1GLAAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1GLAAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2GLA(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2gla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2GLAAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2GLAAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3GLA(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3gla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3GLAAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3GLAAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1GLA(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1gla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1GLAAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1GLAAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2GLA(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2gla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2GLAAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2GLAAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3GLA(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3gla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3GLAAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3GLAAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectYearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectYearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1YearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1YearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1YearBuiltAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1YearBuiltAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2YearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2YearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2YearBuiltAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2YearBuiltAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3YearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3YearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3YearBuiltAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3YearBuiltAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1YearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1YearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1YearBuiltAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1YearBuiltAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2YearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2YearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2YearBuiltAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2YearBuiltAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3YearBuilt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3YearBuilt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3YearBuiltAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3YearBuiltAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectAge(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectAge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1Age(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2Age(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3Age(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1Age(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2Age(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3Age(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectAcres(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectAcres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1Acres(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Acres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1AcresAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1AcresAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2Acres(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Acres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2AcresAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2AcresAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3Acres(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Acres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3AcresAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3AcresAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1Acres(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Acres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1AcresAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1AcresAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2Acres(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Acres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2AcresAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2AcresAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3Acres(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Acres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3AcresAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3AcresAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectSquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectSquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1SquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1SquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2SquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2SquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3SquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3SquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1SquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1SquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2SquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2SquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3SquareFeet(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3SquareFeet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectGarage(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectGarage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1Garage(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Garage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1GarageAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1GarageAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2Garage(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Garage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2GarageAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2GarageAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3Garage(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Garage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3GarageAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3GarageAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1Garage(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Garage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1GarageAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1GarageAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2Garage(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Garage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2GarageAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2GarageAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3Garage(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Garage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3GarageAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3GarageAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectPool(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectPool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1Pool(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1PoolAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1PoolAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2Pool(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2PoolAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2PoolAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3Pool(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3PoolAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3PoolAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1Pool(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1PoolAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1PoolAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2Pool(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2PoolAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2PoolAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3Pool(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Pool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3PoolAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3PoolAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectPorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectPorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1PorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1PorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1PorchPatioDeckAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1PorchPatioDeckAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2PorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2PorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2PorchPatioDeckAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2PorchPatioDeckAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3PorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3PorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3PorchPatioDeckAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3PorchPatioDeckAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1PorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1PorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1PorchPatioDeckAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1PorchPatioDeckAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2PorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2PorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2PorchPatioDeckAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2PorchPatioDeckAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3PorchPatioDeck(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3PorchPatioDeck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3PorchPatioDeckAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3PorchPatioDeckAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectFireplace(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectFireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1Fireplace(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Fireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1FireplaceAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1FireplaceAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2Fireplace(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Fireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2FireplaceAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2FireplaceAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3Fireplace(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Fireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3FireplaceAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3FireplaceAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1Fireplace(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Fireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1FireplaceAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1FireplaceAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2Fireplace(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Fireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2FireplaceAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2FireplaceAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3Fireplace(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Fireplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3FireplaceAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3FireplaceAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectBasement(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectBasement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1Basement(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Basement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1BasementAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1BasementAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2Basement(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Basement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2BasementAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2BasementAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3Basement(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Basement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3BasementAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3BasementAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1Basement(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Basement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1BasementAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1BasementAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2Basement(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Basement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2BasementAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2BasementAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3Basement(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Basement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3BasementAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3BasementAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectIsFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectIsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1IsFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1IsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1IsFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1IsFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2IsFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2IsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2IsFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2IsFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3IsFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3IsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3IsFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3IsFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1IsFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1IsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1IsFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1IsFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2IsFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2IsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2IsFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2IsFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3IsFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3IsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3IsFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3IsFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectPercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectPercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1PercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1PercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1PercentFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1PercentFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2PercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2PercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2PercentFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2PercentFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3PercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3PercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3PercentFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3PercentFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1PercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1PercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1PercentFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1PercentFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2PercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2PercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2PercentFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2PercentFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3PercentFinished(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3PercentFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3PercentFinishedAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3PercentFinishedAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectBasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectBasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1BasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1BasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1BasementSqFtAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1BasementSqFtAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2BasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2BasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2BasementSqFtAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2BasementSqFtAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3BasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3BasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3BasementSqFtAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3BasementSqFtAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1BasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1BasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1BasementSqFtAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1BasementSqFtAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2BasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2BasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2BasementSqFtAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2BasementSqFtAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3BasementSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3BasementSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3BasementSqFtAdjBuiltIn(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3BasementSqFtAdjBuiltIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectOriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectOriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1OriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1OriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2OriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2OriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3OriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3OriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1OriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1OriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2OriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2OriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3OriginalListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3OriginalListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectCurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectCurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1CurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1CurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2CurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2CurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3CurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3CurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1CurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1CurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2CurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2CurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3CurrentListDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3CurrentListDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectOriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectOriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1OriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1OriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2OriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2OriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3OriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3OriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1OriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1OriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2OriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2OriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3OriginalListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3OriginalListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1ListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1ListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2ListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2ListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3ListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3ListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1ListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1ListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2ListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2ListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3ListPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3ListPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectSalePrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectSalePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1SalePrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1SalePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2SalePrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2SalePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3SalePrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3SalePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectSaleDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectSaleDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1SaleDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1SaleDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2SaleDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2SaleDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3SaleDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3SaleDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSubjectFinancing(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSubjectFinancing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1Financing(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1Financing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2Financing(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2Financing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3Financing(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3Financing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1Financing(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1Financing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2Financing(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2Financing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3Financing(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3Financing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectDOM(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectDom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1DOM(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1dom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2DOM(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2dom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3DOM(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3dom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1DOM(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1dom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2DOM(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2dom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3DOM(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3dom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectPricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectPricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1PricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1PricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2PricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2PricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3PricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3PricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1PricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1PricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2PricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2PricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3PricePerSqFt(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3PricePerSqFt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1Adjustments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1Adjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2Adjustments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2Adjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3Adjustments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3Adjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1Adjustments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1Adjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2Adjustments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2Adjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3Adjustments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3Adjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectCompTotals(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectCompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1CompTotals(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1CompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2CompTotals(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2CompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3CompTotals(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3CompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1CompTotals(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1CompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2CompTotals(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2CompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3CompTotals(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3CompTotals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp1CommentType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp1CommentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1ComparableComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1ComparableComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1FormatAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1FormatAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp1MLSComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp1MLSComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp2CommentType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp2CommentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2ComparableComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2ComparableComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2FormatAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2FormatAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp2MLSComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp2MLSComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListComp3CommentType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListComp3CommentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3ComparableComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3ComparableComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3FormatAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3FormatAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListComp3MLSComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListComp3MLSComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp1CommentType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp1CommentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1ComparableComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1ComparableComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1FormatAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1FormatAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp1MLSComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp1MLSComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp2CommentType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp2CommentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2ComparableComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2ComparableComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2FormatAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2FormatAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp2MLSComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp2MLSComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSaleComp3CommentType(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSaleComp3CommentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3ComparableComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3ComparableComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3FormatAdjustments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3FormatAdjustments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSaleComp3MLSComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSaleComp3MLSComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbNeighborhoodTrend(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbNeighborhoodTrend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtMonthlyPecent(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtMonthlyPecent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtEstimatedRent(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtEstimatedRent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtEstimatedDaysOnMarket(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtEstimatedDaysOnMarket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNoBoarded(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoBoarded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNoOfActive(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txt6MonthPecent(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt6MonthPecent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtAnnualPecent(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtAnnualPecent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListings(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbSupply(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbSupply, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListingsMinValue(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsMinValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListingsRange1(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsRange1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListingsMedValue(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsMedValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListingsMaxValue(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsMaxValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListingsRange2(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsRange2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListingsDOM(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsDom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListingsDOMRange1(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsDOMRange1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListingsDOMRange2(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListingsDOMRange2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbREOTrend(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbREOTrend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNoOfFM(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfFm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNoOfSS(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfSs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNoOfREO(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfReo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNoOfDistressed(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfDistressed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSales(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSales, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbDemand(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbDemand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSalesRange1(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSalesRange1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSalesMedValue(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSalesMedValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSalesRange2(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSalesRange2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSalesDOM(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSalesDom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSalesDOMRange1(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSalesDOMRange1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSalesDOMRange2(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSalesDOMRange2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtZillowNeighborhoodTrend(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtZillowNeighborhoodTrend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNeighborhoodTrendComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNeighborhoodTrendComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtTotalListings(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtTotalListings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtTotalSales(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtTotalSales, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNoOfREOListings(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfREOListings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNoOfSSListings(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfSSListings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNoOfREOSales(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfREOSales, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNoOfSSSales(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfSSSales, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtTaxID(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtTaxID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtLastSaleDate(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtLastSaleDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtLastSalePrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtLastSalePrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbIsListed(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbIsListed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtOwnerOccupied(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtOwnerOccupied, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtRenterOccupied(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtRenterOccupied, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtMarketRent(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtMarketRent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNoOfRentals(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoOfRentals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtTypicalDOM(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtTypicalDom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNoRentHomes(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNoRentHomes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtTypicalRentalRates(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtTypicalRentalRates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_adjustmentPrice(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdjustmentPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedGLA(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedGla, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedAge(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedAge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedSaleDates(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedSaleDates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedProximity(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedProximity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedStyle(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedStyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedMonthsSupply(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedMonthsSupply, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedProxim(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedProxim, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedGLAs(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedGLAs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedAges(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedAges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedCond(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedCond, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedView(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedView, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedStyle1(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedStyle1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedLots(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedLots, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedBeds(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedBeds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtCalculatedBath(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtCalculatedBath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_rdbresaletext(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rdbresaletext, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_rdbmarketedtext(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rdbmarketedtext, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtpmi(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtpmi, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtOtherComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtOtherComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtcbnew(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbnew, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtcbold(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtcbstyle(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbstyle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtcblot(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcblot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtcbview(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtcbdamage(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbdamage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtcbupgrade(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbupgrade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtcbinfluence(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txtcbinfluence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtSubjectComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtSubjectComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNeighborhoodComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNeighborhoodComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtNeighborhoodTrend(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtNeighborhoodTrend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtValidation1(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtValidation1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtUniqueComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtUniqueComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtMarketingStrategy(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtMarketingStrategy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtDisclaimer2(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtDisclaimer2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtBrokerComments(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtBrokerComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtValidation(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtValidation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txt30DayQuickSale(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt30DayQuickSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txt60DayQuickSale(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt60DayQuickSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txt90DayAsIsValue(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt90DayAsIsValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txt120DayQuickSale(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt120DayQuickSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txt180DayQuickSale(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt180DayQuickSale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListPriceFinalValues(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListPriceFinalValues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txt30DayListPriceFinalValues(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt30DayListPriceFinalValues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txt30DayQuickSaleRepaired(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt30DayQuickSaleRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txt60DayQuickSaleRepaired(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt60DayQuickSaleRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txt90DayAsIsValueRepaired(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt90DayAsIsValueRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txt120DayQuickSaleRepaired(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt120DayQuickSaleRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txt180DayQuickSaleRepaired(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt180DayQuickSaleRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtListPriceRepaired(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtListPriceRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txt30DayListPriceRepaired(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txt30DayListPriceRepaired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbHouse(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbHouse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbPositive(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbPositive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbNegative(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbNegative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbView(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbView, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbMarket(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbMarket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbPricing(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbPricing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbListing(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbListing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_cmbExtra(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CmbExtra, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_txtUnique(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxtUnique, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_priceComment(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceComment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_rangeComment(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RangeComment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_proxException(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProxException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_glaException(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GlaException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_ageException(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgeException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_condException(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CondException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_viewException(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_styleException(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StyleException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_lotException(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LotException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_bedException(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BedException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_bathException(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BathException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IformTemp_history(ctx context.Context, field graphql.CollectedField, obj *models.IformTemp) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "IformTemp",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.History, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.IformHistory)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOIformHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformHistory(ctx, field.Selections, res)
}

func (ec *executionContext) _Instruction_id(ctx context.Context, field graphql.CollectedField, obj *models.Instruction) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Instruction",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Instruction_tag(ctx context.Context, field graphql.CollectedField, obj *models.Instruction) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Instruction",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Instruction_client(ctx context.Context, field graphql.CollectedField, obj *models.Instruction) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Instruction",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Client, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Instruction_clientId(ctx context.Context, field graphql.CollectedField, obj *models.Instruction) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Instruction",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Instruction_company(ctx context.Context, field graphql.CollectedField, obj *models.Instruction) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Instruction",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Instruction_companyId(ctx context.Context, field graphql.CollectedField, obj *models.Instruction) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Instruction",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Instruction_url(ctx context.Context, field graphql.CollectedField, obj *models.Instruction) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Instruction",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Instruction_fileName(ctx context.Context, field graphql.CollectedField, obj *models.Instruction) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Instruction",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Instruction_comment(ctx context.Context, field graphql.CollectedField, obj *models.Instruction) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Instruction",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Instruction_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.Instruction) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Instruction",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InstructionResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.InstructionResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InstructionResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _InstructionResult_results(ctx context.Context, field graphql.CollectedField, obj *models.InstructionResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InstructionResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Instruction)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInstruction2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInstruction(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_id(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_type(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_name(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_employeeId(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmployeeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_date(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_orderNumber(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_address(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_company(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_client(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Client, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_orderType(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_isSuperRush(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuperRush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_superRushRemarks(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperRushRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_isRush(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_rushRemarks(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RushRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_isInterior(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInterior, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_interiorRemarks(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_isRentalAddendum(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRentalAddendum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_RentalAddendumRemarks(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RentalAddendumRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_isInitialBpo(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInitialBpo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_initialBpoRemarks(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialBpoRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_isInspection(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInspection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_inspectionRemarks(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InspectionRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_isNoCsv(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNoCsv, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_noCsvRemarks(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoCsvRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_isNoIFill(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNoIFill, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_noIFillRemarks(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoIFillRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_isOtherPremium(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOtherPremium, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_otherPremiumRemarks(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherPremiumRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_qcType(ctx context.Context, field graphql.CollectedField, obj *models.Invoice) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QcType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InvoiceRequestHistory_id(ctx context.Context, field graphql.CollectedField, obj *models.InvoiceRequestHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InvoiceRequestHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InvoiceRequestHistory_dateRequested(ctx context.Context, field graphql.CollectedField, obj *models.InvoiceRequestHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InvoiceRequestHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateRequested, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InvoiceRequestHistory_orderNumber(ctx context.Context, field graphql.CollectedField, obj *models.InvoiceRequestHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InvoiceRequestHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InvoiceRequestHistory_address(ctx context.Context, field graphql.CollectedField, obj *models.InvoiceRequestHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InvoiceRequestHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InvoiceRequestHistory_company(ctx context.Context, field graphql.CollectedField, obj *models.InvoiceRequestHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InvoiceRequestHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InvoiceRequestHistory_remarks(ctx context.Context, field graphql.CollectedField, obj *models.InvoiceRequestHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InvoiceRequestHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InvoiceRequestHistory_status(ctx context.Context, field graphql.CollectedField, obj *models.InvoiceRequestHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InvoiceRequestHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InvoiceRequestHistoryResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.InvoiceRequestHistoryResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InvoiceRequestHistoryResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _InvoiceRequestHistoryResult_results(ctx context.Context, field graphql.CollectedField, obj *models.InvoiceRequestHistoryResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InvoiceRequestHistoryResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.InvoiceRequestHistory)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInvoiceRequestHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestHistory(ctx, field.Selections, res)
}

func (ec *executionContext) _InvoiceRequestResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.InvoiceRequestResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InvoiceRequestResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _InvoiceRequestResult_results(ctx context.Context, field graphql.CollectedField, obj *models.InvoiceRequestResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "InvoiceRequestResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Invoice)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInvoice2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) _Log_datetime(ctx context.Context, field graphql.CollectedField, obj *models.Log) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Log",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Datetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Log_action(ctx context.Context, field graphql.CollectedField, obj *models.Log) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Log",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Log_value(ctx context.Context, field graphql.CollectedField, obj *models.Log) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Log",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Log_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.Log) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Log",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginLog_username(ctx context.Context, field graphql.CollectedField, obj *models.LoginLog) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "LoginLog",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginLog_datetime(ctx context.Context, field graphql.CollectedField, obj *models.LoginLog) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "LoginLog",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Datetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginLog_ipAddress(ctx context.Context, field graphql.CollectedField, obj *models.LoginLog) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "LoginLog",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginLogResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.LoginLogResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "LoginLogResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LoginLogResult_results(ctx context.Context, field graphql.CollectedField, obj *models.LoginLogResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "LoginLogResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.LoginLog)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOLoginLog2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLoginLog(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_login_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx, args["email"].(string), args["password"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Token)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNToken2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐToken(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_registerUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_registerUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterUser(rctx, args["input"].(models.RegisterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_forgetPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_forgetPassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ForgetPassword(rctx, args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resetPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resetPassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResetPassword(rctx, args["token"].(string), args["newPassword"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateProfile_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProfile(rctx, args["input"].(models.ProfileInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveProfileDoc(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveProfileDoc_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveProfileDoc(rctx, args["input"].(models.ProfileDocInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteProfileDoc(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteProfileDoc_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProfileDoc(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveAccount(rctx, args["input"].(models.AccountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAccount(rctx, args["id"].(string), args["input"].(models.AccountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAccount(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAdjustment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAdjustment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAdjustment(rctx, args["id"].(string), args["value"].(float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setAdjustmentDefault(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetAdjustmentDefault(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveComment(rctx, args["input"].(models.CommentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateComment(rctx, args["id"].(string), args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteComment(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setCommentDefault(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetCommentDefault(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDefault(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDefault_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDefault(rctx, args["input"].(models.DefaultInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_savePipeline(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_savePipeline_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SavePipeline(rctx, args["input"].(models.PipelineInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePipeline(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePipeline_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePipeline(rctx, args["id"].(string), args["input"].(models.UpdatePipelineInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_savePipelineQualityControl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_savePipelineQualityControl_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SavePipelineQualityControl(rctx, args["pipelineId"].(string), args["message"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_savePipelineDoc(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_savePipelineDoc_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SavePipelineDoc(rctx, args["pipelineId"].(string), args["input"].(models.PipelineDocInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePipelineDoc(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePipelineDoc_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePipelineDoc(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_savePipelinePhoto(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_savePipelinePhoto_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SavePipelinePhoto(rctx, args["pipelineId"].(string), args["input"].(models.PipelinePhotoInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePipelinePhoto(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePipelinePhoto_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePipelinePhoto(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitPipelinePhoto(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_submitPipelinePhoto_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitPipelinePhoto(rctx, args["id"].(string), args["IsSubmitPipelinePhoto"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_savePipelineNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_savePipelineNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SavePipelineNote(rctx, args["pipelineId"].(string), args["input"].(models.SavePipelineNoteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveCredit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveCredit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveCredit(rctx, args["input"].(models.SaveCreditInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addCreditLedger(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addCreditLedger_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddCreditLedger(rctx, args["input"].(models.AddCreditLedgerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveCompany(rctx, args["input"].(models.CompanyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCompany(rctx, args["id"].(string), args["input"].(models.CompanyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCompany(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveUser(rctx, args["input"].(models.SaveUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePipelineState(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePipelineState_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePipelineState(rctx, args["input"].(models.UpdatePipelineStateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveEmailTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveEmailTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveEmailTemplate(rctx, args["input"].(models.SaveEmailTemplateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateEmailTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateEmailTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEmailTemplate(rctx, args["id"].(string), args["input"].(models.UpdateEmailTemplateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteEmailTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteEmailTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEmailTemplate(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveHeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveHeader_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveHeader(rctx, args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveHeaderDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveHeaderDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveHeaderDetail(rctx, args["parentId"].(string), args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateHeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateHeader_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateHeader(rctx, args["id"].(string), args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteHeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteHeader_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteHeader(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveInstruction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveInstruction_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveInstruction(rctx, args["input"].(models.SaveInstructionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteInstruction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteInstruction_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteInstruction(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveQualityControl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveQualityControl_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveQualityControl(rctx, args["pipelineID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateQualityControl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateQualityControl_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateQualityControl(rctx, args["id"].(string), args["input"].(models.UpdateQualityControlInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePipelineNeighborhood(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePipelineNeighborhood_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePipelineNeighborhood(rctx, args["pipelineId"].(string), args["input"].(models.UpdatePipelineNeighborhoodInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveReview_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveReview(rctx, args["input"].(models.SaveReviewInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateReview_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateReview(rctx, args["id"].(string), args["input"].(models.UpdateReviewInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteReview_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteReview(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRequest(rctx, args["id"].(string), args["input"].(models.UpdateRequestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveRequest(rctx, args["pipelineId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_savePipelineQualityControlAndNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_savePipelineQualityControlAndNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SavePipelineQualityControlAndNote(rctx, args["pipelineId"].(string), args["input"].(models.SavePipelineQualityControlAndNoteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveInvoice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveInvoice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveInvoice(rctx, args["input"].(models.SaveInvoiceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateInvoice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateInvoice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateInvoice(rctx, args["id"].(string), args["input"].(models.UpdateInvoiceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_cancelInvoice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_cancelInvoice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CancelInvoice(rctx, args["id"].(string), args["reason"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIform(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIform_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIform(rctx, args["pipelineId"].(string), args["input"].(models.UpdateIformInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateIformTemp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateIformTemp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateIformTemp(rctx, args["pipelineId"].(string), args["input"].(models.UpdateIformTempInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePipelineRepair(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePipelineRepair_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePipelineRepair(rctx, args["pipelineId"].(string), args["input"].(models.UpdatePipelineRepairInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, args["id"].(string), args["input"].(models.UpdateUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveAnnouncement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveAnnouncement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveAnnouncement(rctx, args["input"].(models.AnnouncementInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAnnouncement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAnnouncement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAnnouncement(rctx, args["id"].(string), args["input"].(models.AnnouncementInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAnnouncement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAnnouncement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAnnouncement(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveSession_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveSession(rctx, args["userId"].(string), args["invoiceDate"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_stopSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_stopSession_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StopSession(rctx, args["userId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateSession_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSession(rctx, args["id"].(string), args["input"].(models.UpdateSessionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_savePermissionGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_savePermissionGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SavePermissionGroup(rctx, args["input"].(models.PermissionGroupInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePermissionGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePermissionGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePermissionGroup(rctx, args["id"].(string), args["input"].(models.PermissionGroupInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePermissionGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePermissionGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePermissionGroup(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_savePipelineComparable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_savePipelineComparable_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SavePipelineComparable(rctx, args["pipelineId"].(string), args["input"].(models.SavePipelineComparableInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePipelineComparable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePipelineComparable_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePipelineComparable(rctx, args["id"].(string), args["mls"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePipelineComparable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePipelineComparable_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePipelineComparable(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveBilling(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveBilling_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveBilling(rctx, args["input"].(models.SaveBillingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateBilling(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateBilling_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBilling(rctx, args["id"].(string), args["input"].(models.UpdateBillingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteBilling(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteBilling_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBilling(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_saveIformGrid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_saveIformGrid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveIformGrid(rctx, args["pipelineId"].(string), args["input"].(models.SaveIformGridInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteIformGrid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteIformGrid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteIformGrid(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_verifyPaypalTransaction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_verifyPaypalTransaction_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VerifyPaypalTransaction(rctx, args["paypalOrderId"].(string), args["billingId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createBillingExcel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createBillingExcel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBillingExcel(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateQcRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateQcRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateQcRequest(rctx, args["id"].(string), args["input"].(models.UpdateQcRequestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_continueSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_continueSession_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContinueSession(rctx, args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderAnalytics_client(ctx context.Context, field graphql.CollectedField, obj *models.OrderAnalytics) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrderAnalytics",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Client, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderAnalytics_month(ctx context.Context, field graphql.CollectedField, obj *models.OrderAnalytics) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrderAnalytics",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderAnalytics_unpaid(ctx context.Context, field graphql.CollectedField, obj *models.OrderAnalytics) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrderAnalytics",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unpaid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderAnalytics_paid(ctx context.Context, field graphql.CollectedField, obj *models.OrderAnalytics) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrderAnalytics",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSubmit_coordinatorName(ctx context.Context, field graphql.CollectedField, obj *models.OrderSubmit) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrderSubmit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CoordinatorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSubmit_month(ctx context.Context, field graphql.CollectedField, obj *models.OrderSubmit) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrderSubmit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSubmit_year(ctx context.Context, field graphql.CollectedField, obj *models.OrderSubmit) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrderSubmit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OrderSubmit_count(ctx context.Context, field graphql.CollectedField, obj *models.OrderSubmit) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "OrderSubmit",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionGroup_id(ctx context.Context, field graphql.CollectedField, obj *models.PermissionGroup) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionGroup_name(ctx context.Context, field graphql.CollectedField, obj *models.PermissionGroup) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionGroup_permissions(ctx context.Context, field graphql.CollectedField, obj *models.PermissionGroup) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionGroupResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.PermissionGroupResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionGroupResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PermissionGroupResult_results(ctx context.Context, field graphql.CollectedField, obj *models.PermissionGroupResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PermissionGroupResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PermissionGroup)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPermissionGroup2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_id(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_orderNumber(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_address(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_country(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_county(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.County, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_location(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_zipCode(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZipCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_company(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_companyId(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_premiumCompany(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PremiumCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_premiumCompanyId(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PremiumCompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_type(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_orderType(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_objective(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Objective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_assign(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_assignDateTime(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_assignId(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_mls(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_otherCompany(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_isRushOrder(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRushOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_isSuperRush(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuperRush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_isInspection(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInspection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_isInitialBpo(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInitialBpo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_orderFee(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_totalFee(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_isSyncedToTurboBpo(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSyncedToTurboBpo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_lastUpdateTime(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_dueDateTime(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DueDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_holdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HoldDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_ratingOverAll(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RatingOverAll, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_ratingTimeliness(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RatingTimeliness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_ratingQuality(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RatingQuality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_ratingFeedback(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RatingFeedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_status(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_pipelineQualityControlTotal(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineQualityControlTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_pipelinePhotoTotal(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelinePhotoTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_pipelineDocTotal(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineDocTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_pipelineNoteTotal(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineNoteTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_authorId(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_authorName(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_isProcessIform(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsProcessIform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_processIformModifiedDate(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessIformModifiedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_isProcessIfill(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsProcessIfill, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_ifillProcessModifiedDate(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IfillProcessModifiedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_isProcessReview(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsProcessReview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_processReviewModifiedDate(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessReviewModifiedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_pipelineHistory(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PipelineHistory)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPipelineHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineHistory(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_assignedHistory(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PipelineAssignedHistory)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPipelineAssignedHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineAssignedHistory(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_isHold(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_holdRemarks(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HoldRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_unHoldRemarks(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnHoldRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_cancelRemarks(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CancelRemarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_pauseDateTime(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PauseDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_isBilled(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBilled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Pipeline_isQc(ctx context.Context, field graphql.CollectedField, obj *models.Pipeline) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Pipeline",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsQc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineAssignedHistory_logDateTime(ctx context.Context, field graphql.CollectedField, obj *models.PipelineAssignedHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineAssignedHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineAssignedHistory_action(ctx context.Context, field graphql.CollectedField, obj *models.PipelineAssignedHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineAssignedHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineAssignedHistory_assignee(ctx context.Context, field graphql.CollectedField, obj *models.PipelineAssignedHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineAssignedHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineAssignedHistory_assigneeID(ctx context.Context, field graphql.CollectedField, obj *models.PipelineAssignedHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineAssignedHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineAssignedHistory_assignedBy(ctx context.Context, field graphql.CollectedField, obj *models.PipelineAssignedHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineAssignedHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineAssignedHistory_assignedByID(ctx context.Context, field graphql.CollectedField, obj *models.PipelineAssignedHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineAssignedHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedByID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineAssignedHistory_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PipelineAssignedHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineAssignedHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineComparable_id(ctx context.Context, field graphql.CollectedField, obj *models.PipelineComparable) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineComparable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineComparable_pipelineId(ctx context.Context, field graphql.CollectedField, obj *models.PipelineComparable) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineComparable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineComparable_mls(ctx context.Context, field graphql.CollectedField, obj *models.PipelineComparable) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineComparable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineComparable_status(ctx context.Context, field graphql.CollectedField, obj *models.PipelineComparable) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineComparable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineComparable_order(ctx context.Context, field graphql.CollectedField, obj *models.PipelineComparable) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineComparable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineComparableResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.PipelineComparableResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineComparableResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineComparableResult_results(ctx context.Context, field graphql.CollectedField, obj *models.PipelineComparableResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineComparableResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PipelineComparable)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPipelineComparable2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineComparable(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineDoc_id(ctx context.Context, field graphql.CollectedField, obj *models.PipelineDoc) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineDoc",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineDoc_fileName(ctx context.Context, field graphql.CollectedField, obj *models.PipelineDoc) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineDoc",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineDoc_url(ctx context.Context, field graphql.CollectedField, obj *models.PipelineDoc) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineDoc",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineDoc_type(ctx context.Context, field graphql.CollectedField, obj *models.PipelineDoc) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineDoc",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineDoc_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PipelineDoc) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineDoc",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineDoc_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.PipelineDoc) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineDoc",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineDocResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.PipelineDocResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineDocResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineDocResult_results(ctx context.Context, field graphql.CollectedField, obj *models.PipelineDocResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineDocResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PipelineDoc)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPipelineDoc2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineDoc(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineHistory_logDateTime(ctx context.Context, field graphql.CollectedField, obj *models.PipelineHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineHistory_action(ctx context.Context, field graphql.CollectedField, obj *models.PipelineHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineHistory_value(ctx context.Context, field graphql.CollectedField, obj *models.PipelineHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineHistory_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.PipelineHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_id(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_isReoDriven(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReoDriven, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_marketTrend(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketTrend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_monthlyPercentage(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonthlyPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_sixmonthPercentage(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SixmonthPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_annualPercentage(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnualPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_totalListings(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalListings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_supply(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supply, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_listingsMinValue(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListingsMinValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_listingsMedValue(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListingsMedValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_listingsMaxValue(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListingsMaxValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_listingsDomAve(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListingsDomAve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_listingsDomRangeFrom(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListingsDomRangeFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_listingsDomRangeTo(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListingsDomRangeTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_fm(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_ss(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ss, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_reo(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_distressed(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Distressed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_totalSales(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalSales, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_demand(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Demand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_salesMinValue(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalesMinValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_salesMedValue(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalesMedValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_salesMaxValue(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalesMaxValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_salesDomRangeFrom(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalesDomRangeFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_salesDomRangeTo(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalesDomRangeTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_zntComments(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZntComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNeighborhood_ntComments(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNeighborhood) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNeighborhood",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NtComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_id(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_orderNotes(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_inspectionNotes(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InspectionNotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairDescription1(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairPrice1(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairDescription2(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairPrice2(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairDescription3(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairPrice3(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairDescription4(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairPrice4(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairDescription5(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairPrice5(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairDescription6(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairPrice6(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairDescription7(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairPrice7(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairDescription8(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription8, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairPrice8(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice8, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairDescription9(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription9, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairPrice9(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice9, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairDescription10(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription10, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairPrice10(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice10, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_exteriorRepairPriceTotal(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPriceTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairDescription1(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairPrice1(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairDescription2(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairPrice2(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairDescription3(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairPrice3(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairDescription4(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairPrice4(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairDescription5(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairPrice5(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairDescription6(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairPrice6(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairDescription7(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairPrice7(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairDescription8(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription8, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairPrice8(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice8, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairDescription9(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription9, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairPrice9(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice9, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairDescription10(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription10, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairPrice10(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice10, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_interiorRepairPriceTotal(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPriceTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNote_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNoteResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNoteResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNoteResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineNoteResult_results(ctx context.Context, field graphql.CollectedField, obj *models.PipelineNoteResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineNoteResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PipelineNote)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPipelineNote2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineNote(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelinePhoto_id(ctx context.Context, field graphql.CollectedField, obj *models.PipelinePhoto) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelinePhoto",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelinePhoto_fileName(ctx context.Context, field graphql.CollectedField, obj *models.PipelinePhoto) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelinePhoto",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelinePhoto_fileSize(ctx context.Context, field graphql.CollectedField, obj *models.PipelinePhoto) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelinePhoto",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelinePhoto_url(ctx context.Context, field graphql.CollectedField, obj *models.PipelinePhoto) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelinePhoto",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelinePhoto_isSubmitted(ctx context.Context, field graphql.CollectedField, obj *models.PipelinePhoto) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelinePhoto",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSubmitted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelinePhoto_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PipelinePhoto) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelinePhoto",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelinePhoto_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.PipelinePhoto) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelinePhoto",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelinePhotoResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.PipelinePhotoResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelinePhotoResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelinePhotoResult_results(ctx context.Context, field graphql.CollectedField, obj *models.PipelinePhotoResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelinePhotoResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PipelinePhoto)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPipelinePhoto2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelinePhoto(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineQualityControl_orderNotes(ctx context.Context, field graphql.CollectedField, obj *models.PipelineQualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineQualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineQualityControl_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PipelineQualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineQualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineQualityControl_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.PipelineQualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineQualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineQualityControlAndNote_message(ctx context.Context, field graphql.CollectedField, obj *models.PipelineQualityControlAndNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineQualityControlAndNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineQualityControlAndNote_date(ctx context.Context, field graphql.CollectedField, obj *models.PipelineQualityControlAndNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineQualityControlAndNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineQualityControlAndNote_category(ctx context.Context, field graphql.CollectedField, obj *models.PipelineQualityControlAndNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineQualityControlAndNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineQualityControlAndNote_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.PipelineQualityControlAndNote) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineQualityControlAndNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineQualityControlAndNoteResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.PipelineQualityControlAndNoteResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineQualityControlAndNoteResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineQualityControlAndNoteResult_results(ctx context.Context, field graphql.CollectedField, obj *models.PipelineQualityControlAndNoteResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineQualityControlAndNoteResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PipelineQualityControlAndNote)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPipelineQualityControlAndNote2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControlAndNote(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineQualityControlResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.PipelineQualityControlResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineQualityControlResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineQualityControlResult_results(ctx context.Context, field graphql.CollectedField, obj *models.PipelineQualityControlResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineQualityControlResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.PipelineQualityControl)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPipelineQualityControl2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControl(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairDescription1(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairPrice1(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairDescription2(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairPrice2(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairDescription3(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairPrice3(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairDescription4(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairPrice4(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairDescription5(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairPrice5(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairDescription6(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairPrice6(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairDescription7(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairPrice7(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairDescription8(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription8, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairPrice8(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice8, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairDescription9(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription9, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairPrice9(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice9, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairDescription10(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairDescription10, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairPrice10(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPrice10, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_exteriorRepairPriceTotal(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExteriorRepairPriceTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairDescription1(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairPrice1(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairDescription2(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairPrice2(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairDescription3(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairPrice3(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairDescription4(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairPrice4(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairDescription5(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairPrice5(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairDescription6(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairPrice6(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairDescription7(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairPrice7(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairDescription8(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription8, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairPrice8(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice8, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairDescription9(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription9, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairPrice9(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice9, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairDescription10(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairDescription10, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairPrice10(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPrice10, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineRepair_interiorRepairPriceTotal(ctx context.Context, field graphql.CollectedField, obj *models.PipelineRepair) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineRepair",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InteriorRepairPriceTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.PipelineResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineResult_results(ctx context.Context, field graphql.CollectedField, obj *models.PipelineResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Pipeline)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPipeline2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipeline(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_maxDailyVolume(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxDailyVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_standByAutoComplete(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StandByAutoComplete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_isRush(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_isNewOrder(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNewOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_orderMessage(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_tTSlow(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TTSlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_tTModerate(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TTModerate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_tTBusy(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TTBusy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_tTMax(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TTMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_tLSlow(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TLSlow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_tLModerate(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TLModerate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_tLBusy(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TLBusy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_oPInterior(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OPInterior, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_oPExterior(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OPExterior, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_oPDataEntry(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OPDataEntry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_oPRush(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OPRush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_oPSuperRush(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OPSuperRush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_oPConditionReport(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OPConditionReport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_oPRentalAddendum(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OPRentalAddendum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_oPInitialBPO(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OPInitialBpo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_oPInspection(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OPInspection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_pCIsAcceptOrder(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PCIsAcceptOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_pCcatchTime(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PCcatchTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_oAOfferLimitInMin(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OAOfferLimitInMin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_oAIsAutoAssign(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OAIsAutoAssign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_qCElapseTime(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QCElapseTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PipelineState_todayOrderCount(ctx context.Context, field graphql.CollectedField, obj *models.PipelineState) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PipelineState",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TodayOrderCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceModule_credits(ctx context.Context, field graphql.CollectedField, obj *models.PriceModule) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PriceModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Credits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceModule_orderinterior(ctx context.Context, field graphql.CollectedField, obj *models.PriceModule) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PriceModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Orderinterior, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceModule_orderexterior(ctx context.Context, field graphql.CollectedField, obj *models.PriceModule) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PriceModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Orderexterior, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceModule_orderdataEntry(ctx context.Context, field graphql.CollectedField, obj *models.PriceModule) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PriceModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderdataEntry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceModule_orderrush(ctx context.Context, field graphql.CollectedField, obj *models.PriceModule) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PriceModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Orderrush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceModule_ordersuperRush(ctx context.Context, field graphql.CollectedField, obj *models.PriceModule) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PriceModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrdersuperRush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceModule_orderconditionReport(ctx context.Context, field graphql.CollectedField, obj *models.PriceModule) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PriceModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderconditionReport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceModule_orderrentalAddendum(ctx context.Context, field graphql.CollectedField, obj *models.PriceModule) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PriceModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderrentalAddendum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceModule_photoExterior(ctx context.Context, field graphql.CollectedField, obj *models.PriceModule) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PriceModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoExterior, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceModule_photoInteriorVacantLB(ctx context.Context, field graphql.CollectedField, obj *models.PriceModule) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PriceModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoInteriorVacantLb, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceModule_photoInteriorAppointment(ctx context.Context, field graphql.CollectedField, obj *models.PriceModule) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "PriceModule",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoInteriorAppointment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProfileDocResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.ProfileDocResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProfileDocResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ProfileDocResult_results(ctx context.Context, field graphql.CollectedField, obj *models.ProfileDocResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ProfileDocResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Doc)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalODoc2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐDoc(ctx, field.Selections, res)
}

func (ec *executionContext) _QcCompleted_qualityControlName(ctx context.Context, field graphql.CollectedField, obj *models.QcCompleted) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcCompleted",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityControlName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcCompleted_month(ctx context.Context, field graphql.CollectedField, obj *models.QcCompleted) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcCompleted",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcCompleted_year(ctx context.Context, field graphql.CollectedField, obj *models.QcCompleted) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcCompleted",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcCompleted_normal(ctx context.Context, field graphql.CollectedField, obj *models.QcCompleted) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcCompleted",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Normal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcCompleted_fullRec(ctx context.Context, field graphql.CollectedField, obj *models.QcCompleted) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcCompleted",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullRec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcCompleted_dd(ctx context.Context, field graphql.CollectedField, obj *models.QcCompleted) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcCompleted",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcCompleted_total(ctx context.Context, field graphql.CollectedField, obj *models.QcCompleted) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcCompleted",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_id(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_pipelineId(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_orderNumber(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_address(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_country(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_location(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_company(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_type(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_orderType(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_objective(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Objective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_assign(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assign, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_assignId(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_mls(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mls, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_isRushOrder(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRushOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_isSuperRush(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuperRush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_isInspection(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInspection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_isInitialBpo(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInitialBpo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_orderFee(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_totalFee(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalFee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_isSyncedToTurboBpo(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSyncedToTurboBpo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_lastUpdateTime(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_ratingOverAll(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RatingOverAll, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_ratingTimeliness(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RatingTimeliness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_ratingQuality(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RatingQuality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_ratingFeedback(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RatingFeedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_status(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_pipelineQualityControlTotal(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineQualityControlTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_pipelinePhotoTotal(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelinePhotoTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_pipelineDocTotal(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineDocTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_pipelineNoteTotal(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineNoteTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_authorId(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_authorName(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_isProcessIform(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsProcessIform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_processIformModifiedDate(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessIformModifiedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_isProcessIfill(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsProcessIfill, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_ifillProcessModifiedDate(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IfillProcessModifiedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_isProcessReview(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsProcessReview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_processReviewModifiedDate(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcessReviewModifiedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistory_qcHistory(ctx context.Context, field graphql.CollectedField, obj *models.QcHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QcHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.QualityControlHistory)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOQualityControlHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControlHistory(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistoryResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.QcHistoryResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistoryResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcHistoryResult_results(ctx context.Context, field graphql.CollectedField, obj *models.QcHistoryResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcHistoryResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.QcHistory)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOQcHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcHistory(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRating_contractorName(ctx context.Context, field graphql.CollectedField, obj *models.QcRating) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRating",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRating_month(ctx context.Context, field graphql.CollectedField, obj *models.QcRating) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRating",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRating_year(ctx context.Context, field graphql.CollectedField, obj *models.QcRating) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRating",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRating_noOfOders(ctx context.Context, field graphql.CollectedField, obj *models.QcRating) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRating",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoOfOders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRating_noOfQcL(ctx context.Context, field graphql.CollectedField, obj *models.QcRating) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRating",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoOfQcL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRating_percentOfQc(ctx context.Context, field graphql.CollectedField, obj *models.QcRating) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRating",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PercentOfQc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_id(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_qcId(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QcID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_pipelineId(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_orderNumber(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_address(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_company(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_type(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_qcTotal(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QcTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_notesTotal(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotesTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_orderAssignee(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderAssignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_orderAssigneeId(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderAssigneeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_qcAssignee(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QcAssignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_status(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_requestDate(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequest_requestType(ctx context.Context, field graphql.CollectedField, obj *models.QcRequest) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequestResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.QcRequestResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequestResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QcRequestResult_results(ctx context.Context, field graphql.CollectedField, obj *models.QcRequestResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QcRequestResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.QcRequest)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOQcRequest2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_id(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_pipelineId(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_orderNumber(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_orderType(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_orderContractor(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderContractor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_orderContractorId(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderContractorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_clientName(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_requests(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Requests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_status(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_assignee(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_assigneeId(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_address(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_history(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.History, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.QualityControlHistory)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOQualityControlHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControlHistory(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControl_LastUpdateTime(ctx context.Context, field graphql.CollectedField, obj *models.QualityControl) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControl",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControlHistory_status(ctx context.Context, field graphql.CollectedField, obj *models.QualityControlHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControlHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControlHistory_reason(ctx context.Context, field graphql.CollectedField, obj *models.QualityControlHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControlHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControlHistory_date(ctx context.Context, field graphql.CollectedField, obj *models.QualityControlHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControlHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControlHistory_cratedby(ctx context.Context, field graphql.CollectedField, obj *models.QualityControlHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControlHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cratedby, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControlHistory_currentAssignee(ctx context.Context, field graphql.CollectedField, obj *models.QualityControlHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControlHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentAssignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControlHistory_newAssignee(ctx context.Context, field graphql.CollectedField, obj *models.QualityControlHistory) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControlHistory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewAssignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControlResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.QualityControlResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControlResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _QualityControlResult_results(ctx context.Context, field graphql.CollectedField, obj *models.QualityControlResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "QualityControlResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.QualityControl)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOQualityControl2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControl(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_profile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Profile(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allProfileDoc(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allProfileDoc_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllProfileDoc(rctx, args["userId"].(*string), args["filter"].(*models.FilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ProfileDocResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNProfileDocResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐProfileDocResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allAccount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllAccount(rctx, args["filter"].(*models.AccountFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.AccountResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAccountResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccountResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allAdjustment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allAdjustment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllAdjustment(rctx, args["userId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Adjustment)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAdjustment2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAdjustment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllComment(rctx, args["userId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Comment)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNComment2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_default(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_default_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Default(rctx, args["userId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Default)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNDefault2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐDefault(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allPipeline(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allPipeline_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllPipeline(rctx, args["filter"].(*models.PipelineFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PipelineResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelineResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allPipelineQualityControl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allPipelineQualityControl_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllPipelineQualityControl(rctx, args["pipelineId"].(string), args["filter"].(*models.FilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PipelineQualityControlResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelineQualityControlResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControlResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allPipelineDoc(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allPipelineDoc_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllPipelineDoc(rctx, args["pipelineId"].(string), args["filter"].(*models.FilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PipelineDocResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelineDocResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineDocResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allPipelinePhoto(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allPipelinePhoto_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllPipelinePhoto(rctx, args["pipelineId"].(string), args["filter"].(*models.FilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PipelinePhotoResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelinePhotoResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelinePhotoResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allPipelineNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allPipelineNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllPipelineNote(rctx, args["pipelineId"].(string), args["filter"].(*models.FilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PipelineNoteResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelineNoteResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineNoteResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allCredit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllCredit(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Credit)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCredit2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCredit(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allCompany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllCompany(rctx, args["filter"].(*models.CompanyFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CompanyResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCompanyResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_company(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_company_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Company(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Company)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCompany2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllUser(rctx, args["filter"].(*models.UserFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.UserResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUserResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUserResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_pipelineState(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PipelineState(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PipelineState)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelineState2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineState(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allEmailTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allEmailTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllEmailTemplate(rctx, args["filter"].(*models.EmailTemplateFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.EmailTemplateResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNEmailTemplateResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐEmailTemplateResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allHeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allHeader_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllHeader(rctx, args["filter"].(*models.HeaderFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.HeaderResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHeaderResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allHeaderDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allHeaderDetail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllHeaderDetail(rctx, args["parentId"].(string), args["filter"].(*models.HeaderFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.HeaderResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNHeaderResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_headerCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_headerCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().HeaderCode(rctx, args["codes"].([]*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.HeaderCode)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOHeaderCode2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderCode(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allInstruction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allInstruction_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllInstruction(rctx, args["filter"].(*models.InstructionFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.InstructionResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInstructionResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInstructionResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allSalesAnalytics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allSalesAnalytics_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllSalesAnalytics(rctx, args["filter"].(models.SalesAnalyticsFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SalesAnalytics)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNSalesAnalytics2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSalesAnalytics(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allOrderAnalytics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allOrderAnalytics_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllOrderAnalytics(rctx, args["filter"].(models.OrderAnalyticsFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrderAnalytics)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNOrderAnalytics2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐOrderAnalytics(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allQualityControl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allQualityControl_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllQualityControl(rctx, args["filter"].(*models.FilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.QualityControlResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNQualityControlResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControlResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNUser2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allPipelineQualityControlAndNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allPipelineQualityControlAndNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllPipelineQualityControlAndNote(rctx, args["pipelineId"].(string), args["filter"].(*models.FilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PipelineQualityControlAndNoteResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelineQualityControlAndNoteResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControlAndNoteResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_pipelineNeighborhood(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_pipelineNeighborhood_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PipelineNeighborhood(rctx, args["pipelineId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PipelineNeighborhood)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelineNeighborhood2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineNeighborhood(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allBalance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllBalance(rctx, args["filter"].(*models.BalanceFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.BalanceResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBalanceResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBalanceResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allCheckout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allCheckout_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllCheckout(rctx, args["filter"].(*models.CheckoutFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CheckoutResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCheckoutResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCheckoutResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allCredits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allCredits_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllCredits(rctx, args["filter"].(*models.CreditsFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CreditsResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCreditsResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditsResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allQcRating(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allQcRating_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllQcRating(rctx, args["year"].(int), args["type"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.QcRating)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNQcRating2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRating(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allOrderSubmit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allOrderSubmit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllOrderSubmit(rctx, args["year"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.OrderSubmit)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNOrderSubmit2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐOrderSubmit(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allQcHistory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allQcHistory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllQcHistory(rctx, args["filter"].(*models.QcHistoryFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.QcHistoryResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNQcHistoryResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcHistoryResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allQcRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allQcRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllQcRequest(rctx, args["filter"].(*models.QcRequestFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.QcRequestResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNQcRequestResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRequestResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allReview_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllReview(rctx, args["filter"].(*models.FilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ReviewResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNReviewResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐReviewResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllRequest(rctx, args["filter"].(*models.RequestFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.RequestResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNRequestResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRequestResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allQcCompleted(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allQcCompleted_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllQcCompleted(rctx, args["year"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.QcCompleted)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNQcCompleted2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcCompleted(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_pipeline(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_pipeline_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Pipeline(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Pipeline)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipeline2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipeline(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allInvoice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allInvoice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllInvoice(rctx, args["filter"].(*models.InvoiceFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Invoice)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInvoice2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allInvoiceRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allInvoiceRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllInvoiceRequest(rctx, args["filter"].(*models.InvoiceRequestFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.InvoiceRequestResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInvoiceRequestResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allInvoiceRequestHistory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allInvoiceRequestHistory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllInvoiceRequestHistory(rctx, args["filter"].(*models.FilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.InvoiceRequestHistoryResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInvoiceRequestHistoryResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestHistoryResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_iform(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_iform_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Iform(rctx, args["pipelineId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Iform)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIform2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIform(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_iformTemp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_iformTemp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().IformTemp(rctx, args["pipelineId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.IformTemp)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIformTemp2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformTemp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_pipelineRepair(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_pipelineRepair_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PipelineRepair(rctx, args["pipelineId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PipelineRepair)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelineRepair2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineRepair(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allAnnouncement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allAnnouncement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllAnnouncement(rctx, args["filter"].(*models.AnnouncementFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.AnnouncementResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNAnnouncementResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncementResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allSession_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllSession(rctx, args["filter"].(*models.SessionFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SessionResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNSessionResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSessionResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allPermissionGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allPermissionGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllPermissionGroup(rctx, args["filter"].(*models.PermissionGroupFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PermissionGroupResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPermissionGroupResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroupResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allLoginLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allLoginLog_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllLoginLog(rctx, args["filter"].(*models.LoginLogFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.LoginLogResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNLoginLogResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLoginLogResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allPipelineComparable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allPipelineComparable_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllPipelineComparable(rctx, args["pipelineId"].(string), args["filter"].(*models.PipelineComparableFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PipelineComparableResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPipelineComparableResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineComparableResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allBilling(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allBilling_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllBilling(rctx, args["filter"].(*models.BillingFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.BillingResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBillingResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allIformGrid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allIformGrid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllIformGrid(rctx, args["pipelineId"].(string), args["filter"].(*models.IformGridFilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.IformGridResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNIformGridResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformGridResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allCreditLedger(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allCreditLedger_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllCreditLedger(rctx, args["userId"].(*string), args["filter"].(*models.FilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CreditLedgerResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCreditLedgerResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditLedgerResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_priceModule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PriceModule(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PriceModule)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNPriceModule2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPriceModule(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_id(ctx context.Context, field graphql.CollectedField, obj *models.Request) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Request",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_status(ctx context.Context, field graphql.CollectedField, obj *models.Request) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Request",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_type(ctx context.Context, field graphql.CollectedField, obj *models.Request) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Request",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_orderType(ctx context.Context, field graphql.CollectedField, obj *models.Request) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Request",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_pipelineId(ctx context.Context, field graphql.CollectedField, obj *models.Request) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Request",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_orderNumber(ctx context.Context, field graphql.CollectedField, obj *models.Request) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Request",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_address(ctx context.Context, field graphql.CollectedField, obj *models.Request) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Request",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_company(ctx context.Context, field graphql.CollectedField, obj *models.Request) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Request",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_conditionType(ctx context.Context, field graphql.CollectedField, obj *models.Request) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Request",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConditionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.Request) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Request",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_requestedBy(ctx context.Context, field graphql.CollectedField, obj *models.Request) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Request",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_requestedById(ctx context.Context, field graphql.CollectedField, obj *models.Request) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Request",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestedByID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Request_remarks(ctx context.Context, field graphql.CollectedField, obj *models.Request) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Request",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.RequestResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RequestResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestResult_results(ctx context.Context, field graphql.CollectedField, obj *models.RequestResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "RequestResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Request)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalORequest2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _Review_id(ctx context.Context, field graphql.CollectedField, obj *models.Review) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Review",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Review_orderNumber(ctx context.Context, field graphql.CollectedField, obj *models.Review) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Review",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Review_pipelineId(ctx context.Context, field graphql.CollectedField, obj *models.Review) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Review",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PipelineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Review_address(ctx context.Context, field graphql.CollectedField, obj *models.Review) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Review",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Review_assignedTo(ctx context.Context, field graphql.CollectedField, obj *models.Review) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Review",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignedTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Review_reviewDescription(ctx context.Context, field graphql.CollectedField, obj *models.Review) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Review",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Review_reviewDate(ctx context.Context, field graphql.CollectedField, obj *models.Review) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Review",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Review_reviewBy(ctx context.Context, field graphql.CollectedField, obj *models.Review) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Review",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Review_url(ctx context.Context, field graphql.CollectedField, obj *models.Review) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Review",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Review_fileName(ctx context.Context, field graphql.CollectedField, obj *models.Review) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Review",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ReviewResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.ReviewResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ReviewResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ReviewResult_results(ctx context.Context, field graphql.CollectedField, obj *models.ReviewResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "ReviewResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Review)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOReview2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐReview(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesAnalytics_day(ctx context.Context, field graphql.CollectedField, obj *models.SalesAnalytics) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "SalesAnalytics",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SalesAnalytics_completedOrder(ctx context.Context, field graphql.CollectedField, obj *models.SalesAnalytics) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "SalesAnalytics",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_id(ctx context.Context, field graphql.CollectedField, obj *models.Session) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Session",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_invoiceDate(ctx context.Context, field graphql.CollectedField, obj *models.Session) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Session",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvoiceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_start(ctx context.Context, field graphql.CollectedField, obj *models.Session) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Session",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Session_end(ctx context.Context, field graphql.CollectedField, obj *models.Session) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Session",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SessionResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.SessionResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "SessionResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SessionResult_results(ctx context.Context, field graphql.CollectedField, obj *models.SessionResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "SessionResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Session)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOSession2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSession(ctx, field.Selections, res)
}

func (ec *executionContext) _Token_token(ctx context.Context, field graphql.CollectedField, obj *models.Token) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "Token",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_company(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_address(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_city(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_state(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_zipCode(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZipCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_title(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_about(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.About, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_roles(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_status(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_hdyfu(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hdyfu, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_phoneConsultation(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneConsultation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_imABroker(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImABroker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_broker(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Broker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_brokerLicense(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrokerLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_agent(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_agentLicense(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgentLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_licenseDate(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_licenseExpirationDate(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseExpirationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_brokerage(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Brokerage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_yearOfExperience(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YearOfExperience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_profilePicture(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfilePicture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_createdDateTime(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_lastUpdateTime(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_logs(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.Log)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOLog2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLog(ctx, field.Selections, res)
}

func (ec *executionContext) _User_credit(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Credit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _User_orderTotal(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_assignmentPercentage(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignmentPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _User_companyList(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_permissionGroupId(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionGroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_permissionList(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_priceModule(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceModule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PriceModule)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOPriceModule2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPriceModule(ctx, field.Selections, res)
}

func (ec *executionContext) _User_disclaimer(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Disclaimer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_theme(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Theme, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_isEnableEmailNotification(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEnableEmailNotification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _User_tier(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_mao(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mao, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_assignDate(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _User_assignActive(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_assignHold(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignHold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_assignRush(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignRush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _User_assignStandby(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignStandby, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UserResult_totalCount(ctx context.Context, field graphql.CollectedField, obj *models.UserResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UserResult_results(ctx context.Context, field graphql.CollectedField, obj *models.UserResult) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "UserResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.User)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__DirectiveLocation2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
		ec.Tracer.EndFieldExecution(ctx)
	}()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAccountFilterInput(ctx context.Context, obj interface{}) (models.AccountFilterInput, error) {
	var it models.AccountFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error
			it.Username, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAccountInput(ctx context.Context, obj interface{}) (models.AccountInput, error) {
	var it models.AccountInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "recordType":
			var err error
			it.RecordType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "webSite":
			var err error
			it.WebSite, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error
			it.Username, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "question1":
			var err error
			it.Question1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "answer1":
			var err error
			it.Answer1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "question2":
			var err error
			it.Question2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "answer2":
			var err error
			it.Answer2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "question3":
			var err error
			it.Question3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "answer3":
			var err error
			it.Answer3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "others":
			var err error
			it.Others, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddCreditLedgerInput(ctx context.Context, obj interface{}) (models.AddCreditLedgerInput, error) {
	var it models.AddCreditLedgerInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error
			it.Amount, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAnnouncementFilterInput(ctx context.Context, obj interface{}) (models.AnnouncementFilterInput, error) {
	var it models.AnnouncementFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAnnouncementInput(ctx context.Context, obj interface{}) (models.AnnouncementInput, error) {
	var it models.AnnouncementInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "subject":
			var err error
			it.Subject, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error
			it.StartDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error
			it.EndDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBalanceFilterInput(ctx context.Context, obj interface{}) (models.BalanceFilterInput, error) {
	var it models.BalanceFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientName":
			var err error
			it.ClientName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBillingEntryInput(ctx context.Context, obj interface{}) (models.BillingEntryInput, error) {
	var it models.BillingEntryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orderNumber":
			var err error
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error
			it.Amount, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBillingFilterInput(ctx context.Context, obj interface{}) (models.BillingFilterInput, error) {
	var it models.BillingFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCheckoutFilterInput(ctx context.Context, obj interface{}) (models.CheckoutFilterInput, error) {
	var it models.CheckoutFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentInput(ctx context.Context, obj interface{}) (models.CommentInput, error) {
	var it models.CommentInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "category":
			var err error
			it.Category, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "label":
			var err error
			it.Label, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "section":
			var err error
			it.Section, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyFilterInput(ctx context.Context, obj interface{}) (models.CompanyFilterInput, error) {
	var it models.CompanyFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isAdmin":
			var err error
			it.IsAdmin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isClient":
			var err error
			it.IsClient, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPremium":
			var err error
			it.IsPremium, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyFormInput(ctx context.Context, obj interface{}) (models.CompanyFormInput, error) {
	var it models.CompanyFormInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "style":
			var err error
			it.Style, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyInput(ctx context.Context, obj interface{}) (models.CompanyInput, error) {
	var it models.CompanyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "webSite":
			var err error
			it.WebSite, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isAdmin":
			var err error
			it.IsAdmin, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isClient":
			var err error
			it.IsClient, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPremium":
			var err error
			it.IsPremium, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "forms":
			var err error
			it.Forms, err = ec.unmarshalOCompanyFormInput2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyFormInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreditsFilterInput(ctx context.Context, obj interface{}) (models.CreditsFilterInput, error) {
	var it models.CreditsFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDefaultInput(ctx context.Context, obj interface{}) (models.DefaultInput, error) {
	var it models.DefaultInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "listingType":
			var err error
			it.ListingType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alwayssubmitOrder":
			var err error
			it.AlwayssubmitOrder, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "autoCompleteStandbyOrder":
			var err error
			it.AutoCompleteStandbyOrder, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "initialSearchGla":
			var err error
			it.InitialSearchGla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "initialSearchAge":
			var err error
			it.InitialSearchAge, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "initialSearchProximity":
			var err error
			it.InitialSearchProximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondSearchGla":
			var err error
			it.SecondSearchGla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondSearchAge":
			var err error
			it.SecondSearchAge, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondSearchProximity":
			var err error
			it.SecondSearchProximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "secondSearchSaleDates":
			var err error
			it.SecondSearchSaleDates, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "thirdSearchGla":
			var err error
			it.ThirdSearchGla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "thirdSearchAge":
			var err error
			it.ThirdSearchAge, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "thirdSearchProximity":
			var err error
			it.ThirdSearchProximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "thirdSearchSaleDates":
			var err error
			it.ThirdSearchSaleDates, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "thirdSearchFilterByComplexName":
			var err error
			it.ThirdSearchFilterByComplexName, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "thirdSearchFilterByCity":
			var err error
			it.ThirdSearchFilterByCity, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "thirdSearchFilterByZip":
			var err error
			it.ThirdSearchFilterByZip, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "thirdSearchFilterByCountry":
			var err error
			it.ThirdSearchFilterByCountry, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "useDefaults":
			var err error
			it.UseDefaults, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "useIformValidations":
			var err error
			it.UseIformValidations, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "subjectType":
			var err error
			it.SubjectType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "styleDesign":
			var err error
			it.StyleDesign, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorFinish":
			var err error
			it.ExteriorFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "condition":
			var err error
			it.Condition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "quality":
			var err error
			it.Quality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "view":
			var err error
			it.View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool":
			var err error
			it.Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "porchPatioDeck":
			var err error
			it.PorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firePlace":
			var err error
			it.FirePlace, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "basement":
			var err error
			it.Basement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "condo":
			var err error
			it.Condo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "multiUnit":
			var err error
			it.MultiUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobileHome":
			var err error
			it.MobileHome, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sfd":
			var err error
			it.Sfd, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sfaTownhouse":
			var err error
			it.SfaTownhouse, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "theme":
			var err error
			it.Theme, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isEnableEmailNotification":
			var err error
			it.IsEnableEmailNotification, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailTemplateFilterInput(ctx context.Context, obj interface{}) (models.EmailTemplateFilterInput, error) {
	var it models.EmailTemplateFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "subject":
			var err error
			it.Subject, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFilterInput(ctx context.Context, obj interface{}) (models.FilterInput, error) {
	var it models.FilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHeaderFilterInput(ctx context.Context, obj interface{}) (models.HeaderFilterInput, error) {
	var it models.HeaderFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIformGridFilterInput(ctx context.Context, obj interface{}) (models.IformGridFilterInput, error) {
	var it models.IformGridFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInstructionFilterInput(ctx context.Context, obj interface{}) (models.InstructionFilterInput, error) {
	var it models.InstructionFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error
			it.Tag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoiceFilterInput(ctx context.Context, obj interface{}) (models.InvoiceFilterInput, error) {
	var it models.InvoiceFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "employeeId":
			var err error
			it.EmployeeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isCancelled":
			var err error
			it.IsCancelled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoiceRequestFilterInput(ctx context.Context, obj interface{}) (models.InvoiceRequestFilterInput, error) {
	var it models.InvoiceRequestFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLoginLogFilterInput(ctx context.Context, obj interface{}) (models.LoginLogFilterInput, error) {
	var it models.LoginLogFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrderAnalyticsFilterInput(ctx context.Context, obj interface{}) (models.OrderAnalyticsFilterInput, error) {
	var it models.OrderAnalyticsFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "year":
			var err error
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "client":
			var err error
			it.Client, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPermissionGroupFilterInput(ctx context.Context, obj interface{}) (models.PermissionGroupFilterInput, error) {
	var it models.PermissionGroupFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPermissionGroupInput(ctx context.Context, obj interface{}) (models.PermissionGroupInput, error) {
	var it models.PermissionGroupInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissions":
			var err error
			it.Permissions, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPipelineComparableFilterInput(ctx context.Context, obj interface{}) (models.PipelineComparableFilterInput, error) {
	var it models.PipelineComparableFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPipelineDocInput(ctx context.Context, obj interface{}) (models.PipelineDocInput, error) {
	var it models.PipelineDocInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "doc":
			var err error
			it.Doc, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPipelineFilterInput(ctx context.Context, obj interface{}) (models.PipelineFilterInput, error) {
	var it models.PipelineFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignId":
			var err error
			it.AssignID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderType":
			var err error
			it.OrderType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authorId":
			var err error
			it.AuthorID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isProcessIfill":
			var err error
			it.IsProcessIfill, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isProcessIform":
			var err error
			it.IsProcessIform, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isProcessReview":
			var err error
			it.IsProcessReview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isBilled":
			var err error
			it.IsBilled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "qcUserId":
			var err error
			it.QcUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewerUserId":
			var err error
			it.ReviewerUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPipelineInput(ctx context.Context, obj interface{}) (models.PipelineInput, error) {
	var it models.PipelineInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orderNumber":
			var err error
			it.OrderNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error
			it.Country, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "county":
			var err error
			it.County, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error
			it.Location, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "zipCode":
			var err error
			it.ZipCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyId":
			var err error
			it.CompanyID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "premiumCompany":
			var err error
			it.PremiumCompany, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "premiumCompanyId":
			var err error
			it.PremiumCompanyID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "otherCompany":
			var err error
			it.OtherCompany, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderType":
			var err error
			it.OrderType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "objective":
			var err error
			it.Objective, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "assign":
			var err error
			it.Assign, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignId":
			var err error
			it.AssignID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mls":
			var err error
			it.Mls, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRushOrder":
			var err error
			it.IsRushOrder, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSuperRush":
			var err error
			it.IsSuperRush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isInspection":
			var err error
			it.IsInspection, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isInitialBpo":
			var err error
			it.IsInitialBpo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderFee":
			var err error
			it.OrderFee, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "totalFee":
			var err error
			it.TotalFee, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSyncedToTurboBpo":
			var err error
			it.IsSyncedToTurboBpo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "authorId":
			var err error
			it.AuthorID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPipelinePhotoInput(ctx context.Context, obj interface{}) (models.PipelinePhotoInput, error) {
	var it models.PipelinePhotoInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "doc":
			var err error
			it.Doc, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPriceModuleInput(ctx context.Context, obj interface{}) (models.PriceModuleInput, error) {
	var it models.PriceModuleInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "credits":
			var err error
			it.Credits, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderinterior":
			var err error
			it.Orderinterior, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderexterior":
			var err error
			it.Orderexterior, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderdataEntry":
			var err error
			it.OrderdataEntry, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderrush":
			var err error
			it.Orderrush, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ordersuperRush":
			var err error
			it.OrdersuperRush, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderconditionReport":
			var err error
			it.OrderconditionReport, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderrentalAddendum":
			var err error
			it.OrderrentalAddendum, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "photoExterior":
			var err error
			it.PhotoExterior, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "photoInteriorVacantLB":
			var err error
			it.PhotoInteriorVacantLb, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "photoInteriorAppointment":
			var err error
			it.PhotoInteriorAppointment, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProfileDocInput(ctx context.Context, obj interface{}) (models.ProfileDocInput, error) {
	var it models.ProfileDocInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "doc":
			var err error
			it.Doc, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProfileInput(ctx context.Context, obj interface{}) (models.ProfileInput, error) {
	var it models.ProfileInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error
			it.State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "zipCode":
			var err error
			it.ZipCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imABroker":
			var err error
			it.ImABroker, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "broker":
			var err error
			it.Broker, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brokerLicense":
			var err error
			it.BrokerLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error
			it.Agent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "agentLicense":
			var err error
			it.AgentLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseDate":
			var err error
			it.LicenseDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseExpirationDate":
			var err error
			it.LicenseExpirationDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brokerage":
			var err error
			it.Brokerage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "yearOfExperience":
			var err error
			it.YearOfExperience, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "profilePicture":
			var err error
			it.ProfilePicture, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "disclaimer":
			var err error
			it.Disclaimer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "theme":
			var err error
			it.Theme, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQcHistoryFilterInput(ctx context.Context, obj interface{}) (models.QcHistoryFilterInput, error) {
	var it models.QcHistoryFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "qrcId":
			var err error
			it.QrcID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientId":
			var err error
			it.ClientID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyId":
			var err error
			it.CompanyID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQcRequestFilterInput(ctx context.Context, obj interface{}) (models.QcRequestFilterInput, error) {
	var it models.QcRequestFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orderNumber":
			var err error
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderAssignee":
			var err error
			it.OrderAssignee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "qcAssignee":
			var err error
			it.QcAssignee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegisterInput(ctx context.Context, obj interface{}) (models.RegisterInput, error) {
	var it models.RegisterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error
			it.City, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error
			it.State, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "zipCode":
			var err error
			it.ZipCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "hdyfu":
			var err error
			it.Hdyfu, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneConsultation":
			var err error
			it.PhoneConsultation, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRequestFilterInput(ctx context.Context, obj interface{}) (models.RequestFilterInput, error) {
	var it models.RequestFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPending":
			var err error
			it.IsPending, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPhoto":
			var err error
			it.IsPhoto, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requestedById":
			var err error
			it.RequestedByID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSalesAnalyticsFilterInput(ctx context.Context, obj interface{}) (models.SalesAnalyticsFilterInput, error) {
	var it models.SalesAnalyticsFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "year":
			var err error
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error
			it.Month, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSaveBillingInput(ctx context.Context, obj interface{}) (models.SaveBillingInput, error) {
	var it models.SaveBillingInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNumber":
			var err error
			it.InvoiceNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error
			it.Date, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dueDate":
			var err error
			it.DueDate, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "entries":
			var err error
			it.Entries, err = ec.unmarshalNBillingEntryInput2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntryInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSaveCreditInput(ctx context.Context, obj interface{}) (models.SaveCreditInput, error) {
	var it models.SaveCreditInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "paypalOrderId":
			var err error
			it.PaypalOrderID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "paypalToken":
			var err error
			it.PaypalToken, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "amount":
			var err error
			it.Amount, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSaveEmailTemplateInput(ctx context.Context, obj interface{}) (models.SaveEmailTemplateInput, error) {
	var it models.SaveEmailTemplateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "template":
			var err error
			it.Template, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "subject":
			var err error
			it.Subject, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSaveIformGridInput(ctx context.Context, obj interface{}) (models.SaveIformGridInput, error) {
	var it models.SaveIformGridInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "age":
			var err error
			it.Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "basementFinishedSqFt":
			var err error
			it.BasementFinishedSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "basementSquareFeet":
			var err error
			it.BasementSquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "basementType":
			var err error
			it.BasementType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "bathrooms":
			var err error
			it.Bathrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "bedrooms":
			var err error
			it.Bedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "carport":
			var err error
			it.Carport, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "construction":
			var err error
			it.Construction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "daysOnMarket":
			var err error
			it.DaysOnMarket, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exterior":
			var err error
			it.Exterior, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorFeatures":
			var err error
			it.ExteriorFeatures, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fireplace":
			var err error
			it.Fireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fullBaths":
			var err error
			it.FullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "garage":
			var err error
			it.Garage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "garageDescription":
			var err error
			it.GarageDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "halfBaths":
			var err error
			it.HalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hOAFee":
			var err error
			it.HOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "listDate":
			var err error
			it.ListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "listPrice":
			var err error
			it.ListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lotSize":
			var err error
			it.LotSize, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mlsNumber":
			var err error
			it.MlsNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mlsComments":
			var err error
			it.MlsComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "originalListDate":
			var err error
			it.OriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "originalListPrice":
			var err error
			it.OriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parkingSpacesCarport":
			var err error
			it.ParkingSpacesCarport, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parkingSpacesGarage":
			var err error
			it.ParkingSpacesGarage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pool":
			var err error
			it.Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "porch":
			var err error
			it.Porch, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "priceClosed":
			var err error
			it.PriceClosed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "priceList":
			var err error
			it.PriceList, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "propertyStyle":
			var err error
			it.PropertyStyle, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "proplmg":
			var err error
			it.Proplmg, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "proximity":
			var err error
			it.Proximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "realEstateOwned":
			var err error
			it.RealEstateOwned, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "saleDate":
			var err error
			it.SaleDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "salePrice":
			var err error
			it.SalePrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "saleType":
			var err error
			it.SaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "selType":
			var err error
			it.SelType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "shortSale":
			var err error
			it.ShortSale, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "squareFootage":
			var err error
			it.SquareFootage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "streetDirection":
			var err error
			it.StreetDirection, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "streetName":
			var err error
			it.StreetName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "streetNumber":
			var err error
			it.StreetNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "streetType":
			var err error
			it.StreetType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subdivision":
			var err error
			it.Subdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "termsOfSale":
			var err error
			it.TermsOfSale, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "totalRooms":
			var err error
			it.TotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "totalUnits":
			var err error
			it.TotalUnits, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "unitNumber":
			var err error
			it.UnitNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "view":
			var err error
			it.View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "waterfront":
			var err error
			it.Waterfront, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "yearBuilt":
			var err error
			it.YearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "zip":
			var err error
			it.Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSaveInstructionInput(ctx context.Context, obj interface{}) (models.SaveInstructionInput, error) {
	var it models.SaveInstructionInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "tag":
			var err error
			it.Tag, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "client":
			var err error
			it.Client, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientId":
			var err error
			it.ClientID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyId":
			var err error
			it.CompanyID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "file":
			var err error
			it.File, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error
			it.Comment, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSaveInvoiceInput(ctx context.Context, obj interface{}) (models.SaveInvoiceInput, error) {
	var it models.SaveInvoiceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderNumber":
			var err error
			it.OrderNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "qcType":
			var err error
			it.QcType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSavePipelineComparableInput(ctx context.Context, obj interface{}) (models.SavePipelineComparableInput, error) {
	var it models.SavePipelineComparableInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "mls":
			var err error
			it.Mls, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "order":
			var err error
			it.Order, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSavePipelineNoteInput(ctx context.Context, obj interface{}) (models.SavePipelineNoteInput, error) {
	var it models.SavePipelineNoteInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orderNotes":
			var err error
			it.OrderNotes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspectionNotes":
			var err error
			it.InspectionNotes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription1":
			var err error
			it.ExteriorRepairDescription1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice1":
			var err error
			it.ExteriorRepairPrice1, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription2":
			var err error
			it.ExteriorRepairDescription2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice2":
			var err error
			it.ExteriorRepairPrice2, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription3":
			var err error
			it.ExteriorRepairDescription3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice3":
			var err error
			it.ExteriorRepairPrice3, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription4":
			var err error
			it.ExteriorRepairDescription4, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice4":
			var err error
			it.ExteriorRepairPrice4, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription5":
			var err error
			it.ExteriorRepairDescription5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice5":
			var err error
			it.ExteriorRepairPrice5, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription6":
			var err error
			it.ExteriorRepairDescription6, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice6":
			var err error
			it.ExteriorRepairPrice6, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription7":
			var err error
			it.ExteriorRepairDescription7, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice7":
			var err error
			it.ExteriorRepairPrice7, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription8":
			var err error
			it.ExteriorRepairDescription8, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice8":
			var err error
			it.ExteriorRepairPrice8, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription9":
			var err error
			it.ExteriorRepairDescription9, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice9":
			var err error
			it.ExteriorRepairPrice9, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription10":
			var err error
			it.ExteriorRepairDescription10, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice10":
			var err error
			it.ExteriorRepairPrice10, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPriceTotal":
			var err error
			it.ExteriorRepairPriceTotal, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription1":
			var err error
			it.InteriorRepairDescription1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice1":
			var err error
			it.InteriorRepairPrice1, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription2":
			var err error
			it.InteriorRepairDescription2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice2":
			var err error
			it.InteriorRepairPrice2, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription3":
			var err error
			it.InteriorRepairDescription3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice3":
			var err error
			it.InteriorRepairPrice3, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription4":
			var err error
			it.InteriorRepairDescription4, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice4":
			var err error
			it.InteriorRepairPrice4, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription5":
			var err error
			it.InteriorRepairDescription5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice5":
			var err error
			it.InteriorRepairPrice5, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription6":
			var err error
			it.InteriorRepairDescription6, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice6":
			var err error
			it.InteriorRepairPrice6, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription7":
			var err error
			it.InteriorRepairDescription7, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice7":
			var err error
			it.InteriorRepairPrice7, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription8":
			var err error
			it.InteriorRepairDescription8, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice8":
			var err error
			it.InteriorRepairPrice8, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription9":
			var err error
			it.InteriorRepairDescription9, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice9":
			var err error
			it.InteriorRepairPrice9, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription10":
			var err error
			it.InteriorRepairDescription10, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice10":
			var err error
			it.InteriorRepairPrice10, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPriceTotal":
			var err error
			it.InteriorRepairPriceTotal, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSavePipelineQualityControlAndNoteInput(ctx context.Context, obj interface{}) (models.SavePipelineQualityControlAndNoteInput, error) {
	var it models.SavePipelineQualityControlAndNoteInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "qualityControlId":
			var err error
			it.QualityControlID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error
			it.Category, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requestType":
			var err error
			it.RequestType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSaveReviewInput(ctx context.Context, obj interface{}) (models.SaveReviewInput, error) {
	var it models.SaveReviewInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "pipelineId":
			var err error
			it.PipelineID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewDescription":
			var err error
			it.ReviewDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachment":
			var err error
			it.Attachment, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSaveUserInput(ctx context.Context, obj interface{}) (models.SaveUserInput, error) {
	var it models.SaveUserInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "roles":
			var err error
			it.Roles, err = ec.unmarshalNString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error
			it.City, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error
			it.State, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "zipCode":
			var err error
			it.ZipCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionGroupId":
			var err error
			it.PermissionGroupID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isEnableEmailNotification":
			var err error
			it.IsEnableEmailNotification, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSessionFilterInput(ctx context.Context, obj interface{}) (models.SessionFilterInput, error) {
	var it models.SessionFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateBillingInput(ctx context.Context, obj interface{}) (models.UpdateBillingInput, error) {
	var it models.UpdateBillingInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "invoiceNumber":
			var err error
			it.InvoiceNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "date":
			var err error
			it.Date, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateFrom":
			var err error
			it.DateFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateTo":
			var err error
			it.DateTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dueDate":
			var err error
			it.DueDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entries":
			var err error
			it.Entries, err = ec.unmarshalOBillingEntryInput2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntryInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEmailTemplateInput(ctx context.Context, obj interface{}) (models.UpdateEmailTemplateInput, error) {
	var it models.UpdateEmailTemplateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "template":
			var err error
			it.Template, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "subject":
			var err error
			it.Subject, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIformInput(ctx context.Context, obj interface{}) (models.UpdateIformInput, error) {
	var it models.UpdateIformInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "formType":
			var err error
			it.FormType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtClient":
			var err error
			it.TxtClient, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCompany":
			var err error
			it.TxtCompany, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtOrderNumber":
			var err error
			it.TxtOrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbOrderType":
			var err error
			it.CmbOrderType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtAddress":
			var err error
			it.TxtAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtLocation":
			var err error
			it.TxtLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtBrokerChecker":
			var err error
			it.TxtBrokerChecker, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoAgent":
			var err error
			it.TxtPreparerInfoAgent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoAgentLicense":
			var err error
			it.TxtPreparerInfoAgentLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoBroker":
			var err error
			it.TxtPreparerInfoBroker, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoBrokerLicense":
			var err error
			it.TxtPreparerInfoBrokerLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoAddress":
			var err error
			it.TxtPreparerInfoAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoBrokerage":
			var err error
			it.TxtPreparerInfoBrokerage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoAgentCompany":
			var err error
			it.TxtPreparerInfoAgentCompany, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoPhone":
			var err error
			it.TxtPreparerInfoPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoYearsOfExperience":
			var err error
			it.TxtPreparerInfoYearsOfExperience, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoEmail":
			var err error
			it.TxtPreparerInfoEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectAddress":
			var err error
			it.TxtSubjectAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoMilesAwayFromSubject":
			var err error
			it.TxtPreparerInfoMilesAwayFromSubject, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtAgentZip":
			var err error
			it.TxtAgentZip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtAgentCity":
			var err error
			it.TxtAgentCity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtAgentState":
			var err error
			it.TxtAgentState, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtDisclaimer":
			var err error
			it.TxtDisclaimer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbLocation":
			var err error
			it.CmbLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCounty":
			var err error
			it.TxtCounty, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtTrullia":
			var err error
			it.TxtTrullia, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtZillow":
			var err error
			it.TxtZillow, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtFindcompsnow":
			var err error
			it.TxtFindcompsnow, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtAverage":
			var err error
			it.TxtAverage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbForm":
			var err error
			it.CmbForm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbForm2":
			var err error
			it.CmbForm2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Address":
			var err error
			it.TxtSaleComp1Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Address":
			var err error
			it.TxtSaleComp2Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Address":
			var err error
			it.TxtSaleComp3Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Address":
			var err error
			it.TxtListComp1Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Address":
			var err error
			it.TxtListComp2Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Address":
			var err error
			it.TxtListComp3Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectState":
			var err error
			it.TxtSubjectState, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1State":
			var err error
			it.TxtSaleComp1State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2State":
			var err error
			it.TxtSaleComp2State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3State":
			var err error
			it.TxtSaleComp3State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1State":
			var err error
			it.TxtListComp1State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2State":
			var err error
			it.TxtListComp2State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3State":
			var err error
			it.TxtListComp3State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectCity":
			var err error
			it.TxtSubjectCity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1City":
			var err error
			it.TxtSaleComp1City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2City":
			var err error
			it.TxtSaleComp2City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3City":
			var err error
			it.TxtSaleComp3City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1City":
			var err error
			it.TxtListComp1City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2City":
			var err error
			it.TxtListComp2City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3City":
			var err error
			it.TxtListComp3City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectnoUnit":
			var err error
			it.TxtSubjectnoUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectUnitNo":
			var err error
			it.TxtSubjectUnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1noUnit":
			var err error
			it.TxtSaleComp1noUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1UnitNo":
			var err error
			it.TxtSaleComp1UnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2noUnit":
			var err error
			it.TxtSaleComp2noUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2UnitNo":
			var err error
			it.TxtSaleComp2UnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3noUnit":
			var err error
			it.TxtSaleComp3noUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3UnitNo":
			var err error
			it.TxtSaleComp3UnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1noUnit":
			var err error
			it.TxtListComp1noUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1UnitNo":
			var err error
			it.TxtListComp1UnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2noUnit":
			var err error
			it.TxtListComp2noUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2UnitNo":
			var err error
			it.TxtListComp2UnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3noUnit":
			var err error
			it.TxtListComp3noUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3UnitNo":
			var err error
			it.TxtListComp3UnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectUnits":
			var err error
			it.TxtSubjectUnits, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Units":
			var err error
			it.TxtSaleComp1Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Units":
			var err error
			it.TxtSaleComp2Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Units":
			var err error
			it.TxtSaleComp3Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Units":
			var err error
			it.TxtListComp1Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Units":
			var err error
			it.TxtListComp2Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Units":
			var err error
			it.TxtListComp3Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectZip":
			var err error
			it.TxtSubjectZip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Zip":
			var err error
			it.TxtSaleComp1Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Zip":
			var err error
			it.TxtSaleComp2Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Zip":
			var err error
			it.TxtSaleComp3Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Zip":
			var err error
			it.TxtListComp1Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Zip":
			var err error
			it.TxtListComp2Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Zip":
			var err error
			it.TxtListComp3Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectProximity":
			var err error
			it.TxtSubjectProximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Proximity":
			var err error
			it.TxtSaleComp1Proximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Proximity":
			var err error
			it.TxtSaleComp2Proximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Proximity":
			var err error
			it.TxtSaleComp3Proximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Proximity":
			var err error
			it.TxtListComp1Proximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Proximity":
			var err error
			it.TxtListComp2Proximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Proximity":
			var err error
			it.TxtListComp3Proximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectDataSource":
			var err error
			it.TxtSubjectDataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1DataSource":
			var err error
			it.TxtSaleComp1DataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2DataSource":
			var err error
			it.TxtSaleComp2DataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3DataSource":
			var err error
			it.TxtSaleComp3DataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1DataSource":
			var err error
			it.TxtListComp1DataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2DataSource":
			var err error
			it.TxtListComp2DataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3DataSource":
			var err error
			it.TxtListComp3DataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectMLSNumber":
			var err error
			it.TxtSubjectMLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1MLSNumber":
			var err error
			it.TxtSaleComp1MLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2MLSNumber":
			var err error
			it.TxtSaleComp2MLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3MLSNumber":
			var err error
			it.TxtSaleComp3MLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1MLSNumber":
			var err error
			it.TxtListComp1MLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2MLSNumber":
			var err error
			it.TxtListComp2MLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3MLSNumber":
			var err error
			it.TxtListComp3MLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectSaleType":
			var err error
			it.CmbSubjectSaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1SaleType":
			var err error
			it.CmbSaleComp1SaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2SaleType":
			var err error
			it.CmbSaleComp2SaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3SaleType":
			var err error
			it.CmbSaleComp3SaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1SaleType":
			var err error
			it.CmbListComp1SaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2SaleType":
			var err error
			it.CmbListComp2SaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3SaleType":
			var err error
			it.CmbListComp3SaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectType":
			var err error
			it.CmbSubjectType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Type":
			var err error
			it.CmbSaleComp1Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Type":
			var err error
			it.CmbSaleComp2Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Type":
			var err error
			it.CmbSaleComp3Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Type":
			var err error
			it.CmbListComp1Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Type":
			var err error
			it.CmbListComp2Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Type":
			var err error
			it.CmbListComp3Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectStyle":
			var err error
			it.CmbSubjectStyle, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Style":
			var err error
			it.CmbSaleComp1Style, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1StyleAdjBuiltIn":
			var err error
			it.TxtSaleComp1StyleAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Style":
			var err error
			it.CmbSaleComp2Style, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2StyleAdjBuiltIn":
			var err error
			it.TxtSaleComp2StyleAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Style":
			var err error
			it.CmbSaleComp3Style, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3StyleAdjBuiltIn":
			var err error
			it.TxtSaleComp3StyleAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Style":
			var err error
			it.CmbListComp1Style, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1StyleAdjBuiltIn":
			var err error
			it.TxtListComp1StyleAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Style":
			var err error
			it.CmbListComp2Style, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2StyleAdjBuiltIn":
			var err error
			it.TxtListComp2StyleAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Style":
			var err error
			it.CmbListComp3Style, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3StyleAdjBuiltIn":
			var err error
			it.TxtListComp3StyleAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectExtFinish":
			var err error
			it.CmbSubjectExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1ExtFinish":
			var err error
			it.CmbSaleComp1ExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1ExtFinishAdjBuiltIn":
			var err error
			it.TxtSaleComp1ExtFinishAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2ExtFinish":
			var err error
			it.CmbSaleComp2ExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2ExtFinishAdjBuiltIn":
			var err error
			it.TxtSaleComp2ExtFinishAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3ExtFinish":
			var err error
			it.CmbSaleComp3ExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3ExtFinishAdjBuiltIn":
			var err error
			it.TxtSaleComp3ExtFinishAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1ExtFinish":
			var err error
			it.CmbListComp1ExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1ExtFinishAdjBuiltIn":
			var err error
			it.TxtListComp1ExtFinishAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2ExtFinish":
			var err error
			it.CmbListComp2ExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2ExtFinishAdjBuiltIn":
			var err error
			it.TxtListComp2ExtFinishAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3ExtFinish":
			var err error
			it.CmbListComp3ExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3ExtFinishAdjBuiltIn":
			var err error
			it.TxtListComp3ExtFinishAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectCondition":
			var err error
			it.CmbSubjectCondition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Condition":
			var err error
			it.CmbSaleComp1Condition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1ConditionAdjBuiltIn":
			var err error
			it.TxtSaleComp1ConditionAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Condition":
			var err error
			it.CmbSaleComp2Condition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2ConditionAdjBuiltIn":
			var err error
			it.TxtSaleComp2ConditionAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Condition":
			var err error
			it.CmbSaleComp3Condition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3ConditionAdjBuiltIn":
			var err error
			it.TxtSaleComp3ConditionAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Condition":
			var err error
			it.CmbListComp1Condition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1ConditionAdjBuiltIn":
			var err error
			it.TxtListComp1ConditionAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Condition":
			var err error
			it.CmbListComp2Condition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2ConditionAdjBuiltIn":
			var err error
			it.TxtListComp2ConditionAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Condition":
			var err error
			it.CmbListComp3Condition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3ConditionAdjBuiltIn":
			var err error
			it.TxtListComp3ConditionAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectQuality":
			var err error
			it.CmbSubjectQuality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Quality":
			var err error
			it.CmbSaleComp1Quality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1QualityAdjBuiltIn":
			var err error
			it.TxtSaleComp1QualityAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Quality":
			var err error
			it.CmbSaleComp2Quality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2QualityAdjBuiltIn":
			var err error
			it.TxtSaleComp2QualityAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Quality":
			var err error
			it.CmbSaleComp3Quality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3QualityAdjBuiltIn":
			var err error
			it.TxtSaleComp3QualityAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Quality":
			var err error
			it.CmbListComp1Quality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1QualityAdjBuiltIn":
			var err error
			it.TxtListComp1QualityAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Quality":
			var err error
			it.CmbListComp2Quality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2QualityAdjBuiltIn":
			var err error
			it.TxtListComp2QualityAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Quality":
			var err error
			it.CmbListComp3Quality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3QualityAdjBuiltIn":
			var err error
			it.TxtListComp3QualityAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectView":
			var err error
			it.CmbSubjectView, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1View":
			var err error
			it.CmbSaleComp1View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1ViewAdjBuiltIn":
			var err error
			it.TxtSaleComp1ViewAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2View":
			var err error
			it.CmbSaleComp2View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2ViewAdjBuiltIn":
			var err error
			it.TxtSaleComp2ViewAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3View":
			var err error
			it.CmbSaleComp3View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3ViewAdjBuiltIn":
			var err error
			it.TxtSaleComp3ViewAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1View":
			var err error
			it.CmbListComp1View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1ViewAdjBuiltIn":
			var err error
			it.TxtListComp1ViewAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2View":
			var err error
			it.CmbListComp2View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2ViewAdjBuiltIn":
			var err error
			it.TxtListComp2ViewAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3View":
			var err error
			it.CmbListComp3View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3ViewAdjBuiltIn":
			var err error
			it.TxtListComp3ViewAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectSubdivision":
			var err error
			it.TxtSubjectSubdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Subdivision":
			var err error
			it.TxtSaleComp1Subdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Subdivision":
			var err error
			it.TxtSaleComp2Subdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Subdivision":
			var err error
			it.TxtSaleComp3Subdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Subdivision":
			var err error
			it.TxtListComp1Subdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Subdivision":
			var err error
			it.TxtListComp2Subdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Subdivision":
			var err error
			it.TxtListComp3Subdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectHOAFee":
			var err error
			it.TxtSubjectHOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1HOAFee":
			var err error
			it.TxtSaleComp1HOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2HOAFee":
			var err error
			it.TxtSaleComp2HOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3HOAFee":
			var err error
			it.TxtSaleComp3HOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1HOAFee":
			var err error
			it.TxtListComp1HOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2HOAFee":
			var err error
			it.TxtListComp2HOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3HOAFee":
			var err error
			it.TxtListComp3HOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectTotalRooms":
			var err error
			it.TxtSubjectTotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1TotalRooms":
			var err error
			it.TxtSaleComp1TotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1TotalRoomsAdjBuiltIn":
			var err error
			it.TxtSaleComp1TotalRoomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2TotalRooms":
			var err error
			it.TxtSaleComp2TotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2TotalRoomsAdjBuiltIn":
			var err error
			it.TxtSaleComp2TotalRoomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3TotalRooms":
			var err error
			it.TxtSaleComp3TotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3TotalRoomsAdjBuiltIn":
			var err error
			it.TxtSaleComp3TotalRoomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1TotalRooms":
			var err error
			it.TxtListComp1TotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1TotalRoomsAdjBuiltIn":
			var err error
			it.TxtListComp1TotalRoomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2TotalRooms":
			var err error
			it.TxtListComp2TotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2TotalRoomsAdjBuiltIn":
			var err error
			it.TxtListComp2TotalRoomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3TotalRooms":
			var err error
			it.TxtListComp3TotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3TotalRoomsAdjBuiltIn":
			var err error
			it.TxtListComp3TotalRoomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectBedrooms":
			var err error
			it.TxtSubjectBedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Bedrooms":
			var err error
			it.TxtSaleComp1Bedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1BedroomsAdjBuiltIn":
			var err error
			it.TxtSaleComp1BedroomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Bedrooms":
			var err error
			it.TxtSaleComp2Bedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2BedroomsAdjBuiltIn":
			var err error
			it.TxtSaleComp2BedroomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Bedrooms":
			var err error
			it.TxtSaleComp3Bedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3BedroomsAdjBuiltIn":
			var err error
			it.TxtSaleComp3BedroomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Bedrooms":
			var err error
			it.TxtListComp1Bedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1BedroomsAdjBuiltIn":
			var err error
			it.TxtListComp1BedroomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Bedrooms":
			var err error
			it.TxtListComp2Bedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2BedroomsAdjBuiltIn":
			var err error
			it.TxtListComp2BedroomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Bedrooms":
			var err error
			it.TxtListComp3Bedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3BedroomsAdjBuiltIn":
			var err error
			it.TxtListComp3BedroomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectFullBaths":
			var err error
			it.TxtSubjectFullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1FullBaths":
			var err error
			it.TxtSaleComp1FullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1FullBathsAdjBuiltIn":
			var err error
			it.TxtSaleComp1FullBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2FullBaths":
			var err error
			it.TxtSaleComp2FullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2FullBathsAdjBuiltIn":
			var err error
			it.TxtSaleComp2FullBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3FullBaths":
			var err error
			it.TxtSaleComp3FullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3FullBathsAdjBuiltIn":
			var err error
			it.TxtSaleComp3FullBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1FullBaths":
			var err error
			it.TxtListComp1FullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1FullBathsAdjBuiltIn":
			var err error
			it.TxtListComp1FullBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2FullBaths":
			var err error
			it.TxtListComp2FullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2FullBathsAdjBuiltIn":
			var err error
			it.TxtListComp2FullBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3FullBaths":
			var err error
			it.TxtListComp3FullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3FullBathsAdjBuiltIn":
			var err error
			it.TxtListComp3FullBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectHalfBaths":
			var err error
			it.TxtSubjectHalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1HalfBaths":
			var err error
			it.TxtSaleComp1HalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1HalfBathsAdjBuiltIn":
			var err error
			it.TxtSaleComp1HalfBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2HalfBaths":
			var err error
			it.TxtSaleComp2HalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2HalfBathsAdjBuiltIn":
			var err error
			it.TxtSaleComp2HalfBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3HalfBaths":
			var err error
			it.TxtSaleComp3HalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3HalfBathsAdjBuiltIn":
			var err error
			it.TxtSaleComp3HalfBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1HalfBaths":
			var err error
			it.TxtListComp1HalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1HalfBathsAdjBuiltIn":
			var err error
			it.TxtListComp1HalfBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2HalfBaths":
			var err error
			it.TxtListComp2HalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2HalfBathsAdjBuiltIn":
			var err error
			it.TxtListComp2HalfBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3HalfBaths":
			var err error
			it.TxtListComp3HalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3HalfBathsAdjBuiltIn":
			var err error
			it.TxtListComp3HalfBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectGLA":
			var err error
			it.TxtSubjectGla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1GLA":
			var err error
			it.TxtSaleComp1gla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1GLAAdjBuiltIn":
			var err error
			it.TxtSaleComp1GLAAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2GLA":
			var err error
			it.TxtSaleComp2gla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2GLAAdjBuiltIn":
			var err error
			it.TxtSaleComp2GLAAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3GLA":
			var err error
			it.TxtSaleComp3gla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3GLAAdjBuiltIn":
			var err error
			it.TxtSaleComp3GLAAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1GLA":
			var err error
			it.TxtListComp1gla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1GLAAdjBuiltIn":
			var err error
			it.TxtListComp1GLAAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2GLA":
			var err error
			it.TxtListComp2gla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2GLAAdjBuiltIn":
			var err error
			it.TxtListComp2GLAAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3GLA":
			var err error
			it.TxtListComp3gla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3GLAAdjBuiltIn":
			var err error
			it.TxtListComp3GLAAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectYearBuilt":
			var err error
			it.TxtSubjectYearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1YearBuilt":
			var err error
			it.TxtSaleComp1YearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1YearBuiltAdjBuiltIn":
			var err error
			it.TxtSaleComp1YearBuiltAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2YearBuilt":
			var err error
			it.TxtSaleComp2YearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2YearBuiltAdjBuiltIn":
			var err error
			it.TxtSaleComp2YearBuiltAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3YearBuilt":
			var err error
			it.TxtSaleComp3YearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3YearBuiltAdjBuiltIn":
			var err error
			it.TxtSaleComp3YearBuiltAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1YearBuilt":
			var err error
			it.TxtListComp1YearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1YearBuiltAdjBuiltIn":
			var err error
			it.TxtListComp1YearBuiltAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2YearBuilt":
			var err error
			it.TxtListComp2YearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2YearBuiltAdjBuiltIn":
			var err error
			it.TxtListComp2YearBuiltAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3YearBuilt":
			var err error
			it.TxtListComp3YearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3YearBuiltAdjBuiltIn":
			var err error
			it.TxtListComp3YearBuiltAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectAge":
			var err error
			it.TxtSubjectAge, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Age":
			var err error
			it.TxtSaleComp1Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Age":
			var err error
			it.TxtSaleComp2Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Age":
			var err error
			it.TxtSaleComp3Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Age":
			var err error
			it.TxtListComp1Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Age":
			var err error
			it.TxtListComp2Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Age":
			var err error
			it.TxtListComp3Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectAcres":
			var err error
			it.TxtSubjectAcres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Acres":
			var err error
			it.TxtSaleComp1Acres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1AcresAdjBuiltIn":
			var err error
			it.TxtSaleComp1AcresAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Acres":
			var err error
			it.TxtSaleComp2Acres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2AcresAdjBuiltIn":
			var err error
			it.TxtSaleComp2AcresAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Acres":
			var err error
			it.TxtSaleComp3Acres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3AcresAdjBuiltIn":
			var err error
			it.TxtSaleComp3AcresAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Acres":
			var err error
			it.TxtListComp1Acres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1AcresAdjBuiltIn":
			var err error
			it.TxtListComp1AcresAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Acres":
			var err error
			it.TxtListComp2Acres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2AcresAdjBuiltIn":
			var err error
			it.TxtListComp2AcresAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Acres":
			var err error
			it.TxtListComp3Acres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3AcresAdjBuiltIn":
			var err error
			it.TxtListComp3AcresAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectSquareFeet":
			var err error
			it.TxtSubjectSquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1SquareFeet":
			var err error
			it.TxtSaleComp1SquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2SquareFeet":
			var err error
			it.TxtSaleComp2SquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3SquareFeet":
			var err error
			it.TxtSaleComp3SquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1SquareFeet":
			var err error
			it.TxtListComp1SquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2SquareFeet":
			var err error
			it.TxtListComp2SquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3SquareFeet":
			var err error
			it.TxtListComp3SquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectGarage":
			var err error
			it.CmbSubjectGarage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Garage":
			var err error
			it.CmbSaleComp1Garage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1GarageAdjBuiltIn":
			var err error
			it.TxtSaleComp1GarageAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Garage":
			var err error
			it.CmbSaleComp2Garage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2GarageAdjBuiltIn":
			var err error
			it.TxtSaleComp2GarageAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Garage":
			var err error
			it.CmbSaleComp3Garage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3GarageAdjBuiltIn":
			var err error
			it.TxtSaleComp3GarageAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Garage":
			var err error
			it.CmbListComp1Garage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1GarageAdjBuiltIn":
			var err error
			it.TxtListComp1GarageAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Garage":
			var err error
			it.CmbListComp2Garage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2GarageAdjBuiltIn":
			var err error
			it.TxtListComp2GarageAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Garage":
			var err error
			it.CmbListComp3Garage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3GarageAdjBuiltIn":
			var err error
			it.TxtListComp3GarageAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectPool":
			var err error
			it.CmbSubjectPool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Pool":
			var err error
			it.CmbSaleComp1Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1PoolAdjBuiltIn":
			var err error
			it.TxtSaleComp1PoolAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Pool":
			var err error
			it.CmbSaleComp2Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2PoolAdjBuiltIn":
			var err error
			it.TxtSaleComp2PoolAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Pool":
			var err error
			it.CmbSaleComp3Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3PoolAdjBuiltIn":
			var err error
			it.TxtSaleComp3PoolAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Pool":
			var err error
			it.CmbListComp1Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1PoolAdjBuiltIn":
			var err error
			it.TxtListComp1PoolAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Pool":
			var err error
			it.CmbListComp2Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2PoolAdjBuiltIn":
			var err error
			it.TxtListComp2PoolAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Pool":
			var err error
			it.CmbListComp3Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3PoolAdjBuiltIn":
			var err error
			it.TxtListComp3PoolAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectPorchPatioDeck":
			var err error
			it.CmbSubjectPorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1PorchPatioDeck":
			var err error
			it.CmbSaleComp1PorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1PorchPatioDeckAdjBuiltIn":
			var err error
			it.TxtSaleComp1PorchPatioDeckAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2PorchPatioDeck":
			var err error
			it.CmbSaleComp2PorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2PorchPatioDeckAdjBuiltIn":
			var err error
			it.TxtSaleComp2PorchPatioDeckAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3PorchPatioDeck":
			var err error
			it.CmbSaleComp3PorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3PorchPatioDeckAdjBuiltIn":
			var err error
			it.TxtSaleComp3PorchPatioDeckAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1PorchPatioDeck":
			var err error
			it.CmbListComp1PorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1PorchPatioDeckAdjBuiltIn":
			var err error
			it.TxtListComp1PorchPatioDeckAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2PorchPatioDeck":
			var err error
			it.CmbListComp2PorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2PorchPatioDeckAdjBuiltIn":
			var err error
			it.TxtListComp2PorchPatioDeckAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3PorchPatioDeck":
			var err error
			it.CmbListComp3PorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3PorchPatioDeckAdjBuiltIn":
			var err error
			it.TxtListComp3PorchPatioDeckAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectFireplace":
			var err error
			it.CmbSubjectFireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Fireplace":
			var err error
			it.CmbSaleComp1Fireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1FireplaceAdjBuiltIn":
			var err error
			it.TxtSaleComp1FireplaceAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Fireplace":
			var err error
			it.CmbSaleComp2Fireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2FireplaceAdjBuiltIn":
			var err error
			it.TxtSaleComp2FireplaceAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Fireplace":
			var err error
			it.CmbSaleComp3Fireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3FireplaceAdjBuiltIn":
			var err error
			it.TxtSaleComp3FireplaceAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Fireplace":
			var err error
			it.CmbListComp1Fireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1FireplaceAdjBuiltIn":
			var err error
			it.TxtListComp1FireplaceAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Fireplace":
			var err error
			it.CmbListComp2Fireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2FireplaceAdjBuiltIn":
			var err error
			it.TxtListComp2FireplaceAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Fireplace":
			var err error
			it.CmbListComp3Fireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3FireplaceAdjBuiltIn":
			var err error
			it.TxtListComp3FireplaceAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectBasement":
			var err error
			it.CmbSubjectBasement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Basement":
			var err error
			it.CmbSaleComp1Basement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1BasementAdjBuiltIn":
			var err error
			it.TxtSaleComp1BasementAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Basement":
			var err error
			it.CmbSaleComp2Basement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2BasementAdjBuiltIn":
			var err error
			it.TxtSaleComp2BasementAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Basement":
			var err error
			it.CmbSaleComp3Basement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3BasementAdjBuiltIn":
			var err error
			it.TxtSaleComp3BasementAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Basement":
			var err error
			it.CmbListComp1Basement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1BasementAdjBuiltIn":
			var err error
			it.TxtListComp1BasementAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Basement":
			var err error
			it.CmbListComp2Basement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2BasementAdjBuiltIn":
			var err error
			it.TxtListComp2BasementAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Basement":
			var err error
			it.CmbListComp3Basement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3BasementAdjBuiltIn":
			var err error
			it.TxtListComp3BasementAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectIsFinished":
			var err error
			it.CmbSubjectIsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1IsFinished":
			var err error
			it.CmbSaleComp1IsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1IsFinishedAdjBuiltIn":
			var err error
			it.TxtSaleComp1IsFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2IsFinished":
			var err error
			it.CmbSaleComp2IsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2IsFinishedAdjBuiltIn":
			var err error
			it.TxtSaleComp2IsFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3IsFinished":
			var err error
			it.CmbSaleComp3IsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3IsFinishedAdjBuiltIn":
			var err error
			it.TxtSaleComp3IsFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1IsFinished":
			var err error
			it.CmbListComp1IsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1IsFinishedAdjBuiltIn":
			var err error
			it.TxtListComp1IsFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2IsFinished":
			var err error
			it.CmbListComp2IsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2IsFinishedAdjBuiltIn":
			var err error
			it.TxtListComp2IsFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3IsFinished":
			var err error
			it.CmbListComp3IsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3IsFinishedAdjBuiltIn":
			var err error
			it.TxtListComp3IsFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectPercentFinished":
			var err error
			it.CmbSubjectPercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1PercentFinished":
			var err error
			it.CmbSaleComp1PercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1PercentFinishedAdjBuiltIn":
			var err error
			it.TxtSaleComp1PercentFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2PercentFinished":
			var err error
			it.CmbSaleComp2PercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2PercentFinishedAdjBuiltIn":
			var err error
			it.TxtSaleComp2PercentFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3PercentFinished":
			var err error
			it.CmbSaleComp3PercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3PercentFinishedAdjBuiltIn":
			var err error
			it.TxtSaleComp3PercentFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1PercentFinished":
			var err error
			it.CmbListComp1PercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1PercentFinishedAdjBuiltIn":
			var err error
			it.TxtListComp1PercentFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2PercentFinished":
			var err error
			it.CmbListComp2PercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2PercentFinishedAdjBuiltIn":
			var err error
			it.TxtListComp2PercentFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3PercentFinished":
			var err error
			it.CmbListComp3PercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3PercentFinishedAdjBuiltIn":
			var err error
			it.TxtListComp3PercentFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectBasementSqFt":
			var err error
			it.TxtSubjectBasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1BasementSqFt":
			var err error
			it.TxtSaleComp1BasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1BasementSqFtAdjBuiltIn":
			var err error
			it.TxtSaleComp1BasementSqFtAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2BasementSqFt":
			var err error
			it.TxtSaleComp2BasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2BasementSqFtAdjBuiltIn":
			var err error
			it.TxtSaleComp2BasementSqFtAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3BasementSqFt":
			var err error
			it.TxtSaleComp3BasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3BasementSqFtAdjBuiltIn":
			var err error
			it.TxtSaleComp3BasementSqFtAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1BasementSqFt":
			var err error
			it.TxtListComp1BasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1BasementSqFtAdjBuiltIn":
			var err error
			it.TxtListComp1BasementSqFtAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2BasementSqFt":
			var err error
			it.TxtListComp2BasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2BasementSqFtAdjBuiltIn":
			var err error
			it.TxtListComp2BasementSqFtAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3BasementSqFt":
			var err error
			it.TxtListComp3BasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3BasementSqFtAdjBuiltIn":
			var err error
			it.TxtListComp3BasementSqFtAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectOriginalListDate":
			var err error
			it.TxtSubjectOriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1OriginalListDate":
			var err error
			it.TxtSaleComp1OriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2OriginalListDate":
			var err error
			it.TxtSaleComp2OriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3OriginalListDate":
			var err error
			it.TxtSaleComp3OriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1OriginalListDate":
			var err error
			it.TxtListComp1OriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2OriginalListDate":
			var err error
			it.TxtListComp2OriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3OriginalListDate":
			var err error
			it.TxtListComp3OriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectCurrentListDate":
			var err error
			it.TxtSubjectCurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1CurrentListDate":
			var err error
			it.TxtSaleComp1CurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2CurrentListDate":
			var err error
			it.TxtSaleComp2CurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3CurrentListDate":
			var err error
			it.TxtSaleComp3CurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1CurrentListDate":
			var err error
			it.TxtListComp1CurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2CurrentListDate":
			var err error
			it.TxtListComp2CurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3CurrentListDate":
			var err error
			it.TxtListComp3CurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectOriginalListPrice":
			var err error
			it.TxtSubjectOriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1OriginalListPrice":
			var err error
			it.TxtSaleComp1OriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2OriginalListPrice":
			var err error
			it.TxtSaleComp2OriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3OriginalListPrice":
			var err error
			it.TxtSaleComp3OriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1OriginalListPrice":
			var err error
			it.TxtListComp1OriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2OriginalListPrice":
			var err error
			it.TxtListComp2OriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3OriginalListPrice":
			var err error
			it.TxtListComp3OriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectListPrice":
			var err error
			it.TxtSubjectListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1ListPrice":
			var err error
			it.TxtSaleComp1ListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2ListPrice":
			var err error
			it.TxtSaleComp2ListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3ListPrice":
			var err error
			it.TxtSaleComp3ListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1ListPrice":
			var err error
			it.TxtListComp1ListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2ListPrice":
			var err error
			it.TxtListComp2ListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3ListPrice":
			var err error
			it.TxtListComp3ListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectSalePrice":
			var err error
			it.TxtSubjectSalePrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1SalePrice":
			var err error
			it.TxtSaleComp1SalePrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2SalePrice":
			var err error
			it.TxtSaleComp2SalePrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3SalePrice":
			var err error
			it.TxtSaleComp3SalePrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectSaleDate":
			var err error
			it.TxtSubjectSaleDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1SaleDate":
			var err error
			it.TxtSaleComp1SaleDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2SaleDate":
			var err error
			it.TxtSaleComp2SaleDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3SaleDate":
			var err error
			it.TxtSaleComp3SaleDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectFinancing":
			var err error
			it.CmbSubjectFinancing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Financing":
			var err error
			it.CmbSaleComp1Financing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Financing":
			var err error
			it.CmbSaleComp2Financing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Financing":
			var err error
			it.CmbSaleComp3Financing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Financing":
			var err error
			it.CmbListComp1Financing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Financing":
			var err error
			it.CmbListComp2Financing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Financing":
			var err error
			it.CmbListComp3Financing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectDOM":
			var err error
			it.TxtSubjectDom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1DOM":
			var err error
			it.TxtSaleComp1dom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2DOM":
			var err error
			it.TxtSaleComp2dom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3DOM":
			var err error
			it.TxtSaleComp3dom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1DOM":
			var err error
			it.TxtListComp1dom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2DOM":
			var err error
			it.TxtListComp2dom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3DOM":
			var err error
			it.TxtListComp3dom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectPricePerSqFt":
			var err error
			it.TxtSubjectPricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1PricePerSqFt":
			var err error
			it.TxtSaleComp1PricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2PricePerSqFt":
			var err error
			it.TxtSaleComp2PricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3PricePerSqFt":
			var err error
			it.TxtSaleComp3PricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1PricePerSqFt":
			var err error
			it.TxtListComp1PricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2PricePerSqFt":
			var err error
			it.TxtListComp2PricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3PricePerSqFt":
			var err error
			it.TxtListComp3PricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectAdjustments":
			var err error
			it.TxtSubjectAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Adjustments":
			var err error
			it.TxtSaleComp1Adjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Adjustments":
			var err error
			it.TxtSaleComp2Adjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Adjustments":
			var err error
			it.TxtSaleComp3Adjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Adjustments":
			var err error
			it.TxtListComp1Adjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Adjustments":
			var err error
			it.TxtListComp2Adjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Adjustments":
			var err error
			it.TxtListComp3Adjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectCompTotals":
			var err error
			it.TxtSubjectCompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1CompTotals":
			var err error
			it.TxtSaleComp1CompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2CompTotals":
			var err error
			it.TxtSaleComp2CompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3CompTotals":
			var err error
			it.TxtSaleComp3CompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1CompTotals":
			var err error
			it.TxtListComp1CompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2CompTotals":
			var err error
			it.TxtListComp2CompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3CompTotals":
			var err error
			it.TxtListComp3CompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1CommentType":
			var err error
			it.CmbListComp1CommentType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1ComparableComments":
			var err error
			it.TxtListComp1ComparableComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1FormatAdjustments":
			var err error
			it.TxtListComp1FormatAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1MLSComments":
			var err error
			it.TxtListComp1MLSComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2CommentType":
			var err error
			it.CmbListComp2CommentType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2ComparableComments":
			var err error
			it.TxtListComp2ComparableComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2FormatAdjustments":
			var err error
			it.TxtListComp2FormatAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2MLSComments":
			var err error
			it.TxtListComp2MLSComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3CommentType":
			var err error
			it.CmbListComp3CommentType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3ComparableComments":
			var err error
			it.TxtListComp3ComparableComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3FormatAdjustments":
			var err error
			it.TxtListComp3FormatAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3MLSComments":
			var err error
			it.TxtListComp3MLSComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1CommentType":
			var err error
			it.CmbSaleComp1CommentType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1ComparableComments":
			var err error
			it.TxtSaleComp1ComparableComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1FormatAdjustments":
			var err error
			it.TxtSaleComp1FormatAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1MLSComments":
			var err error
			it.TxtSaleComp1MLSComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2CommentType":
			var err error
			it.CmbSaleComp2CommentType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2ComparableComments":
			var err error
			it.TxtSaleComp2ComparableComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2FormatAdjustments":
			var err error
			it.TxtSaleComp2FormatAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2MLSComments":
			var err error
			it.TxtSaleComp2MLSComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3CommentType":
			var err error
			it.CmbSaleComp3CommentType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3ComparableComments":
			var err error
			it.TxtSaleComp3ComparableComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3FormatAdjustments":
			var err error
			it.TxtSaleComp3FormatAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3MLSComments":
			var err error
			it.TxtSaleComp3MLSComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbNeighborhoodTrend":
			var err error
			it.CmbNeighborhoodTrend, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtMonthlyPecent":
			var err error
			it.TxtMonthlyPecent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtEstimatedRent":
			var err error
			it.TxtEstimatedRent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtEstimatedDaysOnMarket":
			var err error
			it.TxtEstimatedDaysOnMarket, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoBoarded":
			var err error
			it.TxtNoBoarded, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfActive":
			var err error
			it.TxtNoOfActive, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt6MonthPecent":
			var err error
			it.Txt6MonthPecent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtAnnualPecent":
			var err error
			it.TxtAnnualPecent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListings":
			var err error
			it.TxtListings, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSupply":
			var err error
			it.CmbSupply, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsMinValue":
			var err error
			it.TxtListingsMinValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsRange1":
			var err error
			it.TxtListingsRange1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsMedValue":
			var err error
			it.TxtListingsMedValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsMaxValue":
			var err error
			it.TxtListingsMaxValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsRange2":
			var err error
			it.TxtListingsRange2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsDOM":
			var err error
			it.TxtListingsDom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsDOMRange1":
			var err error
			it.TxtListingsDOMRange1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsDOMRange2":
			var err error
			it.TxtListingsDOMRange2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbREOTrend":
			var err error
			it.CmbREOTrend, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfFM":
			var err error
			it.TxtNoOfFm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfSS":
			var err error
			it.TxtNoOfSs, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfREO":
			var err error
			it.TxtNoOfReo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfDistressed":
			var err error
			it.TxtNoOfDistressed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSales":
			var err error
			it.TxtSales, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbDemand":
			var err error
			it.CmbDemand, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSalesRange1":
			var err error
			it.TxtSalesRange1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSalesMedValue":
			var err error
			it.TxtSalesMedValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSalesRange2":
			var err error
			it.TxtSalesRange2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSalesDOM":
			var err error
			it.TxtSalesDom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSalesDOMRange1":
			var err error
			it.TxtSalesDOMRange1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSalesDOMRange2":
			var err error
			it.TxtSalesDOMRange2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtZillowNeighborhoodTrend":
			var err error
			it.TxtZillowNeighborhoodTrend, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNeighborhoodTrendComments":
			var err error
			it.TxtNeighborhoodTrendComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtTotalListings":
			var err error
			it.TxtTotalListings, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtTotalSales":
			var err error
			it.TxtTotalSales, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfREOListings":
			var err error
			it.TxtNoOfREOListings, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfSSListings":
			var err error
			it.TxtNoOfSSListings, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfREOSales":
			var err error
			it.TxtNoOfREOSales, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfSSSales":
			var err error
			it.TxtNoOfSSSales, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtTaxID":
			var err error
			it.TxtTaxID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtLastSaleDate":
			var err error
			it.TxtLastSaleDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtLastSalePrice":
			var err error
			it.TxtLastSalePrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbIsListed":
			var err error
			it.CmbIsListed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtOwnerOccupied":
			var err error
			it.TxtOwnerOccupied, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtRenterOccupied":
			var err error
			it.TxtRenterOccupied, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtMarketRent":
			var err error
			it.TxtMarketRent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfRentals":
			var err error
			it.TxtNoOfRentals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtTypicalDOM":
			var err error
			it.TxtTypicalDom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoRentHomes":
			var err error
			it.TxtNoRentHomes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtTypicalRentalRates":
			var err error
			it.TxtTypicalRentalRates, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "adjustmentPrice":
			var err error
			it.AdjustmentPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedGLA":
			var err error
			it.TxtCalculatedGla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedAge":
			var err error
			it.TxtCalculatedAge, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedSaleDates":
			var err error
			it.TxtCalculatedSaleDates, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedProximity":
			var err error
			it.TxtCalculatedProximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedStyle":
			var err error
			it.TxtCalculatedStyle, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedMonthsSupply":
			var err error
			it.TxtCalculatedMonthsSupply, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedProxim":
			var err error
			it.TxtCalculatedProxim, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedGLAs":
			var err error
			it.TxtCalculatedGLAs, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedAges":
			var err error
			it.TxtCalculatedAges, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedCond":
			var err error
			it.TxtCalculatedCond, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedView":
			var err error
			it.TxtCalculatedView, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedStyle1":
			var err error
			it.TxtCalculatedStyle1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedLots":
			var err error
			it.TxtCalculatedLots, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedBeds":
			var err error
			it.TxtCalculatedBeds, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedBath":
			var err error
			it.TxtCalculatedBath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rdbresaletext":
			var err error
			it.Rdbresaletext, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rdbmarketedtext":
			var err error
			it.Rdbmarketedtext, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtpmi":
			var err error
			it.Txtpmi, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtOtherComments":
			var err error
			it.TxtOtherComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbnew":
			var err error
			it.Txtcbnew, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbold":
			var err error
			it.Txtcbold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbstyle":
			var err error
			it.Txtcbstyle, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcblot":
			var err error
			it.Txtcblot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbview":
			var err error
			it.Txtcbview, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbdamage":
			var err error
			it.Txtcbdamage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbupgrade":
			var err error
			it.Txtcbupgrade, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbinfluence":
			var err error
			it.Txtcbinfluence, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectComments":
			var err error
			it.TxtSubjectComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNeighborhoodComments":
			var err error
			it.TxtNeighborhoodComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNeighborhoodTrend":
			var err error
			it.TxtNeighborhoodTrend, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtValidation1":
			var err error
			it.TxtValidation1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtUniqueComments":
			var err error
			it.TxtUniqueComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtMarketingStrategy":
			var err error
			it.TxtMarketingStrategy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtDisclaimer2":
			var err error
			it.TxtDisclaimer2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtBrokerComments":
			var err error
			it.TxtBrokerComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtValidation":
			var err error
			it.TxtValidation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt30DayQuickSale":
			var err error
			it.Txt30DayQuickSale, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt60DayQuickSale":
			var err error
			it.Txt60DayQuickSale, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt90DayAsIsValue":
			var err error
			it.Txt90DayAsIsValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt120DayQuickSale":
			var err error
			it.Txt120DayQuickSale, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt180DayQuickSale":
			var err error
			it.Txt180DayQuickSale, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListPriceFinalValues":
			var err error
			it.TxtListPriceFinalValues, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt30DayListPriceFinalValues":
			var err error
			it.Txt30DayListPriceFinalValues, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt30DayQuickSaleRepaired":
			var err error
			it.Txt30DayQuickSaleRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt60DayQuickSaleRepaired":
			var err error
			it.Txt60DayQuickSaleRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt90DayAsIsValueRepaired":
			var err error
			it.Txt90DayAsIsValueRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt120DayQuickSaleRepaired":
			var err error
			it.Txt120DayQuickSaleRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt180DayQuickSaleRepaired":
			var err error
			it.Txt180DayQuickSaleRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListPriceRepaired":
			var err error
			it.TxtListPriceRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt30DayListPriceRepaired":
			var err error
			it.Txt30DayListPriceRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbHouse":
			var err error
			it.CmbHouse, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbPositive":
			var err error
			it.CmbPositive, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbNegative":
			var err error
			it.CmbNegative, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbView":
			var err error
			it.CmbView, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbMarket":
			var err error
			it.CmbMarket, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbPricing":
			var err error
			it.CmbPricing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListing":
			var err error
			it.CmbListing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbExtra":
			var err error
			it.CmbExtra, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtUnique":
			var err error
			it.TxtUnique, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "priceComment":
			var err error
			it.PriceComment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rangeComment":
			var err error
			it.RangeComment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxException":
			var err error
			it.ProxException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "glaException":
			var err error
			it.GlaException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ageException":
			var err error
			it.AgeException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "condException":
			var err error
			it.CondException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "viewException":
			var err error
			it.ViewException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "styleException":
			var err error
			it.StyleException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lotException":
			var err error
			it.LotException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "bedException":
			var err error
			it.BedException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "bathException":
			var err error
			it.BathException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIformTempInput(ctx context.Context, obj interface{}) (models.UpdateIformTempInput, error) {
	var it models.UpdateIformTempInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "formType":
			var err error
			it.FormType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtClient":
			var err error
			it.TxtClient, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCompany":
			var err error
			it.TxtCompany, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtOrderNumber":
			var err error
			it.TxtOrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbOrderType":
			var err error
			it.CmbOrderType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtAddress":
			var err error
			it.TxtAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtLocation":
			var err error
			it.TxtLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtBrokerChecker":
			var err error
			it.TxtBrokerChecker, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoAgent":
			var err error
			it.TxtPreparerInfoAgent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoAgentLicense":
			var err error
			it.TxtPreparerInfoAgentLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoBroker":
			var err error
			it.TxtPreparerInfoBroker, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoBrokerLicense":
			var err error
			it.TxtPreparerInfoBrokerLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoAddress":
			var err error
			it.TxtPreparerInfoAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoBrokerage":
			var err error
			it.TxtPreparerInfoBrokerage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoAgentCompany":
			var err error
			it.TxtPreparerInfoAgentCompany, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoPhone":
			var err error
			it.TxtPreparerInfoPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoYearsOfExperience":
			var err error
			it.TxtPreparerInfoYearsOfExperience, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoEmail":
			var err error
			it.TxtPreparerInfoEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectAddress":
			var err error
			it.TxtSubjectAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtPreparerInfoMilesAwayFromSubject":
			var err error
			it.TxtPreparerInfoMilesAwayFromSubject, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtAgentZip":
			var err error
			it.TxtAgentZip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtAgentCity":
			var err error
			it.TxtAgentCity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtAgentState":
			var err error
			it.TxtAgentState, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtDisclaimer":
			var err error
			it.TxtDisclaimer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbLocation":
			var err error
			it.CmbLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCounty":
			var err error
			it.TxtCounty, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtTrullia":
			var err error
			it.TxtTrullia, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtZillow":
			var err error
			it.TxtZillow, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtFindcompsnow":
			var err error
			it.TxtFindcompsnow, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtAverage":
			var err error
			it.TxtAverage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbForm":
			var err error
			it.CmbForm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbForm2":
			var err error
			it.CmbForm2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Address":
			var err error
			it.TxtSaleComp1Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Address":
			var err error
			it.TxtSaleComp2Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Address":
			var err error
			it.TxtSaleComp3Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Address":
			var err error
			it.TxtListComp1Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Address":
			var err error
			it.TxtListComp2Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Address":
			var err error
			it.TxtListComp3Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectState":
			var err error
			it.TxtSubjectState, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1State":
			var err error
			it.TxtSaleComp1State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2State":
			var err error
			it.TxtSaleComp2State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3State":
			var err error
			it.TxtSaleComp3State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1State":
			var err error
			it.TxtListComp1State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2State":
			var err error
			it.TxtListComp2State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3State":
			var err error
			it.TxtListComp3State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectCity":
			var err error
			it.TxtSubjectCity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1City":
			var err error
			it.TxtSaleComp1City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2City":
			var err error
			it.TxtSaleComp2City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3City":
			var err error
			it.TxtSaleComp3City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1City":
			var err error
			it.TxtListComp1City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2City":
			var err error
			it.TxtListComp2City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3City":
			var err error
			it.TxtListComp3City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectnoUnit":
			var err error
			it.TxtSubjectnoUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectUnitNo":
			var err error
			it.TxtSubjectUnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1noUnit":
			var err error
			it.TxtSaleComp1noUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1UnitNo":
			var err error
			it.TxtSaleComp1UnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2noUnit":
			var err error
			it.TxtSaleComp2noUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2UnitNo":
			var err error
			it.TxtSaleComp2UnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3noUnit":
			var err error
			it.TxtSaleComp3noUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3UnitNo":
			var err error
			it.TxtSaleComp3UnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1noUnit":
			var err error
			it.TxtListComp1noUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1UnitNo":
			var err error
			it.TxtListComp1UnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2noUnit":
			var err error
			it.TxtListComp2noUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2UnitNo":
			var err error
			it.TxtListComp2UnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3noUnit":
			var err error
			it.TxtListComp3noUnit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3UnitNo":
			var err error
			it.TxtListComp3UnitNo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectUnits":
			var err error
			it.TxtSubjectUnits, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Units":
			var err error
			it.TxtSaleComp1Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Units":
			var err error
			it.TxtSaleComp2Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Units":
			var err error
			it.TxtSaleComp3Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Units":
			var err error
			it.TxtListComp1Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Units":
			var err error
			it.TxtListComp2Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Units":
			var err error
			it.TxtListComp3Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectZip":
			var err error
			it.TxtSubjectZip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Zip":
			var err error
			it.TxtSaleComp1Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Zip":
			var err error
			it.TxtSaleComp2Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Zip":
			var err error
			it.TxtSaleComp3Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Zip":
			var err error
			it.TxtListComp1Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Zip":
			var err error
			it.TxtListComp2Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Zip":
			var err error
			it.TxtListComp3Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectProximity":
			var err error
			it.TxtSubjectProximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Proximity":
			var err error
			it.TxtSaleComp1Proximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Proximity":
			var err error
			it.TxtSaleComp2Proximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Proximity":
			var err error
			it.TxtSaleComp3Proximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Proximity":
			var err error
			it.TxtListComp1Proximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Proximity":
			var err error
			it.TxtListComp2Proximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Proximity":
			var err error
			it.TxtListComp3Proximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectDataSource":
			var err error
			it.TxtSubjectDataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1DataSource":
			var err error
			it.TxtSaleComp1DataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2DataSource":
			var err error
			it.TxtSaleComp2DataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3DataSource":
			var err error
			it.TxtSaleComp3DataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1DataSource":
			var err error
			it.TxtListComp1DataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2DataSource":
			var err error
			it.TxtListComp2DataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3DataSource":
			var err error
			it.TxtListComp3DataSource, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectMLSNumber":
			var err error
			it.TxtSubjectMLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1MLSNumber":
			var err error
			it.TxtSaleComp1MLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2MLSNumber":
			var err error
			it.TxtSaleComp2MLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3MLSNumber":
			var err error
			it.TxtSaleComp3MLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1MLSNumber":
			var err error
			it.TxtListComp1MLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2MLSNumber":
			var err error
			it.TxtListComp2MLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3MLSNumber":
			var err error
			it.TxtListComp3MLSNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectSaleType":
			var err error
			it.CmbSubjectSaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1SaleType":
			var err error
			it.CmbSaleComp1SaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2SaleType":
			var err error
			it.CmbSaleComp2SaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3SaleType":
			var err error
			it.CmbSaleComp3SaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1SaleType":
			var err error
			it.CmbListComp1SaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2SaleType":
			var err error
			it.CmbListComp2SaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3SaleType":
			var err error
			it.CmbListComp3SaleType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectType":
			var err error
			it.CmbSubjectType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Type":
			var err error
			it.CmbSaleComp1Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Type":
			var err error
			it.CmbSaleComp2Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Type":
			var err error
			it.CmbSaleComp3Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Type":
			var err error
			it.CmbListComp1Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Type":
			var err error
			it.CmbListComp2Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Type":
			var err error
			it.CmbListComp3Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectStyle":
			var err error
			it.CmbSubjectStyle, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Style":
			var err error
			it.CmbSaleComp1Style, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1StyleAdjBuiltIn":
			var err error
			it.TxtSaleComp1StyleAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Style":
			var err error
			it.CmbSaleComp2Style, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2StyleAdjBuiltIn":
			var err error
			it.TxtSaleComp2StyleAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Style":
			var err error
			it.CmbSaleComp3Style, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3StyleAdjBuiltIn":
			var err error
			it.TxtSaleComp3StyleAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Style":
			var err error
			it.CmbListComp1Style, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1StyleAdjBuiltIn":
			var err error
			it.TxtListComp1StyleAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Style":
			var err error
			it.CmbListComp2Style, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2StyleAdjBuiltIn":
			var err error
			it.TxtListComp2StyleAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Style":
			var err error
			it.CmbListComp3Style, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3StyleAdjBuiltIn":
			var err error
			it.TxtListComp3StyleAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectExtFinish":
			var err error
			it.CmbSubjectExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1ExtFinish":
			var err error
			it.CmbSaleComp1ExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1ExtFinishAdjBuiltIn":
			var err error
			it.TxtSaleComp1ExtFinishAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2ExtFinish":
			var err error
			it.CmbSaleComp2ExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2ExtFinishAdjBuiltIn":
			var err error
			it.TxtSaleComp2ExtFinishAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3ExtFinish":
			var err error
			it.CmbSaleComp3ExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3ExtFinishAdjBuiltIn":
			var err error
			it.TxtSaleComp3ExtFinishAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1ExtFinish":
			var err error
			it.CmbListComp1ExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1ExtFinishAdjBuiltIn":
			var err error
			it.TxtListComp1ExtFinishAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2ExtFinish":
			var err error
			it.CmbListComp2ExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2ExtFinishAdjBuiltIn":
			var err error
			it.TxtListComp2ExtFinishAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3ExtFinish":
			var err error
			it.CmbListComp3ExtFinish, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3ExtFinishAdjBuiltIn":
			var err error
			it.TxtListComp3ExtFinishAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectCondition":
			var err error
			it.CmbSubjectCondition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Condition":
			var err error
			it.CmbSaleComp1Condition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1ConditionAdjBuiltIn":
			var err error
			it.TxtSaleComp1ConditionAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Condition":
			var err error
			it.CmbSaleComp2Condition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2ConditionAdjBuiltIn":
			var err error
			it.TxtSaleComp2ConditionAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Condition":
			var err error
			it.CmbSaleComp3Condition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3ConditionAdjBuiltIn":
			var err error
			it.TxtSaleComp3ConditionAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Condition":
			var err error
			it.CmbListComp1Condition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1ConditionAdjBuiltIn":
			var err error
			it.TxtListComp1ConditionAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Condition":
			var err error
			it.CmbListComp2Condition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2ConditionAdjBuiltIn":
			var err error
			it.TxtListComp2ConditionAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Condition":
			var err error
			it.CmbListComp3Condition, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3ConditionAdjBuiltIn":
			var err error
			it.TxtListComp3ConditionAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectQuality":
			var err error
			it.CmbSubjectQuality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Quality":
			var err error
			it.CmbSaleComp1Quality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1QualityAdjBuiltIn":
			var err error
			it.TxtSaleComp1QualityAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Quality":
			var err error
			it.CmbSaleComp2Quality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2QualityAdjBuiltIn":
			var err error
			it.TxtSaleComp2QualityAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Quality":
			var err error
			it.CmbSaleComp3Quality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3QualityAdjBuiltIn":
			var err error
			it.TxtSaleComp3QualityAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Quality":
			var err error
			it.CmbListComp1Quality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1QualityAdjBuiltIn":
			var err error
			it.TxtListComp1QualityAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Quality":
			var err error
			it.CmbListComp2Quality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2QualityAdjBuiltIn":
			var err error
			it.TxtListComp2QualityAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Quality":
			var err error
			it.CmbListComp3Quality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3QualityAdjBuiltIn":
			var err error
			it.TxtListComp3QualityAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectView":
			var err error
			it.CmbSubjectView, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1View":
			var err error
			it.CmbSaleComp1View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1ViewAdjBuiltIn":
			var err error
			it.TxtSaleComp1ViewAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2View":
			var err error
			it.CmbSaleComp2View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2ViewAdjBuiltIn":
			var err error
			it.TxtSaleComp2ViewAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3View":
			var err error
			it.CmbSaleComp3View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3ViewAdjBuiltIn":
			var err error
			it.TxtSaleComp3ViewAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1View":
			var err error
			it.CmbListComp1View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1ViewAdjBuiltIn":
			var err error
			it.TxtListComp1ViewAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2View":
			var err error
			it.CmbListComp2View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2ViewAdjBuiltIn":
			var err error
			it.TxtListComp2ViewAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3View":
			var err error
			it.CmbListComp3View, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3ViewAdjBuiltIn":
			var err error
			it.TxtListComp3ViewAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectSubdivision":
			var err error
			it.TxtSubjectSubdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Subdivision":
			var err error
			it.TxtSaleComp1Subdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Subdivision":
			var err error
			it.TxtSaleComp2Subdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Subdivision":
			var err error
			it.TxtSaleComp3Subdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Subdivision":
			var err error
			it.TxtListComp1Subdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Subdivision":
			var err error
			it.TxtListComp2Subdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Subdivision":
			var err error
			it.TxtListComp3Subdivision, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectHOAFee":
			var err error
			it.TxtSubjectHOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1HOAFee":
			var err error
			it.TxtSaleComp1HOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2HOAFee":
			var err error
			it.TxtSaleComp2HOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3HOAFee":
			var err error
			it.TxtSaleComp3HOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1HOAFee":
			var err error
			it.TxtListComp1HOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2HOAFee":
			var err error
			it.TxtListComp2HOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3HOAFee":
			var err error
			it.TxtListComp3HOAFee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectTotalRooms":
			var err error
			it.TxtSubjectTotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1TotalRooms":
			var err error
			it.TxtSaleComp1TotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1TotalRoomsAdjBuiltIn":
			var err error
			it.TxtSaleComp1TotalRoomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2TotalRooms":
			var err error
			it.TxtSaleComp2TotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2TotalRoomsAdjBuiltIn":
			var err error
			it.TxtSaleComp2TotalRoomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3TotalRooms":
			var err error
			it.TxtSaleComp3TotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3TotalRoomsAdjBuiltIn":
			var err error
			it.TxtSaleComp3TotalRoomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1TotalRooms":
			var err error
			it.TxtListComp1TotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1TotalRoomsAdjBuiltIn":
			var err error
			it.TxtListComp1TotalRoomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2TotalRooms":
			var err error
			it.TxtListComp2TotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2TotalRoomsAdjBuiltIn":
			var err error
			it.TxtListComp2TotalRoomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3TotalRooms":
			var err error
			it.TxtListComp3TotalRooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3TotalRoomsAdjBuiltIn":
			var err error
			it.TxtListComp3TotalRoomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectBedrooms":
			var err error
			it.TxtSubjectBedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Bedrooms":
			var err error
			it.TxtSaleComp1Bedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1BedroomsAdjBuiltIn":
			var err error
			it.TxtSaleComp1BedroomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Bedrooms":
			var err error
			it.TxtSaleComp2Bedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2BedroomsAdjBuiltIn":
			var err error
			it.TxtSaleComp2BedroomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Bedrooms":
			var err error
			it.TxtSaleComp3Bedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3BedroomsAdjBuiltIn":
			var err error
			it.TxtSaleComp3BedroomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Bedrooms":
			var err error
			it.TxtListComp1Bedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1BedroomsAdjBuiltIn":
			var err error
			it.TxtListComp1BedroomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Bedrooms":
			var err error
			it.TxtListComp2Bedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2BedroomsAdjBuiltIn":
			var err error
			it.TxtListComp2BedroomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Bedrooms":
			var err error
			it.TxtListComp3Bedrooms, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3BedroomsAdjBuiltIn":
			var err error
			it.TxtListComp3BedroomsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectFullBaths":
			var err error
			it.TxtSubjectFullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1FullBaths":
			var err error
			it.TxtSaleComp1FullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1FullBathsAdjBuiltIn":
			var err error
			it.TxtSaleComp1FullBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2FullBaths":
			var err error
			it.TxtSaleComp2FullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2FullBathsAdjBuiltIn":
			var err error
			it.TxtSaleComp2FullBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3FullBaths":
			var err error
			it.TxtSaleComp3FullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3FullBathsAdjBuiltIn":
			var err error
			it.TxtSaleComp3FullBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1FullBaths":
			var err error
			it.TxtListComp1FullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1FullBathsAdjBuiltIn":
			var err error
			it.TxtListComp1FullBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2FullBaths":
			var err error
			it.TxtListComp2FullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2FullBathsAdjBuiltIn":
			var err error
			it.TxtListComp2FullBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3FullBaths":
			var err error
			it.TxtListComp3FullBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3FullBathsAdjBuiltIn":
			var err error
			it.TxtListComp3FullBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectHalfBaths":
			var err error
			it.TxtSubjectHalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1HalfBaths":
			var err error
			it.TxtSaleComp1HalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1HalfBathsAdjBuiltIn":
			var err error
			it.TxtSaleComp1HalfBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2HalfBaths":
			var err error
			it.TxtSaleComp2HalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2HalfBathsAdjBuiltIn":
			var err error
			it.TxtSaleComp2HalfBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3HalfBaths":
			var err error
			it.TxtSaleComp3HalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3HalfBathsAdjBuiltIn":
			var err error
			it.TxtSaleComp3HalfBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1HalfBaths":
			var err error
			it.TxtListComp1HalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1HalfBathsAdjBuiltIn":
			var err error
			it.TxtListComp1HalfBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2HalfBaths":
			var err error
			it.TxtListComp2HalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2HalfBathsAdjBuiltIn":
			var err error
			it.TxtListComp2HalfBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3HalfBaths":
			var err error
			it.TxtListComp3HalfBaths, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3HalfBathsAdjBuiltIn":
			var err error
			it.TxtListComp3HalfBathsAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectGLA":
			var err error
			it.TxtSubjectGla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1GLA":
			var err error
			it.TxtSaleComp1gla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1GLAAdjBuiltIn":
			var err error
			it.TxtSaleComp1GLAAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2GLA":
			var err error
			it.TxtSaleComp2gla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2GLAAdjBuiltIn":
			var err error
			it.TxtSaleComp2GLAAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3GLA":
			var err error
			it.TxtSaleComp3gla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3GLAAdjBuiltIn":
			var err error
			it.TxtSaleComp3GLAAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1GLA":
			var err error
			it.TxtListComp1gla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1GLAAdjBuiltIn":
			var err error
			it.TxtListComp1GLAAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2GLA":
			var err error
			it.TxtListComp2gla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2GLAAdjBuiltIn":
			var err error
			it.TxtListComp2GLAAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3GLA":
			var err error
			it.TxtListComp3gla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3GLAAdjBuiltIn":
			var err error
			it.TxtListComp3GLAAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectYearBuilt":
			var err error
			it.TxtSubjectYearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1YearBuilt":
			var err error
			it.TxtSaleComp1YearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1YearBuiltAdjBuiltIn":
			var err error
			it.TxtSaleComp1YearBuiltAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2YearBuilt":
			var err error
			it.TxtSaleComp2YearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2YearBuiltAdjBuiltIn":
			var err error
			it.TxtSaleComp2YearBuiltAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3YearBuilt":
			var err error
			it.TxtSaleComp3YearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3YearBuiltAdjBuiltIn":
			var err error
			it.TxtSaleComp3YearBuiltAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1YearBuilt":
			var err error
			it.TxtListComp1YearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1YearBuiltAdjBuiltIn":
			var err error
			it.TxtListComp1YearBuiltAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2YearBuilt":
			var err error
			it.TxtListComp2YearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2YearBuiltAdjBuiltIn":
			var err error
			it.TxtListComp2YearBuiltAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3YearBuilt":
			var err error
			it.TxtListComp3YearBuilt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3YearBuiltAdjBuiltIn":
			var err error
			it.TxtListComp3YearBuiltAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectAge":
			var err error
			it.TxtSubjectAge, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Age":
			var err error
			it.TxtSaleComp1Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Age":
			var err error
			it.TxtSaleComp2Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Age":
			var err error
			it.TxtSaleComp3Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Age":
			var err error
			it.TxtListComp1Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Age":
			var err error
			it.TxtListComp2Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Age":
			var err error
			it.TxtListComp3Age, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectAcres":
			var err error
			it.TxtSubjectAcres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Acres":
			var err error
			it.TxtSaleComp1Acres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1AcresAdjBuiltIn":
			var err error
			it.TxtSaleComp1AcresAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Acres":
			var err error
			it.TxtSaleComp2Acres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2AcresAdjBuiltIn":
			var err error
			it.TxtSaleComp2AcresAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Acres":
			var err error
			it.TxtSaleComp3Acres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3AcresAdjBuiltIn":
			var err error
			it.TxtSaleComp3AcresAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Acres":
			var err error
			it.TxtListComp1Acres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1AcresAdjBuiltIn":
			var err error
			it.TxtListComp1AcresAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Acres":
			var err error
			it.TxtListComp2Acres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2AcresAdjBuiltIn":
			var err error
			it.TxtListComp2AcresAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Acres":
			var err error
			it.TxtListComp3Acres, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3AcresAdjBuiltIn":
			var err error
			it.TxtListComp3AcresAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectSquareFeet":
			var err error
			it.TxtSubjectSquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1SquareFeet":
			var err error
			it.TxtSaleComp1SquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2SquareFeet":
			var err error
			it.TxtSaleComp2SquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3SquareFeet":
			var err error
			it.TxtSaleComp3SquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1SquareFeet":
			var err error
			it.TxtListComp1SquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2SquareFeet":
			var err error
			it.TxtListComp2SquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3SquareFeet":
			var err error
			it.TxtListComp3SquareFeet, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectGarage":
			var err error
			it.CmbSubjectGarage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Garage":
			var err error
			it.CmbSaleComp1Garage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1GarageAdjBuiltIn":
			var err error
			it.TxtSaleComp1GarageAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Garage":
			var err error
			it.CmbSaleComp2Garage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2GarageAdjBuiltIn":
			var err error
			it.TxtSaleComp2GarageAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Garage":
			var err error
			it.CmbSaleComp3Garage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3GarageAdjBuiltIn":
			var err error
			it.TxtSaleComp3GarageAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Garage":
			var err error
			it.CmbListComp1Garage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1GarageAdjBuiltIn":
			var err error
			it.TxtListComp1GarageAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Garage":
			var err error
			it.CmbListComp2Garage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2GarageAdjBuiltIn":
			var err error
			it.TxtListComp2GarageAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Garage":
			var err error
			it.CmbListComp3Garage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3GarageAdjBuiltIn":
			var err error
			it.TxtListComp3GarageAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectPool":
			var err error
			it.CmbSubjectPool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Pool":
			var err error
			it.CmbSaleComp1Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1PoolAdjBuiltIn":
			var err error
			it.TxtSaleComp1PoolAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Pool":
			var err error
			it.CmbSaleComp2Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2PoolAdjBuiltIn":
			var err error
			it.TxtSaleComp2PoolAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Pool":
			var err error
			it.CmbSaleComp3Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3PoolAdjBuiltIn":
			var err error
			it.TxtSaleComp3PoolAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Pool":
			var err error
			it.CmbListComp1Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1PoolAdjBuiltIn":
			var err error
			it.TxtListComp1PoolAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Pool":
			var err error
			it.CmbListComp2Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2PoolAdjBuiltIn":
			var err error
			it.TxtListComp2PoolAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Pool":
			var err error
			it.CmbListComp3Pool, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3PoolAdjBuiltIn":
			var err error
			it.TxtListComp3PoolAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectPorchPatioDeck":
			var err error
			it.CmbSubjectPorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1PorchPatioDeck":
			var err error
			it.CmbSaleComp1PorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1PorchPatioDeckAdjBuiltIn":
			var err error
			it.TxtSaleComp1PorchPatioDeckAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2PorchPatioDeck":
			var err error
			it.CmbSaleComp2PorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2PorchPatioDeckAdjBuiltIn":
			var err error
			it.TxtSaleComp2PorchPatioDeckAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3PorchPatioDeck":
			var err error
			it.CmbSaleComp3PorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3PorchPatioDeckAdjBuiltIn":
			var err error
			it.TxtSaleComp3PorchPatioDeckAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1PorchPatioDeck":
			var err error
			it.CmbListComp1PorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1PorchPatioDeckAdjBuiltIn":
			var err error
			it.TxtListComp1PorchPatioDeckAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2PorchPatioDeck":
			var err error
			it.CmbListComp2PorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2PorchPatioDeckAdjBuiltIn":
			var err error
			it.TxtListComp2PorchPatioDeckAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3PorchPatioDeck":
			var err error
			it.CmbListComp3PorchPatioDeck, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3PorchPatioDeckAdjBuiltIn":
			var err error
			it.TxtListComp3PorchPatioDeckAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectFireplace":
			var err error
			it.CmbSubjectFireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Fireplace":
			var err error
			it.CmbSaleComp1Fireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1FireplaceAdjBuiltIn":
			var err error
			it.TxtSaleComp1FireplaceAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Fireplace":
			var err error
			it.CmbSaleComp2Fireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2FireplaceAdjBuiltIn":
			var err error
			it.TxtSaleComp2FireplaceAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Fireplace":
			var err error
			it.CmbSaleComp3Fireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3FireplaceAdjBuiltIn":
			var err error
			it.TxtSaleComp3FireplaceAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Fireplace":
			var err error
			it.CmbListComp1Fireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1FireplaceAdjBuiltIn":
			var err error
			it.TxtListComp1FireplaceAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Fireplace":
			var err error
			it.CmbListComp2Fireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2FireplaceAdjBuiltIn":
			var err error
			it.TxtListComp2FireplaceAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Fireplace":
			var err error
			it.CmbListComp3Fireplace, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3FireplaceAdjBuiltIn":
			var err error
			it.TxtListComp3FireplaceAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectBasement":
			var err error
			it.CmbSubjectBasement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Basement":
			var err error
			it.CmbSaleComp1Basement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1BasementAdjBuiltIn":
			var err error
			it.TxtSaleComp1BasementAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Basement":
			var err error
			it.CmbSaleComp2Basement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2BasementAdjBuiltIn":
			var err error
			it.TxtSaleComp2BasementAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Basement":
			var err error
			it.CmbSaleComp3Basement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3BasementAdjBuiltIn":
			var err error
			it.TxtSaleComp3BasementAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Basement":
			var err error
			it.CmbListComp1Basement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1BasementAdjBuiltIn":
			var err error
			it.TxtListComp1BasementAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Basement":
			var err error
			it.CmbListComp2Basement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2BasementAdjBuiltIn":
			var err error
			it.TxtListComp2BasementAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Basement":
			var err error
			it.CmbListComp3Basement, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3BasementAdjBuiltIn":
			var err error
			it.TxtListComp3BasementAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectIsFinished":
			var err error
			it.CmbSubjectIsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1IsFinished":
			var err error
			it.CmbSaleComp1IsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1IsFinishedAdjBuiltIn":
			var err error
			it.TxtSaleComp1IsFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2IsFinished":
			var err error
			it.CmbSaleComp2IsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2IsFinishedAdjBuiltIn":
			var err error
			it.TxtSaleComp2IsFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3IsFinished":
			var err error
			it.CmbSaleComp3IsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3IsFinishedAdjBuiltIn":
			var err error
			it.TxtSaleComp3IsFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1IsFinished":
			var err error
			it.CmbListComp1IsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1IsFinishedAdjBuiltIn":
			var err error
			it.TxtListComp1IsFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2IsFinished":
			var err error
			it.CmbListComp2IsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2IsFinishedAdjBuiltIn":
			var err error
			it.TxtListComp2IsFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3IsFinished":
			var err error
			it.CmbListComp3IsFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3IsFinishedAdjBuiltIn":
			var err error
			it.TxtListComp3IsFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectPercentFinished":
			var err error
			it.CmbSubjectPercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1PercentFinished":
			var err error
			it.CmbSaleComp1PercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1PercentFinishedAdjBuiltIn":
			var err error
			it.TxtSaleComp1PercentFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2PercentFinished":
			var err error
			it.CmbSaleComp2PercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2PercentFinishedAdjBuiltIn":
			var err error
			it.TxtSaleComp2PercentFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3PercentFinished":
			var err error
			it.CmbSaleComp3PercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3PercentFinishedAdjBuiltIn":
			var err error
			it.TxtSaleComp3PercentFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1PercentFinished":
			var err error
			it.CmbListComp1PercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1PercentFinishedAdjBuiltIn":
			var err error
			it.TxtListComp1PercentFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2PercentFinished":
			var err error
			it.CmbListComp2PercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2PercentFinishedAdjBuiltIn":
			var err error
			it.TxtListComp2PercentFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3PercentFinished":
			var err error
			it.CmbListComp3PercentFinished, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3PercentFinishedAdjBuiltIn":
			var err error
			it.TxtListComp3PercentFinishedAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectBasementSqFt":
			var err error
			it.TxtSubjectBasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1BasementSqFt":
			var err error
			it.TxtSaleComp1BasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1BasementSqFtAdjBuiltIn":
			var err error
			it.TxtSaleComp1BasementSqFtAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2BasementSqFt":
			var err error
			it.TxtSaleComp2BasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2BasementSqFtAdjBuiltIn":
			var err error
			it.TxtSaleComp2BasementSqFtAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3BasementSqFt":
			var err error
			it.TxtSaleComp3BasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3BasementSqFtAdjBuiltIn":
			var err error
			it.TxtSaleComp3BasementSqFtAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1BasementSqFt":
			var err error
			it.TxtListComp1BasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1BasementSqFtAdjBuiltIn":
			var err error
			it.TxtListComp1BasementSqFtAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2BasementSqFt":
			var err error
			it.TxtListComp2BasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2BasementSqFtAdjBuiltIn":
			var err error
			it.TxtListComp2BasementSqFtAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3BasementSqFt":
			var err error
			it.TxtListComp3BasementSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3BasementSqFtAdjBuiltIn":
			var err error
			it.TxtListComp3BasementSqFtAdjBuiltIn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectOriginalListDate":
			var err error
			it.TxtSubjectOriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1OriginalListDate":
			var err error
			it.TxtSaleComp1OriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2OriginalListDate":
			var err error
			it.TxtSaleComp2OriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3OriginalListDate":
			var err error
			it.TxtSaleComp3OriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1OriginalListDate":
			var err error
			it.TxtListComp1OriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2OriginalListDate":
			var err error
			it.TxtListComp2OriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3OriginalListDate":
			var err error
			it.TxtListComp3OriginalListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectCurrentListDate":
			var err error
			it.TxtSubjectCurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1CurrentListDate":
			var err error
			it.TxtSaleComp1CurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2CurrentListDate":
			var err error
			it.TxtSaleComp2CurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3CurrentListDate":
			var err error
			it.TxtSaleComp3CurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1CurrentListDate":
			var err error
			it.TxtListComp1CurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2CurrentListDate":
			var err error
			it.TxtListComp2CurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3CurrentListDate":
			var err error
			it.TxtListComp3CurrentListDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectOriginalListPrice":
			var err error
			it.TxtSubjectOriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1OriginalListPrice":
			var err error
			it.TxtSaleComp1OriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2OriginalListPrice":
			var err error
			it.TxtSaleComp2OriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3OriginalListPrice":
			var err error
			it.TxtSaleComp3OriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1OriginalListPrice":
			var err error
			it.TxtListComp1OriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2OriginalListPrice":
			var err error
			it.TxtListComp2OriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3OriginalListPrice":
			var err error
			it.TxtListComp3OriginalListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectListPrice":
			var err error
			it.TxtSubjectListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1ListPrice":
			var err error
			it.TxtSaleComp1ListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2ListPrice":
			var err error
			it.TxtSaleComp2ListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3ListPrice":
			var err error
			it.TxtSaleComp3ListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1ListPrice":
			var err error
			it.TxtListComp1ListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2ListPrice":
			var err error
			it.TxtListComp2ListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3ListPrice":
			var err error
			it.TxtListComp3ListPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectSalePrice":
			var err error
			it.TxtSubjectSalePrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1SalePrice":
			var err error
			it.TxtSaleComp1SalePrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2SalePrice":
			var err error
			it.TxtSaleComp2SalePrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3SalePrice":
			var err error
			it.TxtSaleComp3SalePrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectSaleDate":
			var err error
			it.TxtSubjectSaleDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1SaleDate":
			var err error
			it.TxtSaleComp1SaleDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2SaleDate":
			var err error
			it.TxtSaleComp2SaleDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3SaleDate":
			var err error
			it.TxtSaleComp3SaleDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSubjectFinancing":
			var err error
			it.CmbSubjectFinancing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1Financing":
			var err error
			it.CmbSaleComp1Financing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2Financing":
			var err error
			it.CmbSaleComp2Financing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3Financing":
			var err error
			it.CmbSaleComp3Financing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1Financing":
			var err error
			it.CmbListComp1Financing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2Financing":
			var err error
			it.CmbListComp2Financing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3Financing":
			var err error
			it.CmbListComp3Financing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectDOM":
			var err error
			it.TxtSubjectDom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1DOM":
			var err error
			it.TxtSaleComp1dom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2DOM":
			var err error
			it.TxtSaleComp2dom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3DOM":
			var err error
			it.TxtSaleComp3dom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1DOM":
			var err error
			it.TxtListComp1dom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2DOM":
			var err error
			it.TxtListComp2dom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3DOM":
			var err error
			it.TxtListComp3dom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectPricePerSqFt":
			var err error
			it.TxtSubjectPricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1PricePerSqFt":
			var err error
			it.TxtSaleComp1PricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2PricePerSqFt":
			var err error
			it.TxtSaleComp2PricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3PricePerSqFt":
			var err error
			it.TxtSaleComp3PricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1PricePerSqFt":
			var err error
			it.TxtListComp1PricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2PricePerSqFt":
			var err error
			it.TxtListComp2PricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3PricePerSqFt":
			var err error
			it.TxtListComp3PricePerSqFt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectAdjustments":
			var err error
			it.TxtSubjectAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1Adjustments":
			var err error
			it.TxtSaleComp1Adjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2Adjustments":
			var err error
			it.TxtSaleComp2Adjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3Adjustments":
			var err error
			it.TxtSaleComp3Adjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1Adjustments":
			var err error
			it.TxtListComp1Adjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2Adjustments":
			var err error
			it.TxtListComp2Adjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3Adjustments":
			var err error
			it.TxtListComp3Adjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectCompTotals":
			var err error
			it.TxtSubjectCompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1CompTotals":
			var err error
			it.TxtSaleComp1CompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2CompTotals":
			var err error
			it.TxtSaleComp2CompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3CompTotals":
			var err error
			it.TxtSaleComp3CompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1CompTotals":
			var err error
			it.TxtListComp1CompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2CompTotals":
			var err error
			it.TxtListComp2CompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3CompTotals":
			var err error
			it.TxtListComp3CompTotals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp1CommentType":
			var err error
			it.CmbListComp1CommentType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1ComparableComments":
			var err error
			it.TxtListComp1ComparableComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1FormatAdjustments":
			var err error
			it.TxtListComp1FormatAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp1MLSComments":
			var err error
			it.TxtListComp1MLSComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp2CommentType":
			var err error
			it.CmbListComp2CommentType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2ComparableComments":
			var err error
			it.TxtListComp2ComparableComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2FormatAdjustments":
			var err error
			it.TxtListComp2FormatAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp2MLSComments":
			var err error
			it.TxtListComp2MLSComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListComp3CommentType":
			var err error
			it.CmbListComp3CommentType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3ComparableComments":
			var err error
			it.TxtListComp3ComparableComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3FormatAdjustments":
			var err error
			it.TxtListComp3FormatAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListComp3MLSComments":
			var err error
			it.TxtListComp3MLSComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp1CommentType":
			var err error
			it.CmbSaleComp1CommentType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1ComparableComments":
			var err error
			it.TxtSaleComp1ComparableComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1FormatAdjustments":
			var err error
			it.TxtSaleComp1FormatAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp1MLSComments":
			var err error
			it.TxtSaleComp1MLSComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp2CommentType":
			var err error
			it.CmbSaleComp2CommentType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2ComparableComments":
			var err error
			it.TxtSaleComp2ComparableComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2FormatAdjustments":
			var err error
			it.TxtSaleComp2FormatAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp2MLSComments":
			var err error
			it.TxtSaleComp2MLSComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSaleComp3CommentType":
			var err error
			it.CmbSaleComp3CommentType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3ComparableComments":
			var err error
			it.TxtSaleComp3ComparableComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3FormatAdjustments":
			var err error
			it.TxtSaleComp3FormatAdjustments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSaleComp3MLSComments":
			var err error
			it.TxtSaleComp3MLSComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbNeighborhoodTrend":
			var err error
			it.CmbNeighborhoodTrend, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtMonthlyPecent":
			var err error
			it.TxtMonthlyPecent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtEstimatedRent":
			var err error
			it.TxtEstimatedRent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtEstimatedDaysOnMarket":
			var err error
			it.TxtEstimatedDaysOnMarket, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoBoarded":
			var err error
			it.TxtNoBoarded, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfActive":
			var err error
			it.TxtNoOfActive, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt6MonthPecent":
			var err error
			it.Txt6MonthPecent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtAnnualPecent":
			var err error
			it.TxtAnnualPecent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListings":
			var err error
			it.TxtListings, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbSupply":
			var err error
			it.CmbSupply, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsMinValue":
			var err error
			it.TxtListingsMinValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsRange1":
			var err error
			it.TxtListingsRange1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsMedValue":
			var err error
			it.TxtListingsMedValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsMaxValue":
			var err error
			it.TxtListingsMaxValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsRange2":
			var err error
			it.TxtListingsRange2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsDOM":
			var err error
			it.TxtListingsDom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsDOMRange1":
			var err error
			it.TxtListingsDOMRange1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListingsDOMRange2":
			var err error
			it.TxtListingsDOMRange2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbREOTrend":
			var err error
			it.CmbREOTrend, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfFM":
			var err error
			it.TxtNoOfFm, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfSS":
			var err error
			it.TxtNoOfSs, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfREO":
			var err error
			it.TxtNoOfReo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfDistressed":
			var err error
			it.TxtNoOfDistressed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSales":
			var err error
			it.TxtSales, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbDemand":
			var err error
			it.CmbDemand, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSalesRange1":
			var err error
			it.TxtSalesRange1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSalesMedValue":
			var err error
			it.TxtSalesMedValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSalesRange2":
			var err error
			it.TxtSalesRange2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSalesDOM":
			var err error
			it.TxtSalesDom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSalesDOMRange1":
			var err error
			it.TxtSalesDOMRange1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSalesDOMRange2":
			var err error
			it.TxtSalesDOMRange2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtZillowNeighborhoodTrend":
			var err error
			it.TxtZillowNeighborhoodTrend, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNeighborhoodTrendComments":
			var err error
			it.TxtNeighborhoodTrendComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtTotalListings":
			var err error
			it.TxtTotalListings, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtTotalSales":
			var err error
			it.TxtTotalSales, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfREOListings":
			var err error
			it.TxtNoOfREOListings, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfSSListings":
			var err error
			it.TxtNoOfSSListings, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfREOSales":
			var err error
			it.TxtNoOfREOSales, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfSSSales":
			var err error
			it.TxtNoOfSSSales, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtTaxID":
			var err error
			it.TxtTaxID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtLastSaleDate":
			var err error
			it.TxtLastSaleDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtLastSalePrice":
			var err error
			it.TxtLastSalePrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbIsListed":
			var err error
			it.CmbIsListed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtOwnerOccupied":
			var err error
			it.TxtOwnerOccupied, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtRenterOccupied":
			var err error
			it.TxtRenterOccupied, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtMarketRent":
			var err error
			it.TxtMarketRent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoOfRentals":
			var err error
			it.TxtNoOfRentals, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtTypicalDOM":
			var err error
			it.TxtTypicalDom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNoRentHomes":
			var err error
			it.TxtNoRentHomes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtTypicalRentalRates":
			var err error
			it.TxtTypicalRentalRates, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "adjustmentPrice":
			var err error
			it.AdjustmentPrice, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedGLA":
			var err error
			it.TxtCalculatedGla, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedAge":
			var err error
			it.TxtCalculatedAge, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedSaleDates":
			var err error
			it.TxtCalculatedSaleDates, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedProximity":
			var err error
			it.TxtCalculatedProximity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedStyle":
			var err error
			it.TxtCalculatedStyle, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedMonthsSupply":
			var err error
			it.TxtCalculatedMonthsSupply, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedProxim":
			var err error
			it.TxtCalculatedProxim, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedGLAs":
			var err error
			it.TxtCalculatedGLAs, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedAges":
			var err error
			it.TxtCalculatedAges, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedCond":
			var err error
			it.TxtCalculatedCond, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedView":
			var err error
			it.TxtCalculatedView, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedStyle1":
			var err error
			it.TxtCalculatedStyle1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedLots":
			var err error
			it.TxtCalculatedLots, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedBeds":
			var err error
			it.TxtCalculatedBeds, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtCalculatedBath":
			var err error
			it.TxtCalculatedBath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rdbresaletext":
			var err error
			it.Rdbresaletext, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rdbmarketedtext":
			var err error
			it.Rdbmarketedtext, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtpmi":
			var err error
			it.Txtpmi, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtOtherComments":
			var err error
			it.TxtOtherComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbnew":
			var err error
			it.Txtcbnew, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbold":
			var err error
			it.Txtcbold, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbstyle":
			var err error
			it.Txtcbstyle, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcblot":
			var err error
			it.Txtcblot, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbview":
			var err error
			it.Txtcbview, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbdamage":
			var err error
			it.Txtcbdamage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbupgrade":
			var err error
			it.Txtcbupgrade, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtcbinfluence":
			var err error
			it.Txtcbinfluence, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtSubjectComments":
			var err error
			it.TxtSubjectComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNeighborhoodComments":
			var err error
			it.TxtNeighborhoodComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtNeighborhoodTrend":
			var err error
			it.TxtNeighborhoodTrend, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtValidation1":
			var err error
			it.TxtValidation1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtUniqueComments":
			var err error
			it.TxtUniqueComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtMarketingStrategy":
			var err error
			it.TxtMarketingStrategy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtDisclaimer2":
			var err error
			it.TxtDisclaimer2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtBrokerComments":
			var err error
			it.TxtBrokerComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtValidation":
			var err error
			it.TxtValidation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt30DayQuickSale":
			var err error
			it.Txt30DayQuickSale, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt60DayQuickSale":
			var err error
			it.Txt60DayQuickSale, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt90DayAsIsValue":
			var err error
			it.Txt90DayAsIsValue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt120DayQuickSale":
			var err error
			it.Txt120DayQuickSale, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt180DayQuickSale":
			var err error
			it.Txt180DayQuickSale, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListPriceFinalValues":
			var err error
			it.TxtListPriceFinalValues, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt30DayListPriceFinalValues":
			var err error
			it.Txt30DayListPriceFinalValues, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt30DayQuickSaleRepaired":
			var err error
			it.Txt30DayQuickSaleRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt60DayQuickSaleRepaired":
			var err error
			it.Txt60DayQuickSaleRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt90DayAsIsValueRepaired":
			var err error
			it.Txt90DayAsIsValueRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt120DayQuickSaleRepaired":
			var err error
			it.Txt120DayQuickSaleRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt180DayQuickSaleRepaired":
			var err error
			it.Txt180DayQuickSaleRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtListPriceRepaired":
			var err error
			it.TxtListPriceRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txt30DayListPriceRepaired":
			var err error
			it.Txt30DayListPriceRepaired, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbHouse":
			var err error
			it.CmbHouse, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbPositive":
			var err error
			it.CmbPositive, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbNegative":
			var err error
			it.CmbNegative, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbView":
			var err error
			it.CmbView, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbMarket":
			var err error
			it.CmbMarket, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbPricing":
			var err error
			it.CmbPricing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbListing":
			var err error
			it.CmbListing, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cmbExtra":
			var err error
			it.CmbExtra, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "txtUnique":
			var err error
			it.TxtUnique, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "priceComment":
			var err error
			it.PriceComment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rangeComment":
			var err error
			it.RangeComment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxException":
			var err error
			it.ProxException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "glaException":
			var err error
			it.GlaException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ageException":
			var err error
			it.AgeException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "condException":
			var err error
			it.CondException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "viewException":
			var err error
			it.ViewException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "styleException":
			var err error
			it.StyleException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lotException":
			var err error
			it.LotException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "bedException":
			var err error
			it.BedException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "bathException":
			var err error
			it.BathException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateInvoiceInput(ctx context.Context, obj interface{}) (models.UpdateInvoiceInput, error) {
	var it models.UpdateInvoiceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "isSuperRush":
			var err error
			it.IsSuperRush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "superRushRemarks":
			var err error
			it.SuperRushRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRush":
			var err error
			it.IsRush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "rushRemarks":
			var err error
			it.RushRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isInterior":
			var err error
			it.IsInterior, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRemarks":
			var err error
			it.InteriorRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRentalAddendum":
			var err error
			it.IsRentalAddendum, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "RentalAddendumRemarks":
			var err error
			it.RentalAddendumRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isInitialBpo":
			var err error
			it.IsInitialBpo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "initialBpoRemarks":
			var err error
			it.InitialBpoRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isInspection":
			var err error
			it.IsInspection, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspectionRemarks":
			var err error
			it.InspectionRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isNoCsv":
			var err error
			it.IsNoCsv, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "noCsvRemarks":
			var err error
			it.NoCsvRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isNoIFill":
			var err error
			it.IsNoIFill, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "noIFillRemarks":
			var err error
			it.NoIFillRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isOtherPremium":
			var err error
			it.IsOtherPremium, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "otherPremiumRemarks":
			var err error
			it.OtherPremiumRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderType":
			var err error
			it.OrderType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePipelineInput(ctx context.Context, obj interface{}) (models.UpdatePipelineInput, error) {
	var it models.UpdatePipelineInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orderNumber":
			var err error
			it.OrderNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "county":
			var err error
			it.County, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error
			it.Location, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "zipCode":
			var err error
			it.ZipCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyId":
			var err error
			it.CompanyID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "premiumCompany":
			var err error
			it.PremiumCompany, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "premiumCompanyId":
			var err error
			it.PremiumCompanyID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "otherCompany":
			var err error
			it.OtherCompany, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderType":
			var err error
			it.OrderType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "objective":
			var err error
			it.Objective, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "assign":
			var err error
			it.Assign, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignId":
			var err error
			it.AssignID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mls":
			var err error
			it.Mls, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRushOrder":
			var err error
			it.IsRushOrder, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSuperRush":
			var err error
			it.IsSuperRush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isInspection":
			var err error
			it.IsInspection, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isInitialBpo":
			var err error
			it.IsInitialBpo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderFee":
			var err error
			it.OrderFee, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "totalFee":
			var err error
			it.TotalFee, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSyncedToTurboBpo":
			var err error
			it.IsSyncedToTurboBpo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ratingOverAll":
			var err error
			it.RatingOverAll, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ratingTimeliness":
			var err error
			it.RatingTimeliness, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ratingQuality":
			var err error
			it.RatingQuality, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ratingFeedback":
			var err error
			it.RatingFeedback, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isProcessIform":
			var err error
			it.IsProcessIform, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isProcessIfill":
			var err error
			it.IsProcessIfill, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isProcessReview":
			var err error
			it.IsProcessReview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isForQa":
			var err error
			it.IsForQa, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "authorId":
			var err error
			it.AuthorID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isHold":
			var err error
			it.IsHold, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "holdRemarks":
			var err error
			it.HoldRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "unHoldRemarks":
			var err error
			it.UnHoldRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cancelRemarks":
			var err error
			it.CancelRemarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePipelineNeighborhoodInput(ctx context.Context, obj interface{}) (models.UpdatePipelineNeighborhoodInput, error) {
	var it models.UpdatePipelineNeighborhoodInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "isReoDriven":
			var err error
			it.IsReoDriven, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "marketTrend":
			var err error
			it.MarketTrend, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monthlyPercentage":
			var err error
			it.MonthlyPercentage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sixmonthPercentage":
			var err error
			it.SixmonthPercentage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "annualPercentage":
			var err error
			it.AnnualPercentage, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "totalListings":
			var err error
			it.TotalListings, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "supply":
			var err error
			it.Supply, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "listingsMinValue":
			var err error
			it.ListingsMinValue, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "listingsMedValue":
			var err error
			it.ListingsMedValue, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "listingsMaxValue":
			var err error
			it.ListingsMaxValue, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "listingsDomAve":
			var err error
			it.ListingsDomAve, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "listingsDomRangeFrom":
			var err error
			it.ListingsDomRangeFrom, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "listingsDomRangeTo":
			var err error
			it.ListingsDomRangeTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fm":
			var err error
			it.Fm, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ss":
			var err error
			it.Ss, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "reo":
			var err error
			it.Reo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "distressed":
			var err error
			it.Distressed, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "totalSales":
			var err error
			it.TotalSales, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "demand":
			var err error
			it.Demand, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "salesMinValue":
			var err error
			it.SalesMinValue, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "salesMedValue":
			var err error
			it.SalesMedValue, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "salesMaxValue":
			var err error
			it.SalesMaxValue, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "salesDomRangeFrom":
			var err error
			it.SalesDomRangeFrom, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "salesDomRangeTo":
			var err error
			it.SalesDomRangeTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "zntComments":
			var err error
			it.ZntComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ntComments":
			var err error
			it.NtComments, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePipelineRepairInput(ctx context.Context, obj interface{}) (models.UpdatePipelineRepairInput, error) {
	var it models.UpdatePipelineRepairInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "exteriorRepairDescription1":
			var err error
			it.ExteriorRepairDescription1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice1":
			var err error
			it.ExteriorRepairPrice1, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription2":
			var err error
			it.ExteriorRepairDescription2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice2":
			var err error
			it.ExteriorRepairPrice2, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription3":
			var err error
			it.ExteriorRepairDescription3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice3":
			var err error
			it.ExteriorRepairPrice3, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription4":
			var err error
			it.ExteriorRepairDescription4, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice4":
			var err error
			it.ExteriorRepairPrice4, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription5":
			var err error
			it.ExteriorRepairDescription5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice5":
			var err error
			it.ExteriorRepairPrice5, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription6":
			var err error
			it.ExteriorRepairDescription6, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice6":
			var err error
			it.ExteriorRepairPrice6, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription7":
			var err error
			it.ExteriorRepairDescription7, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice7":
			var err error
			it.ExteriorRepairPrice7, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription8":
			var err error
			it.ExteriorRepairDescription8, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice8":
			var err error
			it.ExteriorRepairPrice8, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription9":
			var err error
			it.ExteriorRepairDescription9, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice9":
			var err error
			it.ExteriorRepairPrice9, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairDescription10":
			var err error
			it.ExteriorRepairDescription10, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPrice10":
			var err error
			it.ExteriorRepairPrice10, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "exteriorRepairPriceTotal":
			var err error
			it.ExteriorRepairPriceTotal, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription1":
			var err error
			it.InteriorRepairDescription1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice1":
			var err error
			it.InteriorRepairPrice1, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription2":
			var err error
			it.InteriorRepairDescription2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice2":
			var err error
			it.InteriorRepairPrice2, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription3":
			var err error
			it.InteriorRepairDescription3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice3":
			var err error
			it.InteriorRepairPrice3, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription4":
			var err error
			it.InteriorRepairDescription4, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice4":
			var err error
			it.InteriorRepairPrice4, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription5":
			var err error
			it.InteriorRepairDescription5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice5":
			var err error
			it.InteriorRepairPrice5, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription6":
			var err error
			it.InteriorRepairDescription6, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice6":
			var err error
			it.InteriorRepairPrice6, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription7":
			var err error
			it.InteriorRepairDescription7, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice7":
			var err error
			it.InteriorRepairPrice7, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription8":
			var err error
			it.InteriorRepairDescription8, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice8":
			var err error
			it.InteriorRepairPrice8, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription9":
			var err error
			it.InteriorRepairDescription9, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice9":
			var err error
			it.InteriorRepairPrice9, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairDescription10":
			var err error
			it.InteriorRepairDescription10, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPrice10":
			var err error
			it.InteriorRepairPrice10, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "interiorRepairPriceTotal":
			var err error
			it.InteriorRepairPriceTotal, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePipelineStateInput(ctx context.Context, obj interface{}) (models.UpdatePipelineStateInput, error) {
	var it models.UpdatePipelineStateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "maxDailyVolume":
			var err error
			it.MaxDailyVolume, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "standByAutoComplete":
			var err error
			it.StandByAutoComplete, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRush":
			var err error
			it.IsRush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isNewOrder":
			var err error
			it.IsNewOrder, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderMessage":
			var err error
			it.OrderMessage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tTSlow":
			var err error
			it.TTSlow, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tTModerate":
			var err error
			it.TTModerate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tTBusy":
			var err error
			it.TTBusy, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tTMax":
			var err error
			it.TTMax, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "tLSlow":
			var err error
			it.TLSlow, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tLModerate":
			var err error
			it.TLModerate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tLBusy":
			var err error
			it.TLBusy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "oPInterior":
			var err error
			it.OPInterior, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "oPExterior":
			var err error
			it.OPExterior, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "oPDataEntry":
			var err error
			it.OPDataEntry, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "oPRush":
			var err error
			it.OPRush, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "oPSuperRush":
			var err error
			it.OPSuperRush, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "oPConditionReport":
			var err error
			it.OPConditionReport, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "oPRentalAddendum":
			var err error
			it.OPRentalAddendum, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "oPInitialBPO":
			var err error
			it.OPInitialBpo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "oPInspection":
			var err error
			it.OPInspection, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "pCIsAcceptOrder":
			var err error
			it.PCIsAcceptOrder, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "pCcatchTime":
			var err error
			it.PCcatchTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oAOfferLimitInMin":
			var err error
			it.OAOfferLimitInMin, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oAIsAutoAssign":
			var err error
			it.OAIsAutoAssign, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "qCElapseTime":
			var err error
			it.QCElapseTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateQcRequestInput(ctx context.Context, obj interface{}) (models.UpdateQcRequestInput, error) {
	var it models.UpdateQcRequestInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "requestType":
			var err error
			it.RequestType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateQualityControlInput(ctx context.Context, obj interface{}) (models.UpdateQualityControlInput, error) {
	var it models.UpdateQualityControlInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignId":
			var err error
			it.AssignID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignReason":
			var err error
			it.AssignReason, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isAcceptRequest":
			var err error
			it.IsAcceptRequest, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "requestType":
			var err error
			it.RequestType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateRequestInput(ctx context.Context, obj interface{}) (models.UpdateRequestInput, error) {
	var it models.UpdateRequestInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "action":
			var err error
			it.Action, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "conditionType":
			var err error
			it.ConditionType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateReviewInput(ctx context.Context, obj interface{}) (models.UpdateReviewInput, error) {
	var it models.UpdateReviewInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "reviewDescription":
			var err error
			it.ReviewDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "attachment":
			var err error
			it.Attachment, err = ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSessionInput(ctx context.Context, obj interface{}) (models.UpdateSessionInput, error) {
	var it models.UpdateSessionInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "invoiceDate":
			var err error
			it.InvoiceDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "start":
			var err error
			it.Start, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "end":
			var err error
			it.End, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInput(ctx context.Context, obj interface{}) (models.UpdateUserInput, error) {
	var it models.UpdateUserInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error
			it.State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "zipCode":
			var err error
			it.ZipCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "roles":
			var err error
			it.Roles, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hdyfu":
			var err error
			it.Hdyfu, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "broker":
			var err error
			it.Broker, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brokerLicense":
			var err error
			it.BrokerLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent":
			var err error
			it.Agent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "agentLicense":
			var err error
			it.AgentLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseDate":
			var err error
			it.LicenseDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "licenseExpirationDate":
			var err error
			it.LicenseExpirationDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brokerage":
			var err error
			it.Brokerage, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "yearOfExperience":
			var err error
			it.YearOfExperience, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignmentPercentage":
			var err error
			it.AssignmentPercentage, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionGroupId":
			var err error
			it.PermissionGroupID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyList":
			var err error
			it.CompanyList, err = ec.unmarshalOID2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "priceModule":
			var err error
			it.PriceModule, err = ec.unmarshalOPriceModuleInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPriceModuleInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "theme":
			var err error
			it.Theme, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isEnableEmailNotification":
			var err error
			it.IsEnableEmailNotification, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFilterInput(ctx context.Context, obj interface{}) (models.UserFilterInput, error) {
	var it models.UserFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "limit":
			var err error
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "roles":
			var err error
			it.Roles, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderMonth":
			var err error
			it.OrderMonth, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderYear":
			var err error
			it.OrderYear, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accountImplementors = []string{"Account"}

func (ec *executionContext) _Account(ctx context.Context, sel ast.SelectionSet, obj *models.Account) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, accountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Account")
		case "id":
			out.Values[i] = ec._Account_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recordType":
			out.Values[i] = ec._Account_recordType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "company":
			out.Values[i] = ec._Account_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "webSite":
			out.Values[i] = ec._Account_webSite(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":
			out.Values[i] = ec._Account_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "password":
			out.Values[i] = ec._Account_password(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "question1":
			out.Values[i] = ec._Account_question1(ctx, field, obj)
		case "answer1":
			out.Values[i] = ec._Account_answer1(ctx, field, obj)
		case "question2":
			out.Values[i] = ec._Account_question2(ctx, field, obj)
		case "answer2":
			out.Values[i] = ec._Account_answer2(ctx, field, obj)
		case "question3":
			out.Values[i] = ec._Account_question3(ctx, field, obj)
		case "answer3":
			out.Values[i] = ec._Account_answer3(ctx, field, obj)
		case "others":
			out.Values[i] = ec._Account_others(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._Account_createdDateTime(ctx, field, obj)
		case "LastUpdateTime":
			out.Values[i] = ec._Account_LastUpdateTime(ctx, field, obj)
		case "logs":
			out.Values[i] = ec._Account_logs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var accountResultImplementors = []string{"AccountResult"}

func (ec *executionContext) _AccountResult(ctx context.Context, sel ast.SelectionSet, obj *models.AccountResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, accountResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountResult")
		case "totalCount":
			out.Values[i] = ec._AccountResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._AccountResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adjustmentImplementors = []string{"Adjustment"}

func (ec *executionContext) _Adjustment(ctx context.Context, sel ast.SelectionSet, obj *models.Adjustment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, adjustmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Adjustment")
		case "id":
			out.Values[i] = ec._Adjustment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "category":
			out.Values[i] = ec._Adjustment_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "order":
			out.Values[i] = ec._Adjustment_order(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Adjustment_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "from":
			out.Values[i] = ec._Adjustment_from(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "to":
			out.Values[i] = ec._Adjustment_to(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Adjustment_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var announcementImplementors = []string{"Announcement"}

func (ec *executionContext) _Announcement(ctx context.Context, sel ast.SelectionSet, obj *models.Announcement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, announcementImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Announcement")
		case "id":
			out.Values[i] = ec._Announcement_id(ctx, field, obj)
		case "subject":
			out.Values[i] = ec._Announcement_subject(ctx, field, obj)
		case "startDate":
			out.Values[i] = ec._Announcement_startDate(ctx, field, obj)
		case "endDate":
			out.Values[i] = ec._Announcement_endDate(ctx, field, obj)
		case "message":
			out.Values[i] = ec._Announcement_message(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Announcement_createdBy(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._Announcement_createdDateTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var announcementResultImplementors = []string{"AnnouncementResult"}

func (ec *executionContext) _AnnouncementResult(ctx context.Context, sel ast.SelectionSet, obj *models.AnnouncementResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, announcementResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnnouncementResult")
		case "totalCount":
			out.Values[i] = ec._AnnouncementResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._AnnouncementResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var balanceImplementors = []string{"Balance"}

func (ec *executionContext) _Balance(ctx context.Context, sel ast.SelectionSet, obj *models.Balance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, balanceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Balance")
		case "client":
			out.Values[i] = ec._Balance_client(ctx, field, obj)
		case "total":
			out.Values[i] = ec._Balance_total(ctx, field, obj)
		case "paidAmount":
			out.Values[i] = ec._Balance_paidAmount(ctx, field, obj)
		case "other":
			out.Values[i] = ec._Balance_other(ctx, field, obj)
		case "unpaid":
			out.Values[i] = ec._Balance_unpaid(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var balanceResultImplementors = []string{"BalanceResult"}

func (ec *executionContext) _BalanceResult(ctx context.Context, sel ast.SelectionSet, obj *models.BalanceResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, balanceResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BalanceResult")
		case "totalCount":
			out.Values[i] = ec._BalanceResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._BalanceResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var billingImplementors = []string{"Billing"}

func (ec *executionContext) _Billing(ctx context.Context, sel ast.SelectionSet, obj *models.Billing) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, billingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Billing")
		case "id":
			out.Values[i] = ec._Billing_id(ctx, field, obj)
		case "invoiceNumber":
			out.Values[i] = ec._Billing_invoiceNumber(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Billing_status(ctx, field, obj)
		case "date":
			out.Values[i] = ec._Billing_date(ctx, field, obj)
		case "dateFrom":
			out.Values[i] = ec._Billing_dateFrom(ctx, field, obj)
		case "dateTo":
			out.Values[i] = ec._Billing_dateTo(ctx, field, obj)
		case "dueDate":
			out.Values[i] = ec._Billing_dueDate(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._Billing_userId(ctx, field, obj)
		case "userName":
			out.Values[i] = ec._Billing_userName(ctx, field, obj)
		case "entries":
			out.Values[i] = ec._Billing_entries(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var billingEntryImplementors = []string{"BillingEntry"}

func (ec *executionContext) _BillingEntry(ctx context.Context, sel ast.SelectionSet, obj *models.BillingEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, billingEntryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BillingEntry")
		case "orderNumber":
			out.Values[i] = ec._BillingEntry_orderNumber(ctx, field, obj)
		case "description":
			out.Values[i] = ec._BillingEntry_description(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._BillingEntry_amount(ctx, field, obj)
		case "type":
			out.Values[i] = ec._BillingEntry_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var billingResultImplementors = []string{"BillingResult"}

func (ec *executionContext) _BillingResult(ctx context.Context, sel ast.SelectionSet, obj *models.BillingResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, billingResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BillingResult")
		case "totalCount":
			out.Values[i] = ec._BillingResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._BillingResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkoutImplementors = []string{"Checkout"}

func (ec *executionContext) _Checkout(ctx context.Context, sel ast.SelectionSet, obj *models.Checkout) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, checkoutImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Checkout")
		case "clientName":
			out.Values[i] = ec._Checkout_clientName(ctx, field, obj)
		case "invoice":
			out.Values[i] = ec._Checkout_invoice(ctx, field, obj)
		case "total":
			out.Values[i] = ec._Checkout_total(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Checkout_status(ctx, field, obj)
		case "date":
			out.Values[i] = ec._Checkout_date(ctx, field, obj)
		case "url":
			out.Values[i] = ec._Checkout_url(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkoutResultImplementors = []string{"CheckoutResult"}

func (ec *executionContext) _CheckoutResult(ctx context.Context, sel ast.SelectionSet, obj *models.CheckoutResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, checkoutResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckoutResult")
		case "totalCount":
			out.Values[i] = ec._CheckoutResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._CheckoutResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentImplementors = []string{"Comment"}

func (ec *executionContext) _Comment(ctx context.Context, sel ast.SelectionSet, obj *models.Comment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Comment")
		case "id":
			out.Values[i] = ec._Comment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "category":
			out.Values[i] = ec._Comment_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Comment_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Comment_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "section":
			out.Values[i] = ec._Comment_section(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdDateTime":
			out.Values[i] = ec._Comment_createdDateTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companyImplementors = []string{"Company"}

func (ec *executionContext) _Company(ctx context.Context, sel ast.SelectionSet, obj *models.Company) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, companyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Company")
		case "id":
			out.Values[i] = ec._Company_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Company_name(ctx, field, obj)
		case "webSite":
			out.Values[i] = ec._Company_webSite(ctx, field, obj)
		case "isAdmin":
			out.Values[i] = ec._Company_isAdmin(ctx, field, obj)
		case "isClient":
			out.Values[i] = ec._Company_isClient(ctx, field, obj)
		case "isPremium":
			out.Values[i] = ec._Company_isPremium(ctx, field, obj)
		case "forms":
			out.Values[i] = ec._Company_forms(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companyFormImplementors = []string{"CompanyForm"}

func (ec *executionContext) _CompanyForm(ctx context.Context, sel ast.SelectionSet, obj *models.CompanyForm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, companyFormImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyForm")
		case "name":
			out.Values[i] = ec._CompanyForm_name(ctx, field, obj)
		case "style":
			out.Values[i] = ec._CompanyForm_style(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var companyResultImplementors = []string{"CompanyResult"}

func (ec *executionContext) _CompanyResult(ctx context.Context, sel ast.SelectionSet, obj *models.CompanyResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, companyResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyResult")
		case "totalCount":
			out.Values[i] = ec._CompanyResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._CompanyResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var creditImplementors = []string{"Credit"}

func (ec *executionContext) _Credit(ctx context.Context, sel ast.SelectionSet, obj *models.Credit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, creditImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Credit")
		case "id":
			out.Values[i] = ec._Credit_id(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._Credit_amount(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._Credit_createdDateTime(ctx, field, obj)
		case "paypalOrderId":
			out.Values[i] = ec._Credit_paypalOrderId(ctx, field, obj)
		case "paypalToken":
			out.Values[i] = ec._Credit_paypalToken(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var creditLedgerImplementors = []string{"CreditLedger"}

func (ec *executionContext) _CreditLedger(ctx context.Context, sel ast.SelectionSet, obj *models.CreditLedger) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, creditLedgerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreditLedger")
		case "id":
			out.Values[i] = ec._CreditLedger_id(ctx, field, obj)
		case "clientName":
			out.Values[i] = ec._CreditLedger_clientName(ctx, field, obj)
		case "clientId":
			out.Values[i] = ec._CreditLedger_clientId(ctx, field, obj)
		case "paypalOrderId":
			out.Values[i] = ec._CreditLedger_paypalOrderId(ctx, field, obj)
		case "type":
			out.Values[i] = ec._CreditLedger_type(ctx, field, obj)
		case "orderNumber":
			out.Values[i] = ec._CreditLedger_orderNumber(ctx, field, obj)
		case "orderAddress":
			out.Values[i] = ec._CreditLedger_orderAddress(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._CreditLedger_createdDateTime(ctx, field, obj)
		case "balance":
			out.Values[i] = ec._CreditLedger_balance(ctx, field, obj)
		case "iformCharge":
			out.Values[i] = ec._CreditLedger_iformCharge(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._CreditLedger_amount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var creditLedgerResultImplementors = []string{"CreditLedgerResult"}

func (ec *executionContext) _CreditLedgerResult(ctx context.Context, sel ast.SelectionSet, obj *models.CreditLedgerResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, creditLedgerResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreditLedgerResult")
		case "totalCount":
			out.Values[i] = ec._CreditLedgerResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._CreditLedgerResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var creditsImplementors = []string{"Credits"}

func (ec *executionContext) _Credits(ctx context.Context, sel ast.SelectionSet, obj *models.Credits) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, creditsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Credits")
		case "clientName":
			out.Values[i] = ec._Credits_clientName(ctx, field, obj)
		case "invoice":
			out.Values[i] = ec._Credits_invoice(ctx, field, obj)
		case "credits":
			out.Values[i] = ec._Credits_credits(ctx, field, obj)
		case "expiresAt":
			out.Values[i] = ec._Credits_expiresAt(ctx, field, obj)
		case "date":
			out.Values[i] = ec._Credits_date(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var creditsResultImplementors = []string{"CreditsResult"}

func (ec *executionContext) _CreditsResult(ctx context.Context, sel ast.SelectionSet, obj *models.CreditsResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, creditsResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreditsResult")
		case "totalCount":
			out.Values[i] = ec._CreditsResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._CreditsResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var defaultImplementors = []string{"Default"}

func (ec *executionContext) _Default(ctx context.Context, sel ast.SelectionSet, obj *models.Default) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, defaultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Default")
		case "listingType":
			out.Values[i] = ec._Default_listingType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alwayssubmitOrder":
			out.Values[i] = ec._Default_alwayssubmitOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "autoCompleteStandbyOrder":
			out.Values[i] = ec._Default_autoCompleteStandbyOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "initialSearchGla":
			out.Values[i] = ec._Default_initialSearchGla(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "initialSearchAge":
			out.Values[i] = ec._Default_initialSearchAge(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "initialSearchProximity":
			out.Values[i] = ec._Default_initialSearchProximity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "secondSearchGla":
			out.Values[i] = ec._Default_secondSearchGla(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "secondSearchAge":
			out.Values[i] = ec._Default_secondSearchAge(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "secondSearchProximity":
			out.Values[i] = ec._Default_secondSearchProximity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "secondSearchSaleDates":
			out.Values[i] = ec._Default_secondSearchSaleDates(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thirdSearchGla":
			out.Values[i] = ec._Default_thirdSearchGla(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thirdSearchAge":
			out.Values[i] = ec._Default_thirdSearchAge(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thirdSearchProximity":
			out.Values[i] = ec._Default_thirdSearchProximity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thirdSearchSaleDates":
			out.Values[i] = ec._Default_thirdSearchSaleDates(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thirdSearchFilterByComplexName":
			out.Values[i] = ec._Default_thirdSearchFilterByComplexName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thirdSearchFilterByCity":
			out.Values[i] = ec._Default_thirdSearchFilterByCity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thirdSearchFilterByZip":
			out.Values[i] = ec._Default_thirdSearchFilterByZip(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thirdSearchFilterByCountry":
			out.Values[i] = ec._Default_thirdSearchFilterByCountry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "useDefaults":
			out.Values[i] = ec._Default_useDefaults(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "useIformValidations":
			out.Values[i] = ec._Default_useIformValidations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subjectType":
			out.Values[i] = ec._Default_subjectType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "styleDesign":
			out.Values[i] = ec._Default_styleDesign(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "exteriorFinish":
			out.Values[i] = ec._Default_exteriorFinish(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "condition":
			out.Values[i] = ec._Default_condition(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quality":
			out.Values[i] = ec._Default_quality(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "view":
			out.Values[i] = ec._Default_view(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pool":
			out.Values[i] = ec._Default_pool(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "porchPatioDeck":
			out.Values[i] = ec._Default_porchPatioDeck(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firePlace":
			out.Values[i] = ec._Default_firePlace(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "basement":
			out.Values[i] = ec._Default_basement(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "condo":
			out.Values[i] = ec._Default_condo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "multiUnit":
			out.Values[i] = ec._Default_multiUnit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mobileHome":
			out.Values[i] = ec._Default_mobileHome(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sfd":
			out.Values[i] = ec._Default_sfd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sfaTownhouse":
			out.Values[i] = ec._Default_sfaTownhouse(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "theme":
			out.Values[i] = ec._Default_theme(ctx, field, obj)
		case "isEnableEmailNotification":
			out.Values[i] = ec._Default_isEnableEmailNotification(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var docImplementors = []string{"Doc"}

func (ec *executionContext) _Doc(ctx context.Context, sel ast.SelectionSet, obj *models.Doc) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, docImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Doc")
		case "id":
			out.Values[i] = ec._Doc_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Doc_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileName":
			out.Values[i] = ec._Doc_fileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._Doc_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdDateTime":
			out.Values[i] = ec._Doc_createdDateTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var emailTemplateImplementors = []string{"EmailTemplate"}

func (ec *executionContext) _EmailTemplate(ctx context.Context, sel ast.SelectionSet, obj *models.EmailTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, emailTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmailTemplate")
		case "id":
			out.Values[i] = ec._EmailTemplate_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EmailTemplate_type(ctx, field, obj)
		case "template":
			out.Values[i] = ec._EmailTemplate_template(ctx, field, obj)
		case "subject":
			out.Values[i] = ec._EmailTemplate_subject(ctx, field, obj)
		case "message":
			out.Values[i] = ec._EmailTemplate_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var emailTemplateResultImplementors = []string{"EmailTemplateResult"}

func (ec *executionContext) _EmailTemplateResult(ctx context.Context, sel ast.SelectionSet, obj *models.EmailTemplateResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, emailTemplateResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmailTemplateResult")
		case "totalCount":
			out.Values[i] = ec._EmailTemplateResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._EmailTemplateResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var headerImplementors = []string{"Header"}

func (ec *executionContext) _Header(ctx context.Context, sel ast.SelectionSet, obj *models.Header) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, headerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Header")
		case "id":
			out.Values[i] = ec._Header_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Header_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var headerCodeImplementors = []string{"HeaderCode"}

func (ec *executionContext) _HeaderCode(ctx context.Context, sel ast.SelectionSet, obj *models.HeaderCode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, headerCodeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HeaderCode")
		case "code":
			out.Values[i] = ec._HeaderCode_code(ctx, field, obj)
		case "value":
			out.Values[i] = ec._HeaderCode_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var headerResultImplementors = []string{"HeaderResult"}

func (ec *executionContext) _HeaderResult(ctx context.Context, sel ast.SelectionSet, obj *models.HeaderResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, headerResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HeaderResult")
		case "totalCount":
			out.Values[i] = ec._HeaderResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._HeaderResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iformImplementors = []string{"Iform"}

func (ec *executionContext) _Iform(ctx context.Context, sel ast.SelectionSet, obj *models.Iform) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, iformImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Iform")
		case "id":
			out.Values[i] = ec._Iform_id(ctx, field, obj)
		case "formType":
			out.Values[i] = ec._Iform_formType(ctx, field, obj)
		case "pipelineId":
			out.Values[i] = ec._Iform_pipelineId(ctx, field, obj)
		case "txtClient":
			out.Values[i] = ec._Iform_txtClient(ctx, field, obj)
		case "txtCompany":
			out.Values[i] = ec._Iform_txtCompany(ctx, field, obj)
		case "txtOrderNumber":
			out.Values[i] = ec._Iform_txtOrderNumber(ctx, field, obj)
		case "cmbOrderType":
			out.Values[i] = ec._Iform_cmbOrderType(ctx, field, obj)
		case "txtAddress":
			out.Values[i] = ec._Iform_txtAddress(ctx, field, obj)
		case "txtLocation":
			out.Values[i] = ec._Iform_txtLocation(ctx, field, obj)
		case "txtBrokerChecker":
			out.Values[i] = ec._Iform_txtBrokerChecker(ctx, field, obj)
		case "txtPreparerInfoAgent":
			out.Values[i] = ec._Iform_txtPreparerInfoAgent(ctx, field, obj)
		case "txtPreparerInfoAgentLicense":
			out.Values[i] = ec._Iform_txtPreparerInfoAgentLicense(ctx, field, obj)
		case "txtPreparerInfoBroker":
			out.Values[i] = ec._Iform_txtPreparerInfoBroker(ctx, field, obj)
		case "txtPreparerInfoBrokerLicense":
			out.Values[i] = ec._Iform_txtPreparerInfoBrokerLicense(ctx, field, obj)
		case "txtPreparerInfoAddress":
			out.Values[i] = ec._Iform_txtPreparerInfoAddress(ctx, field, obj)
		case "txtPreparerInfoBrokerage":
			out.Values[i] = ec._Iform_txtPreparerInfoBrokerage(ctx, field, obj)
		case "txtPreparerInfoAgentCompany":
			out.Values[i] = ec._Iform_txtPreparerInfoAgentCompany(ctx, field, obj)
		case "txtPreparerInfoPhone":
			out.Values[i] = ec._Iform_txtPreparerInfoPhone(ctx, field, obj)
		case "txtPreparerInfoYearsOfExperience":
			out.Values[i] = ec._Iform_txtPreparerInfoYearsOfExperience(ctx, field, obj)
		case "txtPreparerInfoEmail":
			out.Values[i] = ec._Iform_txtPreparerInfoEmail(ctx, field, obj)
		case "txtSubjectAddress":
			out.Values[i] = ec._Iform_txtSubjectAddress(ctx, field, obj)
		case "txtPreparerInfoMilesAwayFromSubject":
			out.Values[i] = ec._Iform_txtPreparerInfoMilesAwayFromSubject(ctx, field, obj)
		case "txtAgentZip":
			out.Values[i] = ec._Iform_txtAgentZip(ctx, field, obj)
		case "txtAgentCity":
			out.Values[i] = ec._Iform_txtAgentCity(ctx, field, obj)
		case "txtAgentState":
			out.Values[i] = ec._Iform_txtAgentState(ctx, field, obj)
		case "txtDisclaimer":
			out.Values[i] = ec._Iform_txtDisclaimer(ctx, field, obj)
		case "cmbLocation":
			out.Values[i] = ec._Iform_cmbLocation(ctx, field, obj)
		case "txtCounty":
			out.Values[i] = ec._Iform_txtCounty(ctx, field, obj)
		case "txtTrullia":
			out.Values[i] = ec._Iform_txtTrullia(ctx, field, obj)
		case "txtZillow":
			out.Values[i] = ec._Iform_txtZillow(ctx, field, obj)
		case "txtFindcompsnow":
			out.Values[i] = ec._Iform_txtFindcompsnow(ctx, field, obj)
		case "txtAverage":
			out.Values[i] = ec._Iform_txtAverage(ctx, field, obj)
		case "cmbForm":
			out.Values[i] = ec._Iform_cmbForm(ctx, field, obj)
		case "cmbForm2":
			out.Values[i] = ec._Iform_cmbForm2(ctx, field, obj)
		case "txtSaleComp1Address":
			out.Values[i] = ec._Iform_txtSaleComp1Address(ctx, field, obj)
		case "txtSaleComp2Address":
			out.Values[i] = ec._Iform_txtSaleComp2Address(ctx, field, obj)
		case "txtSaleComp3Address":
			out.Values[i] = ec._Iform_txtSaleComp3Address(ctx, field, obj)
		case "txtListComp1Address":
			out.Values[i] = ec._Iform_txtListComp1Address(ctx, field, obj)
		case "txtListComp2Address":
			out.Values[i] = ec._Iform_txtListComp2Address(ctx, field, obj)
		case "txtListComp3Address":
			out.Values[i] = ec._Iform_txtListComp3Address(ctx, field, obj)
		case "txtSubjectState":
			out.Values[i] = ec._Iform_txtSubjectState(ctx, field, obj)
		case "txtSaleComp1State":
			out.Values[i] = ec._Iform_txtSaleComp1State(ctx, field, obj)
		case "txtSaleComp2State":
			out.Values[i] = ec._Iform_txtSaleComp2State(ctx, field, obj)
		case "txtSaleComp3State":
			out.Values[i] = ec._Iform_txtSaleComp3State(ctx, field, obj)
		case "txtListComp1State":
			out.Values[i] = ec._Iform_txtListComp1State(ctx, field, obj)
		case "txtListComp2State":
			out.Values[i] = ec._Iform_txtListComp2State(ctx, field, obj)
		case "txtListComp3State":
			out.Values[i] = ec._Iform_txtListComp3State(ctx, field, obj)
		case "txtSubjectCity":
			out.Values[i] = ec._Iform_txtSubjectCity(ctx, field, obj)
		case "txtSaleComp1City":
			out.Values[i] = ec._Iform_txtSaleComp1City(ctx, field, obj)
		case "txtSaleComp2City":
			out.Values[i] = ec._Iform_txtSaleComp2City(ctx, field, obj)
		case "txtSaleComp3City":
			out.Values[i] = ec._Iform_txtSaleComp3City(ctx, field, obj)
		case "txtListComp1City":
			out.Values[i] = ec._Iform_txtListComp1City(ctx, field, obj)
		case "txtListComp2City":
			out.Values[i] = ec._Iform_txtListComp2City(ctx, field, obj)
		case "txtListComp3City":
			out.Values[i] = ec._Iform_txtListComp3City(ctx, field, obj)
		case "txtSubjectnoUnit":
			out.Values[i] = ec._Iform_txtSubjectnoUnit(ctx, field, obj)
		case "txtSubjectUnitNo":
			out.Values[i] = ec._Iform_txtSubjectUnitNo(ctx, field, obj)
		case "txtSaleComp1noUnit":
			out.Values[i] = ec._Iform_txtSaleComp1noUnit(ctx, field, obj)
		case "txtSaleComp1UnitNo":
			out.Values[i] = ec._Iform_txtSaleComp1UnitNo(ctx, field, obj)
		case "txtSaleComp2noUnit":
			out.Values[i] = ec._Iform_txtSaleComp2noUnit(ctx, field, obj)
		case "txtSaleComp2UnitNo":
			out.Values[i] = ec._Iform_txtSaleComp2UnitNo(ctx, field, obj)
		case "txtSaleComp3noUnit":
			out.Values[i] = ec._Iform_txtSaleComp3noUnit(ctx, field, obj)
		case "txtSaleComp3UnitNo":
			out.Values[i] = ec._Iform_txtSaleComp3UnitNo(ctx, field, obj)
		case "txtListComp1noUnit":
			out.Values[i] = ec._Iform_txtListComp1noUnit(ctx, field, obj)
		case "txtListComp1UnitNo":
			out.Values[i] = ec._Iform_txtListComp1UnitNo(ctx, field, obj)
		case "txtListComp2noUnit":
			out.Values[i] = ec._Iform_txtListComp2noUnit(ctx, field, obj)
		case "txtListComp2UnitNo":
			out.Values[i] = ec._Iform_txtListComp2UnitNo(ctx, field, obj)
		case "txtListComp3noUnit":
			out.Values[i] = ec._Iform_txtListComp3noUnit(ctx, field, obj)
		case "txtListComp3UnitNo":
			out.Values[i] = ec._Iform_txtListComp3UnitNo(ctx, field, obj)
		case "txtSubjectUnits":
			out.Values[i] = ec._Iform_txtSubjectUnits(ctx, field, obj)
		case "txtSaleComp1Units":
			out.Values[i] = ec._Iform_txtSaleComp1Units(ctx, field, obj)
		case "txtSaleComp2Units":
			out.Values[i] = ec._Iform_txtSaleComp2Units(ctx, field, obj)
		case "txtSaleComp3Units":
			out.Values[i] = ec._Iform_txtSaleComp3Units(ctx, field, obj)
		case "txtListComp1Units":
			out.Values[i] = ec._Iform_txtListComp1Units(ctx, field, obj)
		case "txtListComp2Units":
			out.Values[i] = ec._Iform_txtListComp2Units(ctx, field, obj)
		case "txtListComp3Units":
			out.Values[i] = ec._Iform_txtListComp3Units(ctx, field, obj)
		case "txtSubjectZip":
			out.Values[i] = ec._Iform_txtSubjectZip(ctx, field, obj)
		case "txtSaleComp1Zip":
			out.Values[i] = ec._Iform_txtSaleComp1Zip(ctx, field, obj)
		case "txtSaleComp2Zip":
			out.Values[i] = ec._Iform_txtSaleComp2Zip(ctx, field, obj)
		case "txtSaleComp3Zip":
			out.Values[i] = ec._Iform_txtSaleComp3Zip(ctx, field, obj)
		case "txtListComp1Zip":
			out.Values[i] = ec._Iform_txtListComp1Zip(ctx, field, obj)
		case "txtListComp2Zip":
			out.Values[i] = ec._Iform_txtListComp2Zip(ctx, field, obj)
		case "txtListComp3Zip":
			out.Values[i] = ec._Iform_txtListComp3Zip(ctx, field, obj)
		case "txtSubjectProximity":
			out.Values[i] = ec._Iform_txtSubjectProximity(ctx, field, obj)
		case "txtSaleComp1Proximity":
			out.Values[i] = ec._Iform_txtSaleComp1Proximity(ctx, field, obj)
		case "txtSaleComp2Proximity":
			out.Values[i] = ec._Iform_txtSaleComp2Proximity(ctx, field, obj)
		case "txtSaleComp3Proximity":
			out.Values[i] = ec._Iform_txtSaleComp3Proximity(ctx, field, obj)
		case "txtListComp1Proximity":
			out.Values[i] = ec._Iform_txtListComp1Proximity(ctx, field, obj)
		case "txtListComp2Proximity":
			out.Values[i] = ec._Iform_txtListComp2Proximity(ctx, field, obj)
		case "txtListComp3Proximity":
			out.Values[i] = ec._Iform_txtListComp3Proximity(ctx, field, obj)
		case "txtSubjectDataSource":
			out.Values[i] = ec._Iform_txtSubjectDataSource(ctx, field, obj)
		case "txtSaleComp1DataSource":
			out.Values[i] = ec._Iform_txtSaleComp1DataSource(ctx, field, obj)
		case "txtSaleComp2DataSource":
			out.Values[i] = ec._Iform_txtSaleComp2DataSource(ctx, field, obj)
		case "txtSaleComp3DataSource":
			out.Values[i] = ec._Iform_txtSaleComp3DataSource(ctx, field, obj)
		case "txtListComp1DataSource":
			out.Values[i] = ec._Iform_txtListComp1DataSource(ctx, field, obj)
		case "txtListComp2DataSource":
			out.Values[i] = ec._Iform_txtListComp2DataSource(ctx, field, obj)
		case "txtListComp3DataSource":
			out.Values[i] = ec._Iform_txtListComp3DataSource(ctx, field, obj)
		case "txtSubjectMLSNumber":
			out.Values[i] = ec._Iform_txtSubjectMLSNumber(ctx, field, obj)
		case "txtSaleComp1MLSNumber":
			out.Values[i] = ec._Iform_txtSaleComp1MLSNumber(ctx, field, obj)
		case "txtSaleComp2MLSNumber":
			out.Values[i] = ec._Iform_txtSaleComp2MLSNumber(ctx, field, obj)
		case "txtSaleComp3MLSNumber":
			out.Values[i] = ec._Iform_txtSaleComp3MLSNumber(ctx, field, obj)
		case "txtListComp1MLSNumber":
			out.Values[i] = ec._Iform_txtListComp1MLSNumber(ctx, field, obj)
		case "txtListComp2MLSNumber":
			out.Values[i] = ec._Iform_txtListComp2MLSNumber(ctx, field, obj)
		case "txtListComp3MLSNumber":
			out.Values[i] = ec._Iform_txtListComp3MLSNumber(ctx, field, obj)
		case "cmbSubjectSaleType":
			out.Values[i] = ec._Iform_cmbSubjectSaleType(ctx, field, obj)
		case "cmbSaleComp1SaleType":
			out.Values[i] = ec._Iform_cmbSaleComp1SaleType(ctx, field, obj)
		case "cmbSaleComp2SaleType":
			out.Values[i] = ec._Iform_cmbSaleComp2SaleType(ctx, field, obj)
		case "cmbSaleComp3SaleType":
			out.Values[i] = ec._Iform_cmbSaleComp3SaleType(ctx, field, obj)
		case "cmbListComp1SaleType":
			out.Values[i] = ec._Iform_cmbListComp1SaleType(ctx, field, obj)
		case "cmbListComp2SaleType":
			out.Values[i] = ec._Iform_cmbListComp2SaleType(ctx, field, obj)
		case "cmbListComp3SaleType":
			out.Values[i] = ec._Iform_cmbListComp3SaleType(ctx, field, obj)
		case "cmbSubjectType":
			out.Values[i] = ec._Iform_cmbSubjectType(ctx, field, obj)
		case "cmbSaleComp1Type":
			out.Values[i] = ec._Iform_cmbSaleComp1Type(ctx, field, obj)
		case "cmbSaleComp2Type":
			out.Values[i] = ec._Iform_cmbSaleComp2Type(ctx, field, obj)
		case "cmbSaleComp3Type":
			out.Values[i] = ec._Iform_cmbSaleComp3Type(ctx, field, obj)
		case "cmbListComp1Type":
			out.Values[i] = ec._Iform_cmbListComp1Type(ctx, field, obj)
		case "cmbListComp2Type":
			out.Values[i] = ec._Iform_cmbListComp2Type(ctx, field, obj)
		case "cmbListComp3Type":
			out.Values[i] = ec._Iform_cmbListComp3Type(ctx, field, obj)
		case "cmbSubjectStyle":
			out.Values[i] = ec._Iform_cmbSubjectStyle(ctx, field, obj)
		case "cmbSaleComp1Style":
			out.Values[i] = ec._Iform_cmbSaleComp1Style(ctx, field, obj)
		case "txtSaleComp1StyleAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1StyleAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Style":
			out.Values[i] = ec._Iform_cmbSaleComp2Style(ctx, field, obj)
		case "txtSaleComp2StyleAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2StyleAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Style":
			out.Values[i] = ec._Iform_cmbSaleComp3Style(ctx, field, obj)
		case "txtSaleComp3StyleAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3StyleAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Style":
			out.Values[i] = ec._Iform_cmbListComp1Style(ctx, field, obj)
		case "txtListComp1StyleAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1StyleAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Style":
			out.Values[i] = ec._Iform_cmbListComp2Style(ctx, field, obj)
		case "txtListComp2StyleAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2StyleAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Style":
			out.Values[i] = ec._Iform_cmbListComp3Style(ctx, field, obj)
		case "txtListComp3StyleAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3StyleAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectExtFinish":
			out.Values[i] = ec._Iform_cmbSubjectExtFinish(ctx, field, obj)
		case "cmbSaleComp1ExtFinish":
			out.Values[i] = ec._Iform_cmbSaleComp1ExtFinish(ctx, field, obj)
		case "txtSaleComp1ExtFinishAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1ExtFinishAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2ExtFinish":
			out.Values[i] = ec._Iform_cmbSaleComp2ExtFinish(ctx, field, obj)
		case "txtSaleComp2ExtFinishAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2ExtFinishAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3ExtFinish":
			out.Values[i] = ec._Iform_cmbSaleComp3ExtFinish(ctx, field, obj)
		case "txtSaleComp3ExtFinishAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3ExtFinishAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1ExtFinish":
			out.Values[i] = ec._Iform_cmbListComp1ExtFinish(ctx, field, obj)
		case "txtListComp1ExtFinishAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1ExtFinishAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2ExtFinish":
			out.Values[i] = ec._Iform_cmbListComp2ExtFinish(ctx, field, obj)
		case "txtListComp2ExtFinishAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2ExtFinishAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3ExtFinish":
			out.Values[i] = ec._Iform_cmbListComp3ExtFinish(ctx, field, obj)
		case "txtListComp3ExtFinishAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3ExtFinishAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectCondition":
			out.Values[i] = ec._Iform_cmbSubjectCondition(ctx, field, obj)
		case "cmbSaleComp1Condition":
			out.Values[i] = ec._Iform_cmbSaleComp1Condition(ctx, field, obj)
		case "txtSaleComp1ConditionAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1ConditionAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Condition":
			out.Values[i] = ec._Iform_cmbSaleComp2Condition(ctx, field, obj)
		case "txtSaleComp2ConditionAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2ConditionAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Condition":
			out.Values[i] = ec._Iform_cmbSaleComp3Condition(ctx, field, obj)
		case "txtSaleComp3ConditionAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3ConditionAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Condition":
			out.Values[i] = ec._Iform_cmbListComp1Condition(ctx, field, obj)
		case "txtListComp1ConditionAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1ConditionAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Condition":
			out.Values[i] = ec._Iform_cmbListComp2Condition(ctx, field, obj)
		case "txtListComp2ConditionAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2ConditionAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Condition":
			out.Values[i] = ec._Iform_cmbListComp3Condition(ctx, field, obj)
		case "txtListComp3ConditionAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3ConditionAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectQuality":
			out.Values[i] = ec._Iform_cmbSubjectQuality(ctx, field, obj)
		case "cmbSaleComp1Quality":
			out.Values[i] = ec._Iform_cmbSaleComp1Quality(ctx, field, obj)
		case "txtSaleComp1QualityAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1QualityAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Quality":
			out.Values[i] = ec._Iform_cmbSaleComp2Quality(ctx, field, obj)
		case "txtSaleComp2QualityAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2QualityAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Quality":
			out.Values[i] = ec._Iform_cmbSaleComp3Quality(ctx, field, obj)
		case "txtSaleComp3QualityAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3QualityAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Quality":
			out.Values[i] = ec._Iform_cmbListComp1Quality(ctx, field, obj)
		case "txtListComp1QualityAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1QualityAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Quality":
			out.Values[i] = ec._Iform_cmbListComp2Quality(ctx, field, obj)
		case "txtListComp2QualityAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2QualityAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Quality":
			out.Values[i] = ec._Iform_cmbListComp3Quality(ctx, field, obj)
		case "txtListComp3QualityAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3QualityAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectView":
			out.Values[i] = ec._Iform_cmbSubjectView(ctx, field, obj)
		case "cmbSaleComp1View":
			out.Values[i] = ec._Iform_cmbSaleComp1View(ctx, field, obj)
		case "txtSaleComp1ViewAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1ViewAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2View":
			out.Values[i] = ec._Iform_cmbSaleComp2View(ctx, field, obj)
		case "txtSaleComp2ViewAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2ViewAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3View":
			out.Values[i] = ec._Iform_cmbSaleComp3View(ctx, field, obj)
		case "txtSaleComp3ViewAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3ViewAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1View":
			out.Values[i] = ec._Iform_cmbListComp1View(ctx, field, obj)
		case "txtListComp1ViewAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1ViewAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2View":
			out.Values[i] = ec._Iform_cmbListComp2View(ctx, field, obj)
		case "txtListComp2ViewAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2ViewAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3View":
			out.Values[i] = ec._Iform_cmbListComp3View(ctx, field, obj)
		case "txtListComp3ViewAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3ViewAdjBuiltIn(ctx, field, obj)
		case "txtSubjectSubdivision":
			out.Values[i] = ec._Iform_txtSubjectSubdivision(ctx, field, obj)
		case "txtSaleComp1Subdivision":
			out.Values[i] = ec._Iform_txtSaleComp1Subdivision(ctx, field, obj)
		case "txtSaleComp2Subdivision":
			out.Values[i] = ec._Iform_txtSaleComp2Subdivision(ctx, field, obj)
		case "txtSaleComp3Subdivision":
			out.Values[i] = ec._Iform_txtSaleComp3Subdivision(ctx, field, obj)
		case "txtListComp1Subdivision":
			out.Values[i] = ec._Iform_txtListComp1Subdivision(ctx, field, obj)
		case "txtListComp2Subdivision":
			out.Values[i] = ec._Iform_txtListComp2Subdivision(ctx, field, obj)
		case "txtListComp3Subdivision":
			out.Values[i] = ec._Iform_txtListComp3Subdivision(ctx, field, obj)
		case "txtSubjectHOAFee":
			out.Values[i] = ec._Iform_txtSubjectHOAFee(ctx, field, obj)
		case "txtSaleComp1HOAFee":
			out.Values[i] = ec._Iform_txtSaleComp1HOAFee(ctx, field, obj)
		case "txtSaleComp2HOAFee":
			out.Values[i] = ec._Iform_txtSaleComp2HOAFee(ctx, field, obj)
		case "txtSaleComp3HOAFee":
			out.Values[i] = ec._Iform_txtSaleComp3HOAFee(ctx, field, obj)
		case "txtListComp1HOAFee":
			out.Values[i] = ec._Iform_txtListComp1HOAFee(ctx, field, obj)
		case "txtListComp2HOAFee":
			out.Values[i] = ec._Iform_txtListComp2HOAFee(ctx, field, obj)
		case "txtListComp3HOAFee":
			out.Values[i] = ec._Iform_txtListComp3HOAFee(ctx, field, obj)
		case "txtSubjectTotalRooms":
			out.Values[i] = ec._Iform_txtSubjectTotalRooms(ctx, field, obj)
		case "txtSaleComp1TotalRooms":
			out.Values[i] = ec._Iform_txtSaleComp1TotalRooms(ctx, field, obj)
		case "txtSaleComp1TotalRoomsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1TotalRoomsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2TotalRooms":
			out.Values[i] = ec._Iform_txtSaleComp2TotalRooms(ctx, field, obj)
		case "txtSaleComp2TotalRoomsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2TotalRoomsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3TotalRooms":
			out.Values[i] = ec._Iform_txtSaleComp3TotalRooms(ctx, field, obj)
		case "txtSaleComp3TotalRoomsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3TotalRoomsAdjBuiltIn(ctx, field, obj)
		case "txtListComp1TotalRooms":
			out.Values[i] = ec._Iform_txtListComp1TotalRooms(ctx, field, obj)
		case "txtListComp1TotalRoomsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1TotalRoomsAdjBuiltIn(ctx, field, obj)
		case "txtListComp2TotalRooms":
			out.Values[i] = ec._Iform_txtListComp2TotalRooms(ctx, field, obj)
		case "txtListComp2TotalRoomsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2TotalRoomsAdjBuiltIn(ctx, field, obj)
		case "txtListComp3TotalRooms":
			out.Values[i] = ec._Iform_txtListComp3TotalRooms(ctx, field, obj)
		case "txtListComp3TotalRoomsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3TotalRoomsAdjBuiltIn(ctx, field, obj)
		case "txtSubjectBedrooms":
			out.Values[i] = ec._Iform_txtSubjectBedrooms(ctx, field, obj)
		case "txtSaleComp1Bedrooms":
			out.Values[i] = ec._Iform_txtSaleComp1Bedrooms(ctx, field, obj)
		case "txtSaleComp1BedroomsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1BedroomsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2Bedrooms":
			out.Values[i] = ec._Iform_txtSaleComp2Bedrooms(ctx, field, obj)
		case "txtSaleComp2BedroomsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2BedroomsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3Bedrooms":
			out.Values[i] = ec._Iform_txtSaleComp3Bedrooms(ctx, field, obj)
		case "txtSaleComp3BedroomsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3BedroomsAdjBuiltIn(ctx, field, obj)
		case "txtListComp1Bedrooms":
			out.Values[i] = ec._Iform_txtListComp1Bedrooms(ctx, field, obj)
		case "txtListComp1BedroomsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1BedroomsAdjBuiltIn(ctx, field, obj)
		case "txtListComp2Bedrooms":
			out.Values[i] = ec._Iform_txtListComp2Bedrooms(ctx, field, obj)
		case "txtListComp2BedroomsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2BedroomsAdjBuiltIn(ctx, field, obj)
		case "txtListComp3Bedrooms":
			out.Values[i] = ec._Iform_txtListComp3Bedrooms(ctx, field, obj)
		case "txtListComp3BedroomsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3BedroomsAdjBuiltIn(ctx, field, obj)
		case "txtSubjectFullBaths":
			out.Values[i] = ec._Iform_txtSubjectFullBaths(ctx, field, obj)
		case "txtSaleComp1FullBaths":
			out.Values[i] = ec._Iform_txtSaleComp1FullBaths(ctx, field, obj)
		case "txtSaleComp1FullBathsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1FullBathsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2FullBaths":
			out.Values[i] = ec._Iform_txtSaleComp2FullBaths(ctx, field, obj)
		case "txtSaleComp2FullBathsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2FullBathsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3FullBaths":
			out.Values[i] = ec._Iform_txtSaleComp3FullBaths(ctx, field, obj)
		case "txtSaleComp3FullBathsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3FullBathsAdjBuiltIn(ctx, field, obj)
		case "txtListComp1FullBaths":
			out.Values[i] = ec._Iform_txtListComp1FullBaths(ctx, field, obj)
		case "txtListComp1FullBathsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1FullBathsAdjBuiltIn(ctx, field, obj)
		case "txtListComp2FullBaths":
			out.Values[i] = ec._Iform_txtListComp2FullBaths(ctx, field, obj)
		case "txtListComp2FullBathsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2FullBathsAdjBuiltIn(ctx, field, obj)
		case "txtListComp3FullBaths":
			out.Values[i] = ec._Iform_txtListComp3FullBaths(ctx, field, obj)
		case "txtListComp3FullBathsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3FullBathsAdjBuiltIn(ctx, field, obj)
		case "txtSubjectHalfBaths":
			out.Values[i] = ec._Iform_txtSubjectHalfBaths(ctx, field, obj)
		case "txtSaleComp1HalfBaths":
			out.Values[i] = ec._Iform_txtSaleComp1HalfBaths(ctx, field, obj)
		case "txtSaleComp1HalfBathsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1HalfBathsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2HalfBaths":
			out.Values[i] = ec._Iform_txtSaleComp2HalfBaths(ctx, field, obj)
		case "txtSaleComp2HalfBathsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2HalfBathsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3HalfBaths":
			out.Values[i] = ec._Iform_txtSaleComp3HalfBaths(ctx, field, obj)
		case "txtSaleComp3HalfBathsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3HalfBathsAdjBuiltIn(ctx, field, obj)
		case "txtListComp1HalfBaths":
			out.Values[i] = ec._Iform_txtListComp1HalfBaths(ctx, field, obj)
		case "txtListComp1HalfBathsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1HalfBathsAdjBuiltIn(ctx, field, obj)
		case "txtListComp2HalfBaths":
			out.Values[i] = ec._Iform_txtListComp2HalfBaths(ctx, field, obj)
		case "txtListComp2HalfBathsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2HalfBathsAdjBuiltIn(ctx, field, obj)
		case "txtListComp3HalfBaths":
			out.Values[i] = ec._Iform_txtListComp3HalfBaths(ctx, field, obj)
		case "txtListComp3HalfBathsAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3HalfBathsAdjBuiltIn(ctx, field, obj)
		case "txtSubjectGLA":
			out.Values[i] = ec._Iform_txtSubjectGLA(ctx, field, obj)
		case "txtSaleComp1GLA":
			out.Values[i] = ec._Iform_txtSaleComp1GLA(ctx, field, obj)
		case "txtSaleComp1GLAAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1GLAAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2GLA":
			out.Values[i] = ec._Iform_txtSaleComp2GLA(ctx, field, obj)
		case "txtSaleComp2GLAAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2GLAAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3GLA":
			out.Values[i] = ec._Iform_txtSaleComp3GLA(ctx, field, obj)
		case "txtSaleComp3GLAAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3GLAAdjBuiltIn(ctx, field, obj)
		case "txtListComp1GLA":
			out.Values[i] = ec._Iform_txtListComp1GLA(ctx, field, obj)
		case "txtListComp1GLAAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1GLAAdjBuiltIn(ctx, field, obj)
		case "txtListComp2GLA":
			out.Values[i] = ec._Iform_txtListComp2GLA(ctx, field, obj)
		case "txtListComp2GLAAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2GLAAdjBuiltIn(ctx, field, obj)
		case "txtListComp3GLA":
			out.Values[i] = ec._Iform_txtListComp3GLA(ctx, field, obj)
		case "txtListComp3GLAAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3GLAAdjBuiltIn(ctx, field, obj)
		case "txtSubjectYearBuilt":
			out.Values[i] = ec._Iform_txtSubjectYearBuilt(ctx, field, obj)
		case "txtSaleComp1YearBuilt":
			out.Values[i] = ec._Iform_txtSaleComp1YearBuilt(ctx, field, obj)
		case "txtSaleComp1YearBuiltAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1YearBuiltAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2YearBuilt":
			out.Values[i] = ec._Iform_txtSaleComp2YearBuilt(ctx, field, obj)
		case "txtSaleComp2YearBuiltAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2YearBuiltAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3YearBuilt":
			out.Values[i] = ec._Iform_txtSaleComp3YearBuilt(ctx, field, obj)
		case "txtSaleComp3YearBuiltAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3YearBuiltAdjBuiltIn(ctx, field, obj)
		case "txtListComp1YearBuilt":
			out.Values[i] = ec._Iform_txtListComp1YearBuilt(ctx, field, obj)
		case "txtListComp1YearBuiltAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1YearBuiltAdjBuiltIn(ctx, field, obj)
		case "txtListComp2YearBuilt":
			out.Values[i] = ec._Iform_txtListComp2YearBuilt(ctx, field, obj)
		case "txtListComp2YearBuiltAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2YearBuiltAdjBuiltIn(ctx, field, obj)
		case "txtListComp3YearBuilt":
			out.Values[i] = ec._Iform_txtListComp3YearBuilt(ctx, field, obj)
		case "txtListComp3YearBuiltAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3YearBuiltAdjBuiltIn(ctx, field, obj)
		case "txtSubjectAge":
			out.Values[i] = ec._Iform_txtSubjectAge(ctx, field, obj)
		case "txtSaleComp1Age":
			out.Values[i] = ec._Iform_txtSaleComp1Age(ctx, field, obj)
		case "txtSaleComp2Age":
			out.Values[i] = ec._Iform_txtSaleComp2Age(ctx, field, obj)
		case "txtSaleComp3Age":
			out.Values[i] = ec._Iform_txtSaleComp3Age(ctx, field, obj)
		case "txtListComp1Age":
			out.Values[i] = ec._Iform_txtListComp1Age(ctx, field, obj)
		case "txtListComp2Age":
			out.Values[i] = ec._Iform_txtListComp2Age(ctx, field, obj)
		case "txtListComp3Age":
			out.Values[i] = ec._Iform_txtListComp3Age(ctx, field, obj)
		case "txtSubjectAcres":
			out.Values[i] = ec._Iform_txtSubjectAcres(ctx, field, obj)
		case "txtSaleComp1Acres":
			out.Values[i] = ec._Iform_txtSaleComp1Acres(ctx, field, obj)
		case "txtSaleComp1AcresAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1AcresAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2Acres":
			out.Values[i] = ec._Iform_txtSaleComp2Acres(ctx, field, obj)
		case "txtSaleComp2AcresAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2AcresAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3Acres":
			out.Values[i] = ec._Iform_txtSaleComp3Acres(ctx, field, obj)
		case "txtSaleComp3AcresAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3AcresAdjBuiltIn(ctx, field, obj)
		case "txtListComp1Acres":
			out.Values[i] = ec._Iform_txtListComp1Acres(ctx, field, obj)
		case "txtListComp1AcresAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1AcresAdjBuiltIn(ctx, field, obj)
		case "txtListComp2Acres":
			out.Values[i] = ec._Iform_txtListComp2Acres(ctx, field, obj)
		case "txtListComp2AcresAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2AcresAdjBuiltIn(ctx, field, obj)
		case "txtListComp3Acres":
			out.Values[i] = ec._Iform_txtListComp3Acres(ctx, field, obj)
		case "txtListComp3AcresAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3AcresAdjBuiltIn(ctx, field, obj)
		case "txtSubjectSquareFeet":
			out.Values[i] = ec._Iform_txtSubjectSquareFeet(ctx, field, obj)
		case "txtSaleComp1SquareFeet":
			out.Values[i] = ec._Iform_txtSaleComp1SquareFeet(ctx, field, obj)
		case "txtSaleComp2SquareFeet":
			out.Values[i] = ec._Iform_txtSaleComp2SquareFeet(ctx, field, obj)
		case "txtSaleComp3SquareFeet":
			out.Values[i] = ec._Iform_txtSaleComp3SquareFeet(ctx, field, obj)
		case "txtListComp1SquareFeet":
			out.Values[i] = ec._Iform_txtListComp1SquareFeet(ctx, field, obj)
		case "txtListComp2SquareFeet":
			out.Values[i] = ec._Iform_txtListComp2SquareFeet(ctx, field, obj)
		case "txtListComp3SquareFeet":
			out.Values[i] = ec._Iform_txtListComp3SquareFeet(ctx, field, obj)
		case "cmbSubjectGarage":
			out.Values[i] = ec._Iform_cmbSubjectGarage(ctx, field, obj)
		case "cmbSaleComp1Garage":
			out.Values[i] = ec._Iform_cmbSaleComp1Garage(ctx, field, obj)
		case "txtSaleComp1GarageAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1GarageAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Garage":
			out.Values[i] = ec._Iform_cmbSaleComp2Garage(ctx, field, obj)
		case "txtSaleComp2GarageAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2GarageAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Garage":
			out.Values[i] = ec._Iform_cmbSaleComp3Garage(ctx, field, obj)
		case "txtSaleComp3GarageAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3GarageAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Garage":
			out.Values[i] = ec._Iform_cmbListComp1Garage(ctx, field, obj)
		case "txtListComp1GarageAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1GarageAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Garage":
			out.Values[i] = ec._Iform_cmbListComp2Garage(ctx, field, obj)
		case "txtListComp2GarageAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2GarageAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Garage":
			out.Values[i] = ec._Iform_cmbListComp3Garage(ctx, field, obj)
		case "txtListComp3GarageAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3GarageAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectPool":
			out.Values[i] = ec._Iform_cmbSubjectPool(ctx, field, obj)
		case "cmbSaleComp1Pool":
			out.Values[i] = ec._Iform_cmbSaleComp1Pool(ctx, field, obj)
		case "txtSaleComp1PoolAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1PoolAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Pool":
			out.Values[i] = ec._Iform_cmbSaleComp2Pool(ctx, field, obj)
		case "txtSaleComp2PoolAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2PoolAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Pool":
			out.Values[i] = ec._Iform_cmbSaleComp3Pool(ctx, field, obj)
		case "txtSaleComp3PoolAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3PoolAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Pool":
			out.Values[i] = ec._Iform_cmbListComp1Pool(ctx, field, obj)
		case "txtListComp1PoolAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1PoolAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Pool":
			out.Values[i] = ec._Iform_cmbListComp2Pool(ctx, field, obj)
		case "txtListComp2PoolAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2PoolAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Pool":
			out.Values[i] = ec._Iform_cmbListComp3Pool(ctx, field, obj)
		case "txtListComp3PoolAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3PoolAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectPorchPatioDeck":
			out.Values[i] = ec._Iform_cmbSubjectPorchPatioDeck(ctx, field, obj)
		case "cmbSaleComp1PorchPatioDeck":
			out.Values[i] = ec._Iform_cmbSaleComp1PorchPatioDeck(ctx, field, obj)
		case "txtSaleComp1PorchPatioDeckAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1PorchPatioDeckAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2PorchPatioDeck":
			out.Values[i] = ec._Iform_cmbSaleComp2PorchPatioDeck(ctx, field, obj)
		case "txtSaleComp2PorchPatioDeckAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2PorchPatioDeckAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3PorchPatioDeck":
			out.Values[i] = ec._Iform_cmbSaleComp3PorchPatioDeck(ctx, field, obj)
		case "txtSaleComp3PorchPatioDeckAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3PorchPatioDeckAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1PorchPatioDeck":
			out.Values[i] = ec._Iform_cmbListComp1PorchPatioDeck(ctx, field, obj)
		case "txtListComp1PorchPatioDeckAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1PorchPatioDeckAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2PorchPatioDeck":
			out.Values[i] = ec._Iform_cmbListComp2PorchPatioDeck(ctx, field, obj)
		case "txtListComp2PorchPatioDeckAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2PorchPatioDeckAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3PorchPatioDeck":
			out.Values[i] = ec._Iform_cmbListComp3PorchPatioDeck(ctx, field, obj)
		case "txtListComp3PorchPatioDeckAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3PorchPatioDeckAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectFireplace":
			out.Values[i] = ec._Iform_cmbSubjectFireplace(ctx, field, obj)
		case "cmbSaleComp1Fireplace":
			out.Values[i] = ec._Iform_cmbSaleComp1Fireplace(ctx, field, obj)
		case "txtSaleComp1FireplaceAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1FireplaceAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Fireplace":
			out.Values[i] = ec._Iform_cmbSaleComp2Fireplace(ctx, field, obj)
		case "txtSaleComp2FireplaceAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2FireplaceAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Fireplace":
			out.Values[i] = ec._Iform_cmbSaleComp3Fireplace(ctx, field, obj)
		case "txtSaleComp3FireplaceAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3FireplaceAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Fireplace":
			out.Values[i] = ec._Iform_cmbListComp1Fireplace(ctx, field, obj)
		case "txtListComp1FireplaceAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1FireplaceAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Fireplace":
			out.Values[i] = ec._Iform_cmbListComp2Fireplace(ctx, field, obj)
		case "txtListComp2FireplaceAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2FireplaceAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Fireplace":
			out.Values[i] = ec._Iform_cmbListComp3Fireplace(ctx, field, obj)
		case "txtListComp3FireplaceAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3FireplaceAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectBasement":
			out.Values[i] = ec._Iform_cmbSubjectBasement(ctx, field, obj)
		case "cmbSaleComp1Basement":
			out.Values[i] = ec._Iform_cmbSaleComp1Basement(ctx, field, obj)
		case "txtSaleComp1BasementAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1BasementAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Basement":
			out.Values[i] = ec._Iform_cmbSaleComp2Basement(ctx, field, obj)
		case "txtSaleComp2BasementAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2BasementAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Basement":
			out.Values[i] = ec._Iform_cmbSaleComp3Basement(ctx, field, obj)
		case "txtSaleComp3BasementAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3BasementAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Basement":
			out.Values[i] = ec._Iform_cmbListComp1Basement(ctx, field, obj)
		case "txtListComp1BasementAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1BasementAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Basement":
			out.Values[i] = ec._Iform_cmbListComp2Basement(ctx, field, obj)
		case "txtListComp2BasementAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2BasementAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Basement":
			out.Values[i] = ec._Iform_cmbListComp3Basement(ctx, field, obj)
		case "txtListComp3BasementAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3BasementAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectIsFinished":
			out.Values[i] = ec._Iform_cmbSubjectIsFinished(ctx, field, obj)
		case "cmbSaleComp1IsFinished":
			out.Values[i] = ec._Iform_cmbSaleComp1IsFinished(ctx, field, obj)
		case "txtSaleComp1IsFinishedAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1IsFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2IsFinished":
			out.Values[i] = ec._Iform_cmbSaleComp2IsFinished(ctx, field, obj)
		case "txtSaleComp2IsFinishedAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2IsFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3IsFinished":
			out.Values[i] = ec._Iform_cmbSaleComp3IsFinished(ctx, field, obj)
		case "txtSaleComp3IsFinishedAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3IsFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1IsFinished":
			out.Values[i] = ec._Iform_cmbListComp1IsFinished(ctx, field, obj)
		case "txtListComp1IsFinishedAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1IsFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2IsFinished":
			out.Values[i] = ec._Iform_cmbListComp2IsFinished(ctx, field, obj)
		case "txtListComp2IsFinishedAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2IsFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3IsFinished":
			out.Values[i] = ec._Iform_cmbListComp3IsFinished(ctx, field, obj)
		case "txtListComp3IsFinishedAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3IsFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectPercentFinished":
			out.Values[i] = ec._Iform_cmbSubjectPercentFinished(ctx, field, obj)
		case "cmbSaleComp1PercentFinished":
			out.Values[i] = ec._Iform_cmbSaleComp1PercentFinished(ctx, field, obj)
		case "txtSaleComp1PercentFinishedAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1PercentFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2PercentFinished":
			out.Values[i] = ec._Iform_cmbSaleComp2PercentFinished(ctx, field, obj)
		case "txtSaleComp2PercentFinishedAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2PercentFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3PercentFinished":
			out.Values[i] = ec._Iform_cmbSaleComp3PercentFinished(ctx, field, obj)
		case "txtSaleComp3PercentFinishedAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3PercentFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1PercentFinished":
			out.Values[i] = ec._Iform_cmbListComp1PercentFinished(ctx, field, obj)
		case "txtListComp1PercentFinishedAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1PercentFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2PercentFinished":
			out.Values[i] = ec._Iform_cmbListComp2PercentFinished(ctx, field, obj)
		case "txtListComp2PercentFinishedAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2PercentFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3PercentFinished":
			out.Values[i] = ec._Iform_cmbListComp3PercentFinished(ctx, field, obj)
		case "txtListComp3PercentFinishedAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3PercentFinishedAdjBuiltIn(ctx, field, obj)
		case "txtSubjectBasementSqFt":
			out.Values[i] = ec._Iform_txtSubjectBasementSqFt(ctx, field, obj)
		case "txtSaleComp1BasementSqFt":
			out.Values[i] = ec._Iform_txtSaleComp1BasementSqFt(ctx, field, obj)
		case "txtSaleComp1BasementSqFtAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp1BasementSqFtAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2BasementSqFt":
			out.Values[i] = ec._Iform_txtSaleComp2BasementSqFt(ctx, field, obj)
		case "txtSaleComp2BasementSqFtAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp2BasementSqFtAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3BasementSqFt":
			out.Values[i] = ec._Iform_txtSaleComp3BasementSqFt(ctx, field, obj)
		case "txtSaleComp3BasementSqFtAdjBuiltIn":
			out.Values[i] = ec._Iform_txtSaleComp3BasementSqFtAdjBuiltIn(ctx, field, obj)
		case "txtListComp1BasementSqFt":
			out.Values[i] = ec._Iform_txtListComp1BasementSqFt(ctx, field, obj)
		case "txtListComp1BasementSqFtAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp1BasementSqFtAdjBuiltIn(ctx, field, obj)
		case "txtListComp2BasementSqFt":
			out.Values[i] = ec._Iform_txtListComp2BasementSqFt(ctx, field, obj)
		case "txtListComp2BasementSqFtAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp2BasementSqFtAdjBuiltIn(ctx, field, obj)
		case "txtListComp3BasementSqFt":
			out.Values[i] = ec._Iform_txtListComp3BasementSqFt(ctx, field, obj)
		case "txtListComp3BasementSqFtAdjBuiltIn":
			out.Values[i] = ec._Iform_txtListComp3BasementSqFtAdjBuiltIn(ctx, field, obj)
		case "txtSubjectOriginalListDate":
			out.Values[i] = ec._Iform_txtSubjectOriginalListDate(ctx, field, obj)
		case "txtSaleComp1OriginalListDate":
			out.Values[i] = ec._Iform_txtSaleComp1OriginalListDate(ctx, field, obj)
		case "txtSaleComp2OriginalListDate":
			out.Values[i] = ec._Iform_txtSaleComp2OriginalListDate(ctx, field, obj)
		case "txtSaleComp3OriginalListDate":
			out.Values[i] = ec._Iform_txtSaleComp3OriginalListDate(ctx, field, obj)
		case "txtListComp1OriginalListDate":
			out.Values[i] = ec._Iform_txtListComp1OriginalListDate(ctx, field, obj)
		case "txtListComp2OriginalListDate":
			out.Values[i] = ec._Iform_txtListComp2OriginalListDate(ctx, field, obj)
		case "txtListComp3OriginalListDate":
			out.Values[i] = ec._Iform_txtListComp3OriginalListDate(ctx, field, obj)
		case "txtSubjectCurrentListDate":
			out.Values[i] = ec._Iform_txtSubjectCurrentListDate(ctx, field, obj)
		case "txtSaleComp1CurrentListDate":
			out.Values[i] = ec._Iform_txtSaleComp1CurrentListDate(ctx, field, obj)
		case "txtSaleComp2CurrentListDate":
			out.Values[i] = ec._Iform_txtSaleComp2CurrentListDate(ctx, field, obj)
		case "txtSaleComp3CurrentListDate":
			out.Values[i] = ec._Iform_txtSaleComp3CurrentListDate(ctx, field, obj)
		case "txtListComp1CurrentListDate":
			out.Values[i] = ec._Iform_txtListComp1CurrentListDate(ctx, field, obj)
		case "txtListComp2CurrentListDate":
			out.Values[i] = ec._Iform_txtListComp2CurrentListDate(ctx, field, obj)
		case "txtListComp3CurrentListDate":
			out.Values[i] = ec._Iform_txtListComp3CurrentListDate(ctx, field, obj)
		case "txtSubjectOriginalListPrice":
			out.Values[i] = ec._Iform_txtSubjectOriginalListPrice(ctx, field, obj)
		case "txtSaleComp1OriginalListPrice":
			out.Values[i] = ec._Iform_txtSaleComp1OriginalListPrice(ctx, field, obj)
		case "txtSaleComp2OriginalListPrice":
			out.Values[i] = ec._Iform_txtSaleComp2OriginalListPrice(ctx, field, obj)
		case "txtSaleComp3OriginalListPrice":
			out.Values[i] = ec._Iform_txtSaleComp3OriginalListPrice(ctx, field, obj)
		case "txtListComp1OriginalListPrice":
			out.Values[i] = ec._Iform_txtListComp1OriginalListPrice(ctx, field, obj)
		case "txtListComp2OriginalListPrice":
			out.Values[i] = ec._Iform_txtListComp2OriginalListPrice(ctx, field, obj)
		case "txtListComp3OriginalListPrice":
			out.Values[i] = ec._Iform_txtListComp3OriginalListPrice(ctx, field, obj)
		case "txtSubjectListPrice":
			out.Values[i] = ec._Iform_txtSubjectListPrice(ctx, field, obj)
		case "txtSaleComp1ListPrice":
			out.Values[i] = ec._Iform_txtSaleComp1ListPrice(ctx, field, obj)
		case "txtSaleComp2ListPrice":
			out.Values[i] = ec._Iform_txtSaleComp2ListPrice(ctx, field, obj)
		case "txtSaleComp3ListPrice":
			out.Values[i] = ec._Iform_txtSaleComp3ListPrice(ctx, field, obj)
		case "txtListComp1ListPrice":
			out.Values[i] = ec._Iform_txtListComp1ListPrice(ctx, field, obj)
		case "txtListComp2ListPrice":
			out.Values[i] = ec._Iform_txtListComp2ListPrice(ctx, field, obj)
		case "txtListComp3ListPrice":
			out.Values[i] = ec._Iform_txtListComp3ListPrice(ctx, field, obj)
		case "txtSubjectSalePrice":
			out.Values[i] = ec._Iform_txtSubjectSalePrice(ctx, field, obj)
		case "txtSaleComp1SalePrice":
			out.Values[i] = ec._Iform_txtSaleComp1SalePrice(ctx, field, obj)
		case "txtSaleComp2SalePrice":
			out.Values[i] = ec._Iform_txtSaleComp2SalePrice(ctx, field, obj)
		case "txtSaleComp3SalePrice":
			out.Values[i] = ec._Iform_txtSaleComp3SalePrice(ctx, field, obj)
		case "txtSubjectSaleDate":
			out.Values[i] = ec._Iform_txtSubjectSaleDate(ctx, field, obj)
		case "txtSaleComp1SaleDate":
			out.Values[i] = ec._Iform_txtSaleComp1SaleDate(ctx, field, obj)
		case "txtSaleComp2SaleDate":
			out.Values[i] = ec._Iform_txtSaleComp2SaleDate(ctx, field, obj)
		case "txtSaleComp3SaleDate":
			out.Values[i] = ec._Iform_txtSaleComp3SaleDate(ctx, field, obj)
		case "cmbSubjectFinancing":
			out.Values[i] = ec._Iform_cmbSubjectFinancing(ctx, field, obj)
		case "cmbSaleComp1Financing":
			out.Values[i] = ec._Iform_cmbSaleComp1Financing(ctx, field, obj)
		case "cmbSaleComp2Financing":
			out.Values[i] = ec._Iform_cmbSaleComp2Financing(ctx, field, obj)
		case "cmbSaleComp3Financing":
			out.Values[i] = ec._Iform_cmbSaleComp3Financing(ctx, field, obj)
		case "cmbListComp1Financing":
			out.Values[i] = ec._Iform_cmbListComp1Financing(ctx, field, obj)
		case "cmbListComp2Financing":
			out.Values[i] = ec._Iform_cmbListComp2Financing(ctx, field, obj)
		case "cmbListComp3Financing":
			out.Values[i] = ec._Iform_cmbListComp3Financing(ctx, field, obj)
		case "txtSubjectDOM":
			out.Values[i] = ec._Iform_txtSubjectDOM(ctx, field, obj)
		case "txtSaleComp1DOM":
			out.Values[i] = ec._Iform_txtSaleComp1DOM(ctx, field, obj)
		case "txtSaleComp2DOM":
			out.Values[i] = ec._Iform_txtSaleComp2DOM(ctx, field, obj)
		case "txtSaleComp3DOM":
			out.Values[i] = ec._Iform_txtSaleComp3DOM(ctx, field, obj)
		case "txtListComp1DOM":
			out.Values[i] = ec._Iform_txtListComp1DOM(ctx, field, obj)
		case "txtListComp2DOM":
			out.Values[i] = ec._Iform_txtListComp2DOM(ctx, field, obj)
		case "txtListComp3DOM":
			out.Values[i] = ec._Iform_txtListComp3DOM(ctx, field, obj)
		case "txtSubjectPricePerSqFt":
			out.Values[i] = ec._Iform_txtSubjectPricePerSqFt(ctx, field, obj)
		case "txtSaleComp1PricePerSqFt":
			out.Values[i] = ec._Iform_txtSaleComp1PricePerSqFt(ctx, field, obj)
		case "txtSaleComp2PricePerSqFt":
			out.Values[i] = ec._Iform_txtSaleComp2PricePerSqFt(ctx, field, obj)
		case "txtSaleComp3PricePerSqFt":
			out.Values[i] = ec._Iform_txtSaleComp3PricePerSqFt(ctx, field, obj)
		case "txtListComp1PricePerSqFt":
			out.Values[i] = ec._Iform_txtListComp1PricePerSqFt(ctx, field, obj)
		case "txtListComp2PricePerSqFt":
			out.Values[i] = ec._Iform_txtListComp2PricePerSqFt(ctx, field, obj)
		case "txtListComp3PricePerSqFt":
			out.Values[i] = ec._Iform_txtListComp3PricePerSqFt(ctx, field, obj)
		case "txtSubjectAdjustments":
			out.Values[i] = ec._Iform_txtSubjectAdjustments(ctx, field, obj)
		case "txtSaleComp1Adjustments":
			out.Values[i] = ec._Iform_txtSaleComp1Adjustments(ctx, field, obj)
		case "txtSaleComp2Adjustments":
			out.Values[i] = ec._Iform_txtSaleComp2Adjustments(ctx, field, obj)
		case "txtSaleComp3Adjustments":
			out.Values[i] = ec._Iform_txtSaleComp3Adjustments(ctx, field, obj)
		case "txtListComp1Adjustments":
			out.Values[i] = ec._Iform_txtListComp1Adjustments(ctx, field, obj)
		case "txtListComp2Adjustments":
			out.Values[i] = ec._Iform_txtListComp2Adjustments(ctx, field, obj)
		case "txtListComp3Adjustments":
			out.Values[i] = ec._Iform_txtListComp3Adjustments(ctx, field, obj)
		case "txtSubjectCompTotals":
			out.Values[i] = ec._Iform_txtSubjectCompTotals(ctx, field, obj)
		case "txtSaleComp1CompTotals":
			out.Values[i] = ec._Iform_txtSaleComp1CompTotals(ctx, field, obj)
		case "txtSaleComp2CompTotals":
			out.Values[i] = ec._Iform_txtSaleComp2CompTotals(ctx, field, obj)
		case "txtSaleComp3CompTotals":
			out.Values[i] = ec._Iform_txtSaleComp3CompTotals(ctx, field, obj)
		case "txtListComp1CompTotals":
			out.Values[i] = ec._Iform_txtListComp1CompTotals(ctx, field, obj)
		case "txtListComp2CompTotals":
			out.Values[i] = ec._Iform_txtListComp2CompTotals(ctx, field, obj)
		case "txtListComp3CompTotals":
			out.Values[i] = ec._Iform_txtListComp3CompTotals(ctx, field, obj)
		case "cmbListComp1CommentType":
			out.Values[i] = ec._Iform_cmbListComp1CommentType(ctx, field, obj)
		case "txtListComp1ComparableComments":
			out.Values[i] = ec._Iform_txtListComp1ComparableComments(ctx, field, obj)
		case "txtListComp1FormatAdjustments":
			out.Values[i] = ec._Iform_txtListComp1FormatAdjustments(ctx, field, obj)
		case "txtListComp1MLSComments":
			out.Values[i] = ec._Iform_txtListComp1MLSComments(ctx, field, obj)
		case "cmbListComp2CommentType":
			out.Values[i] = ec._Iform_cmbListComp2CommentType(ctx, field, obj)
		case "txtListComp2ComparableComments":
			out.Values[i] = ec._Iform_txtListComp2ComparableComments(ctx, field, obj)
		case "txtListComp2FormatAdjustments":
			out.Values[i] = ec._Iform_txtListComp2FormatAdjustments(ctx, field, obj)
		case "txtListComp2MLSComments":
			out.Values[i] = ec._Iform_txtListComp2MLSComments(ctx, field, obj)
		case "cmbListComp3CommentType":
			out.Values[i] = ec._Iform_cmbListComp3CommentType(ctx, field, obj)
		case "txtListComp3ComparableComments":
			out.Values[i] = ec._Iform_txtListComp3ComparableComments(ctx, field, obj)
		case "txtListComp3FormatAdjustments":
			out.Values[i] = ec._Iform_txtListComp3FormatAdjustments(ctx, field, obj)
		case "txtListComp3MLSComments":
			out.Values[i] = ec._Iform_txtListComp3MLSComments(ctx, field, obj)
		case "cmbSaleComp1CommentType":
			out.Values[i] = ec._Iform_cmbSaleComp1CommentType(ctx, field, obj)
		case "txtSaleComp1ComparableComments":
			out.Values[i] = ec._Iform_txtSaleComp1ComparableComments(ctx, field, obj)
		case "txtSaleComp1FormatAdjustments":
			out.Values[i] = ec._Iform_txtSaleComp1FormatAdjustments(ctx, field, obj)
		case "txtSaleComp1MLSComments":
			out.Values[i] = ec._Iform_txtSaleComp1MLSComments(ctx, field, obj)
		case "cmbSaleComp2CommentType":
			out.Values[i] = ec._Iform_cmbSaleComp2CommentType(ctx, field, obj)
		case "txtSaleComp2ComparableComments":
			out.Values[i] = ec._Iform_txtSaleComp2ComparableComments(ctx, field, obj)
		case "txtSaleComp2FormatAdjustments":
			out.Values[i] = ec._Iform_txtSaleComp2FormatAdjustments(ctx, field, obj)
		case "txtSaleComp2MLSComments":
			out.Values[i] = ec._Iform_txtSaleComp2MLSComments(ctx, field, obj)
		case "cmbSaleComp3CommentType":
			out.Values[i] = ec._Iform_cmbSaleComp3CommentType(ctx, field, obj)
		case "txtSaleComp3ComparableComments":
			out.Values[i] = ec._Iform_txtSaleComp3ComparableComments(ctx, field, obj)
		case "txtSaleComp3FormatAdjustments":
			out.Values[i] = ec._Iform_txtSaleComp3FormatAdjustments(ctx, field, obj)
		case "txtSaleComp3MLSComments":
			out.Values[i] = ec._Iform_txtSaleComp3MLSComments(ctx, field, obj)
		case "cmbNeighborhoodTrend":
			out.Values[i] = ec._Iform_cmbNeighborhoodTrend(ctx, field, obj)
		case "txtMonthlyPecent":
			out.Values[i] = ec._Iform_txtMonthlyPecent(ctx, field, obj)
		case "txtEstimatedRent":
			out.Values[i] = ec._Iform_txtEstimatedRent(ctx, field, obj)
		case "txtEstimatedDaysOnMarket":
			out.Values[i] = ec._Iform_txtEstimatedDaysOnMarket(ctx, field, obj)
		case "txtNoBoarded":
			out.Values[i] = ec._Iform_txtNoBoarded(ctx, field, obj)
		case "txtNoOfActive":
			out.Values[i] = ec._Iform_txtNoOfActive(ctx, field, obj)
		case "txt6MonthPecent":
			out.Values[i] = ec._Iform_txt6MonthPecent(ctx, field, obj)
		case "txtAnnualPecent":
			out.Values[i] = ec._Iform_txtAnnualPecent(ctx, field, obj)
		case "txtListings":
			out.Values[i] = ec._Iform_txtListings(ctx, field, obj)
		case "cmbSupply":
			out.Values[i] = ec._Iform_cmbSupply(ctx, field, obj)
		case "txtListingsMinValue":
			out.Values[i] = ec._Iform_txtListingsMinValue(ctx, field, obj)
		case "txtListingsRange1":
			out.Values[i] = ec._Iform_txtListingsRange1(ctx, field, obj)
		case "txtListingsMedValue":
			out.Values[i] = ec._Iform_txtListingsMedValue(ctx, field, obj)
		case "txtListingsMaxValue":
			out.Values[i] = ec._Iform_txtListingsMaxValue(ctx, field, obj)
		case "txtListingsRange2":
			out.Values[i] = ec._Iform_txtListingsRange2(ctx, field, obj)
		case "txtListingsDOM":
			out.Values[i] = ec._Iform_txtListingsDOM(ctx, field, obj)
		case "txtListingsDOMRange1":
			out.Values[i] = ec._Iform_txtListingsDOMRange1(ctx, field, obj)
		case "txtListingsDOMRange2":
			out.Values[i] = ec._Iform_txtListingsDOMRange2(ctx, field, obj)
		case "cmbREOTrend":
			out.Values[i] = ec._Iform_cmbREOTrend(ctx, field, obj)
		case "txtNoOfFM":
			out.Values[i] = ec._Iform_txtNoOfFM(ctx, field, obj)
		case "txtNoOfSS":
			out.Values[i] = ec._Iform_txtNoOfSS(ctx, field, obj)
		case "txtNoOfREO":
			out.Values[i] = ec._Iform_txtNoOfREO(ctx, field, obj)
		case "txtNoOfDistressed":
			out.Values[i] = ec._Iform_txtNoOfDistressed(ctx, field, obj)
		case "txtSales":
			out.Values[i] = ec._Iform_txtSales(ctx, field, obj)
		case "cmbDemand":
			out.Values[i] = ec._Iform_cmbDemand(ctx, field, obj)
		case "txtSalesRange1":
			out.Values[i] = ec._Iform_txtSalesRange1(ctx, field, obj)
		case "txtSalesMedValue":
			out.Values[i] = ec._Iform_txtSalesMedValue(ctx, field, obj)
		case "txtSalesRange2":
			out.Values[i] = ec._Iform_txtSalesRange2(ctx, field, obj)
		case "txtSalesDOM":
			out.Values[i] = ec._Iform_txtSalesDOM(ctx, field, obj)
		case "txtSalesDOMRange1":
			out.Values[i] = ec._Iform_txtSalesDOMRange1(ctx, field, obj)
		case "txtSalesDOMRange2":
			out.Values[i] = ec._Iform_txtSalesDOMRange2(ctx, field, obj)
		case "txtZillowNeighborhoodTrend":
			out.Values[i] = ec._Iform_txtZillowNeighborhoodTrend(ctx, field, obj)
		case "txtNeighborhoodTrendComments":
			out.Values[i] = ec._Iform_txtNeighborhoodTrendComments(ctx, field, obj)
		case "txtTotalListings":
			out.Values[i] = ec._Iform_txtTotalListings(ctx, field, obj)
		case "txtTotalSales":
			out.Values[i] = ec._Iform_txtTotalSales(ctx, field, obj)
		case "txtNoOfREOListings":
			out.Values[i] = ec._Iform_txtNoOfREOListings(ctx, field, obj)
		case "txtNoOfSSListings":
			out.Values[i] = ec._Iform_txtNoOfSSListings(ctx, field, obj)
		case "txtNoOfREOSales":
			out.Values[i] = ec._Iform_txtNoOfREOSales(ctx, field, obj)
		case "txtNoOfSSSales":
			out.Values[i] = ec._Iform_txtNoOfSSSales(ctx, field, obj)
		case "txtTaxID":
			out.Values[i] = ec._Iform_txtTaxID(ctx, field, obj)
		case "txtLastSaleDate":
			out.Values[i] = ec._Iform_txtLastSaleDate(ctx, field, obj)
		case "txtLastSalePrice":
			out.Values[i] = ec._Iform_txtLastSalePrice(ctx, field, obj)
		case "cmbIsListed":
			out.Values[i] = ec._Iform_cmbIsListed(ctx, field, obj)
		case "txtOwnerOccupied":
			out.Values[i] = ec._Iform_txtOwnerOccupied(ctx, field, obj)
		case "txtRenterOccupied":
			out.Values[i] = ec._Iform_txtRenterOccupied(ctx, field, obj)
		case "txtMarketRent":
			out.Values[i] = ec._Iform_txtMarketRent(ctx, field, obj)
		case "txtNoOfRentals":
			out.Values[i] = ec._Iform_txtNoOfRentals(ctx, field, obj)
		case "txtTypicalDOM":
			out.Values[i] = ec._Iform_txtTypicalDOM(ctx, field, obj)
		case "txtNoRentHomes":
			out.Values[i] = ec._Iform_txtNoRentHomes(ctx, field, obj)
		case "txtTypicalRentalRates":
			out.Values[i] = ec._Iform_txtTypicalRentalRates(ctx, field, obj)
		case "adjustmentPrice":
			out.Values[i] = ec._Iform_adjustmentPrice(ctx, field, obj)
		case "txtCalculatedGLA":
			out.Values[i] = ec._Iform_txtCalculatedGLA(ctx, field, obj)
		case "txtCalculatedAge":
			out.Values[i] = ec._Iform_txtCalculatedAge(ctx, field, obj)
		case "txtCalculatedSaleDates":
			out.Values[i] = ec._Iform_txtCalculatedSaleDates(ctx, field, obj)
		case "txtCalculatedProximity":
			out.Values[i] = ec._Iform_txtCalculatedProximity(ctx, field, obj)
		case "txtCalculatedStyle":
			out.Values[i] = ec._Iform_txtCalculatedStyle(ctx, field, obj)
		case "txtCalculatedMonthsSupply":
			out.Values[i] = ec._Iform_txtCalculatedMonthsSupply(ctx, field, obj)
		case "txtCalculatedProxim":
			out.Values[i] = ec._Iform_txtCalculatedProxim(ctx, field, obj)
		case "txtCalculatedGLAs":
			out.Values[i] = ec._Iform_txtCalculatedGLAs(ctx, field, obj)
		case "txtCalculatedAges":
			out.Values[i] = ec._Iform_txtCalculatedAges(ctx, field, obj)
		case "txtCalculatedCond":
			out.Values[i] = ec._Iform_txtCalculatedCond(ctx, field, obj)
		case "txtCalculatedView":
			out.Values[i] = ec._Iform_txtCalculatedView(ctx, field, obj)
		case "txtCalculatedStyle1":
			out.Values[i] = ec._Iform_txtCalculatedStyle1(ctx, field, obj)
		case "txtCalculatedLots":
			out.Values[i] = ec._Iform_txtCalculatedLots(ctx, field, obj)
		case "txtCalculatedBeds":
			out.Values[i] = ec._Iform_txtCalculatedBeds(ctx, field, obj)
		case "txtCalculatedBath":
			out.Values[i] = ec._Iform_txtCalculatedBath(ctx, field, obj)
		case "rdbresaletext":
			out.Values[i] = ec._Iform_rdbresaletext(ctx, field, obj)
		case "rdbmarketedtext":
			out.Values[i] = ec._Iform_rdbmarketedtext(ctx, field, obj)
		case "txtpmi":
			out.Values[i] = ec._Iform_txtpmi(ctx, field, obj)
		case "txtOtherComments":
			out.Values[i] = ec._Iform_txtOtherComments(ctx, field, obj)
		case "txtcbnew":
			out.Values[i] = ec._Iform_txtcbnew(ctx, field, obj)
		case "txtcbold":
			out.Values[i] = ec._Iform_txtcbold(ctx, field, obj)
		case "txtcbstyle":
			out.Values[i] = ec._Iform_txtcbstyle(ctx, field, obj)
		case "txtcblot":
			out.Values[i] = ec._Iform_txtcblot(ctx, field, obj)
		case "txtcbview":
			out.Values[i] = ec._Iform_txtcbview(ctx, field, obj)
		case "txtcbdamage":
			out.Values[i] = ec._Iform_txtcbdamage(ctx, field, obj)
		case "txtcbupgrade":
			out.Values[i] = ec._Iform_txtcbupgrade(ctx, field, obj)
		case "txtcbinfluence":
			out.Values[i] = ec._Iform_txtcbinfluence(ctx, field, obj)
		case "txtSubjectComments":
			out.Values[i] = ec._Iform_txtSubjectComments(ctx, field, obj)
		case "txtNeighborhoodComments":
			out.Values[i] = ec._Iform_txtNeighborhoodComments(ctx, field, obj)
		case "txtNeighborhoodTrend":
			out.Values[i] = ec._Iform_txtNeighborhoodTrend(ctx, field, obj)
		case "txtValidation1":
			out.Values[i] = ec._Iform_txtValidation1(ctx, field, obj)
		case "txtUniqueComments":
			out.Values[i] = ec._Iform_txtUniqueComments(ctx, field, obj)
		case "txtMarketingStrategy":
			out.Values[i] = ec._Iform_txtMarketingStrategy(ctx, field, obj)
		case "txtDisclaimer2":
			out.Values[i] = ec._Iform_txtDisclaimer2(ctx, field, obj)
		case "txtBrokerComments":
			out.Values[i] = ec._Iform_txtBrokerComments(ctx, field, obj)
		case "txtValidation":
			out.Values[i] = ec._Iform_txtValidation(ctx, field, obj)
		case "txt30DayQuickSale":
			out.Values[i] = ec._Iform_txt30DayQuickSale(ctx, field, obj)
		case "txt60DayQuickSale":
			out.Values[i] = ec._Iform_txt60DayQuickSale(ctx, field, obj)
		case "txt90DayAsIsValue":
			out.Values[i] = ec._Iform_txt90DayAsIsValue(ctx, field, obj)
		case "txt120DayQuickSale":
			out.Values[i] = ec._Iform_txt120DayQuickSale(ctx, field, obj)
		case "txt180DayQuickSale":
			out.Values[i] = ec._Iform_txt180DayQuickSale(ctx, field, obj)
		case "txtListPriceFinalValues":
			out.Values[i] = ec._Iform_txtListPriceFinalValues(ctx, field, obj)
		case "txt30DayListPriceFinalValues":
			out.Values[i] = ec._Iform_txt30DayListPriceFinalValues(ctx, field, obj)
		case "txt30DayQuickSaleRepaired":
			out.Values[i] = ec._Iform_txt30DayQuickSaleRepaired(ctx, field, obj)
		case "txt60DayQuickSaleRepaired":
			out.Values[i] = ec._Iform_txt60DayQuickSaleRepaired(ctx, field, obj)
		case "txt90DayAsIsValueRepaired":
			out.Values[i] = ec._Iform_txt90DayAsIsValueRepaired(ctx, field, obj)
		case "txt120DayQuickSaleRepaired":
			out.Values[i] = ec._Iform_txt120DayQuickSaleRepaired(ctx, field, obj)
		case "txt180DayQuickSaleRepaired":
			out.Values[i] = ec._Iform_txt180DayQuickSaleRepaired(ctx, field, obj)
		case "txtListPriceRepaired":
			out.Values[i] = ec._Iform_txtListPriceRepaired(ctx, field, obj)
		case "txt30DayListPriceRepaired":
			out.Values[i] = ec._Iform_txt30DayListPriceRepaired(ctx, field, obj)
		case "cmbHouse":
			out.Values[i] = ec._Iform_cmbHouse(ctx, field, obj)
		case "cmbPositive":
			out.Values[i] = ec._Iform_cmbPositive(ctx, field, obj)
		case "cmbNegative":
			out.Values[i] = ec._Iform_cmbNegative(ctx, field, obj)
		case "cmbView":
			out.Values[i] = ec._Iform_cmbView(ctx, field, obj)
		case "cmbMarket":
			out.Values[i] = ec._Iform_cmbMarket(ctx, field, obj)
		case "cmbPricing":
			out.Values[i] = ec._Iform_cmbPricing(ctx, field, obj)
		case "cmbListing":
			out.Values[i] = ec._Iform_cmbListing(ctx, field, obj)
		case "cmbExtra":
			out.Values[i] = ec._Iform_cmbExtra(ctx, field, obj)
		case "txtUnique":
			out.Values[i] = ec._Iform_txtUnique(ctx, field, obj)
		case "priceComment":
			out.Values[i] = ec._Iform_priceComment(ctx, field, obj)
		case "rangeComment":
			out.Values[i] = ec._Iform_rangeComment(ctx, field, obj)
		case "proxException":
			out.Values[i] = ec._Iform_proxException(ctx, field, obj)
		case "glaException":
			out.Values[i] = ec._Iform_glaException(ctx, field, obj)
		case "ageException":
			out.Values[i] = ec._Iform_ageException(ctx, field, obj)
		case "condException":
			out.Values[i] = ec._Iform_condException(ctx, field, obj)
		case "viewException":
			out.Values[i] = ec._Iform_viewException(ctx, field, obj)
		case "styleException":
			out.Values[i] = ec._Iform_styleException(ctx, field, obj)
		case "lotException":
			out.Values[i] = ec._Iform_lotException(ctx, field, obj)
		case "bedException":
			out.Values[i] = ec._Iform_bedException(ctx, field, obj)
		case "bathException":
			out.Values[i] = ec._Iform_bathException(ctx, field, obj)
		case "history":
			out.Values[i] = ec._Iform_history(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iformGridImplementors = []string{"IformGrid"}

func (ec *executionContext) _IformGrid(ctx context.Context, sel ast.SelectionSet, obj *models.IformGrid) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, iformGridImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IformGrid")
		case "id":
			out.Values[i] = ec._IformGrid_id(ctx, field, obj)
		case "address":
			out.Values[i] = ec._IformGrid_address(ctx, field, obj)
		case "age":
			out.Values[i] = ec._IformGrid_age(ctx, field, obj)
		case "basementFinishedSqFt":
			out.Values[i] = ec._IformGrid_basementFinishedSqFt(ctx, field, obj)
		case "basementSquareFeet":
			out.Values[i] = ec._IformGrid_basementSquareFeet(ctx, field, obj)
		case "basementType":
			out.Values[i] = ec._IformGrid_basementType(ctx, field, obj)
		case "bathrooms":
			out.Values[i] = ec._IformGrid_bathrooms(ctx, field, obj)
		case "bedrooms":
			out.Values[i] = ec._IformGrid_bedrooms(ctx, field, obj)
		case "carport":
			out.Values[i] = ec._IformGrid_carport(ctx, field, obj)
		case "city":
			out.Values[i] = ec._IformGrid_city(ctx, field, obj)
		case "construction":
			out.Values[i] = ec._IformGrid_construction(ctx, field, obj)
		case "daysOnMarket":
			out.Values[i] = ec._IformGrid_daysOnMarket(ctx, field, obj)
		case "exterior":
			out.Values[i] = ec._IformGrid_exterior(ctx, field, obj)
		case "exteriorFeatures":
			out.Values[i] = ec._IformGrid_exteriorFeatures(ctx, field, obj)
		case "fireplace":
			out.Values[i] = ec._IformGrid_fireplace(ctx, field, obj)
		case "fullBaths":
			out.Values[i] = ec._IformGrid_fullBaths(ctx, field, obj)
		case "garage":
			out.Values[i] = ec._IformGrid_garage(ctx, field, obj)
		case "garageDescription":
			out.Values[i] = ec._IformGrid_garageDescription(ctx, field, obj)
		case "halfBaths":
			out.Values[i] = ec._IformGrid_halfBaths(ctx, field, obj)
		case "hOAFee":
			out.Values[i] = ec._IformGrid_hOAFee(ctx, field, obj)
		case "listDate":
			out.Values[i] = ec._IformGrid_listDate(ctx, field, obj)
		case "listPrice":
			out.Values[i] = ec._IformGrid_listPrice(ctx, field, obj)
		case "lotSize":
			out.Values[i] = ec._IformGrid_lotSize(ctx, field, obj)
		case "mlsNumber":
			out.Values[i] = ec._IformGrid_mlsNumber(ctx, field, obj)
		case "mlsComments":
			out.Values[i] = ec._IformGrid_mlsComments(ctx, field, obj)
		case "originalListDate":
			out.Values[i] = ec._IformGrid_originalListDate(ctx, field, obj)
		case "originalListPrice":
			out.Values[i] = ec._IformGrid_originalListPrice(ctx, field, obj)
		case "parkingSpacesCarport":
			out.Values[i] = ec._IformGrid_parkingSpacesCarport(ctx, field, obj)
		case "parkingSpacesGarage":
			out.Values[i] = ec._IformGrid_parkingSpacesGarage(ctx, field, obj)
		case "pool":
			out.Values[i] = ec._IformGrid_pool(ctx, field, obj)
		case "porch":
			out.Values[i] = ec._IformGrid_porch(ctx, field, obj)
		case "priceClosed":
			out.Values[i] = ec._IformGrid_priceClosed(ctx, field, obj)
		case "priceList":
			out.Values[i] = ec._IformGrid_priceList(ctx, field, obj)
		case "propertyStyle":
			out.Values[i] = ec._IformGrid_propertyStyle(ctx, field, obj)
		case "proplmg":
			out.Values[i] = ec._IformGrid_proplmg(ctx, field, obj)
		case "proximity":
			out.Values[i] = ec._IformGrid_proximity(ctx, field, obj)
		case "realEstateOwned":
			out.Values[i] = ec._IformGrid_realEstateOwned(ctx, field, obj)
		case "saleDate":
			out.Values[i] = ec._IformGrid_saleDate(ctx, field, obj)
		case "salePrice":
			out.Values[i] = ec._IformGrid_salePrice(ctx, field, obj)
		case "saleType":
			out.Values[i] = ec._IformGrid_saleType(ctx, field, obj)
		case "selType":
			out.Values[i] = ec._IformGrid_selType(ctx, field, obj)
		case "shortSale":
			out.Values[i] = ec._IformGrid_shortSale(ctx, field, obj)
		case "squareFootage":
			out.Values[i] = ec._IformGrid_squareFootage(ctx, field, obj)
		case "status":
			out.Values[i] = ec._IformGrid_status(ctx, field, obj)
		case "streetDirection":
			out.Values[i] = ec._IformGrid_streetDirection(ctx, field, obj)
		case "streetName":
			out.Values[i] = ec._IformGrid_streetName(ctx, field, obj)
		case "streetNumber":
			out.Values[i] = ec._IformGrid_streetNumber(ctx, field, obj)
		case "streetType":
			out.Values[i] = ec._IformGrid_streetType(ctx, field, obj)
		case "subdivision":
			out.Values[i] = ec._IformGrid_subdivision(ctx, field, obj)
		case "termsOfSale":
			out.Values[i] = ec._IformGrid_termsOfSale(ctx, field, obj)
		case "totalRooms":
			out.Values[i] = ec._IformGrid_totalRooms(ctx, field, obj)
		case "totalUnits":
			out.Values[i] = ec._IformGrid_totalUnits(ctx, field, obj)
		case "unitNumber":
			out.Values[i] = ec._IformGrid_unitNumber(ctx, field, obj)
		case "view":
			out.Values[i] = ec._IformGrid_view(ctx, field, obj)
		case "waterfront":
			out.Values[i] = ec._IformGrid_waterfront(ctx, field, obj)
		case "yearBuilt":
			out.Values[i] = ec._IformGrid_yearBuilt(ctx, field, obj)
		case "zip":
			out.Values[i] = ec._IformGrid_zip(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iformGridResultImplementors = []string{"IformGridResult"}

func (ec *executionContext) _IformGridResult(ctx context.Context, sel ast.SelectionSet, obj *models.IformGridResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, iformGridResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IformGridResult")
		case "totalCount":
			out.Values[i] = ec._IformGridResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._IformGridResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iformHistoryImplementors = []string{"IformHistory"}

func (ec *executionContext) _IformHistory(ctx context.Context, sel ast.SelectionSet, obj *models.IformHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, iformHistoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IformHistory")
		case "createdDate":
			out.Values[i] = ec._IformHistory_createdDate(ctx, field, obj)
		case "updatedDate":
			out.Values[i] = ec._IformHistory_updatedDate(ctx, field, obj)
		case "modifiedBy":
			out.Values[i] = ec._IformHistory_modifiedBy(ctx, field, obj)
		case "url":
			out.Values[i] = ec._IformHistory_url(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iformTempImplementors = []string{"IformTemp"}

func (ec *executionContext) _IformTemp(ctx context.Context, sel ast.SelectionSet, obj *models.IformTemp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, iformTempImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IformTemp")
		case "id":
			out.Values[i] = ec._IformTemp_id(ctx, field, obj)
		case "formType":
			out.Values[i] = ec._IformTemp_formType(ctx, field, obj)
		case "pipelineId":
			out.Values[i] = ec._IformTemp_pipelineId(ctx, field, obj)
		case "txtClient":
			out.Values[i] = ec._IformTemp_txtClient(ctx, field, obj)
		case "txtCompany":
			out.Values[i] = ec._IformTemp_txtCompany(ctx, field, obj)
		case "txtOrderNumber":
			out.Values[i] = ec._IformTemp_txtOrderNumber(ctx, field, obj)
		case "cmbOrderType":
			out.Values[i] = ec._IformTemp_cmbOrderType(ctx, field, obj)
		case "txtAddress":
			out.Values[i] = ec._IformTemp_txtAddress(ctx, field, obj)
		case "txtLocation":
			out.Values[i] = ec._IformTemp_txtLocation(ctx, field, obj)
		case "txtBrokerChecker":
			out.Values[i] = ec._IformTemp_txtBrokerChecker(ctx, field, obj)
		case "txtPreparerInfoAgent":
			out.Values[i] = ec._IformTemp_txtPreparerInfoAgent(ctx, field, obj)
		case "txtPreparerInfoAgentLicense":
			out.Values[i] = ec._IformTemp_txtPreparerInfoAgentLicense(ctx, field, obj)
		case "txtPreparerInfoBroker":
			out.Values[i] = ec._IformTemp_txtPreparerInfoBroker(ctx, field, obj)
		case "txtPreparerInfoBrokerLicense":
			out.Values[i] = ec._IformTemp_txtPreparerInfoBrokerLicense(ctx, field, obj)
		case "txtPreparerInfoAddress":
			out.Values[i] = ec._IformTemp_txtPreparerInfoAddress(ctx, field, obj)
		case "txtPreparerInfoBrokerage":
			out.Values[i] = ec._IformTemp_txtPreparerInfoBrokerage(ctx, field, obj)
		case "txtPreparerInfoAgentCompany":
			out.Values[i] = ec._IformTemp_txtPreparerInfoAgentCompany(ctx, field, obj)
		case "txtPreparerInfoPhone":
			out.Values[i] = ec._IformTemp_txtPreparerInfoPhone(ctx, field, obj)
		case "txtPreparerInfoYearsOfExperience":
			out.Values[i] = ec._IformTemp_txtPreparerInfoYearsOfExperience(ctx, field, obj)
		case "txtPreparerInfoEmail":
			out.Values[i] = ec._IformTemp_txtPreparerInfoEmail(ctx, field, obj)
		case "txtSubjectAddress":
			out.Values[i] = ec._IformTemp_txtSubjectAddress(ctx, field, obj)
		case "txtPreparerInfoMilesAwayFromSubject":
			out.Values[i] = ec._IformTemp_txtPreparerInfoMilesAwayFromSubject(ctx, field, obj)
		case "txtAgentZip":
			out.Values[i] = ec._IformTemp_txtAgentZip(ctx, field, obj)
		case "txtAgentCity":
			out.Values[i] = ec._IformTemp_txtAgentCity(ctx, field, obj)
		case "txtAgentState":
			out.Values[i] = ec._IformTemp_txtAgentState(ctx, field, obj)
		case "txtDisclaimer":
			out.Values[i] = ec._IformTemp_txtDisclaimer(ctx, field, obj)
		case "cmbLocation":
			out.Values[i] = ec._IformTemp_cmbLocation(ctx, field, obj)
		case "txtCounty":
			out.Values[i] = ec._IformTemp_txtCounty(ctx, field, obj)
		case "txtTrullia":
			out.Values[i] = ec._IformTemp_txtTrullia(ctx, field, obj)
		case "txtZillow":
			out.Values[i] = ec._IformTemp_txtZillow(ctx, field, obj)
		case "txtFindcompsnow":
			out.Values[i] = ec._IformTemp_txtFindcompsnow(ctx, field, obj)
		case "txtAverage":
			out.Values[i] = ec._IformTemp_txtAverage(ctx, field, obj)
		case "cmbForm":
			out.Values[i] = ec._IformTemp_cmbForm(ctx, field, obj)
		case "cmbForm2":
			out.Values[i] = ec._IformTemp_cmbForm2(ctx, field, obj)
		case "txtSaleComp1Address":
			out.Values[i] = ec._IformTemp_txtSaleComp1Address(ctx, field, obj)
		case "txtSaleComp2Address":
			out.Values[i] = ec._IformTemp_txtSaleComp2Address(ctx, field, obj)
		case "txtSaleComp3Address":
			out.Values[i] = ec._IformTemp_txtSaleComp3Address(ctx, field, obj)
		case "txtListComp1Address":
			out.Values[i] = ec._IformTemp_txtListComp1Address(ctx, field, obj)
		case "txtListComp2Address":
			out.Values[i] = ec._IformTemp_txtListComp2Address(ctx, field, obj)
		case "txtListComp3Address":
			out.Values[i] = ec._IformTemp_txtListComp3Address(ctx, field, obj)
		case "txtSubjectState":
			out.Values[i] = ec._IformTemp_txtSubjectState(ctx, field, obj)
		case "txtSaleComp1State":
			out.Values[i] = ec._IformTemp_txtSaleComp1State(ctx, field, obj)
		case "txtSaleComp2State":
			out.Values[i] = ec._IformTemp_txtSaleComp2State(ctx, field, obj)
		case "txtSaleComp3State":
			out.Values[i] = ec._IformTemp_txtSaleComp3State(ctx, field, obj)
		case "txtListComp1State":
			out.Values[i] = ec._IformTemp_txtListComp1State(ctx, field, obj)
		case "txtListComp2State":
			out.Values[i] = ec._IformTemp_txtListComp2State(ctx, field, obj)
		case "txtListComp3State":
			out.Values[i] = ec._IformTemp_txtListComp3State(ctx, field, obj)
		case "txtSubjectCity":
			out.Values[i] = ec._IformTemp_txtSubjectCity(ctx, field, obj)
		case "txtSaleComp1City":
			out.Values[i] = ec._IformTemp_txtSaleComp1City(ctx, field, obj)
		case "txtSaleComp2City":
			out.Values[i] = ec._IformTemp_txtSaleComp2City(ctx, field, obj)
		case "txtSaleComp3City":
			out.Values[i] = ec._IformTemp_txtSaleComp3City(ctx, field, obj)
		case "txtListComp1City":
			out.Values[i] = ec._IformTemp_txtListComp1City(ctx, field, obj)
		case "txtListComp2City":
			out.Values[i] = ec._IformTemp_txtListComp2City(ctx, field, obj)
		case "txtListComp3City":
			out.Values[i] = ec._IformTemp_txtListComp3City(ctx, field, obj)
		case "txtSubjectnoUnit":
			out.Values[i] = ec._IformTemp_txtSubjectnoUnit(ctx, field, obj)
		case "txtSubjectUnitNo":
			out.Values[i] = ec._IformTemp_txtSubjectUnitNo(ctx, field, obj)
		case "txtSaleComp1noUnit":
			out.Values[i] = ec._IformTemp_txtSaleComp1noUnit(ctx, field, obj)
		case "txtSaleComp1UnitNo":
			out.Values[i] = ec._IformTemp_txtSaleComp1UnitNo(ctx, field, obj)
		case "txtSaleComp2noUnit":
			out.Values[i] = ec._IformTemp_txtSaleComp2noUnit(ctx, field, obj)
		case "txtSaleComp2UnitNo":
			out.Values[i] = ec._IformTemp_txtSaleComp2UnitNo(ctx, field, obj)
		case "txtSaleComp3noUnit":
			out.Values[i] = ec._IformTemp_txtSaleComp3noUnit(ctx, field, obj)
		case "txtSaleComp3UnitNo":
			out.Values[i] = ec._IformTemp_txtSaleComp3UnitNo(ctx, field, obj)
		case "txtListComp1noUnit":
			out.Values[i] = ec._IformTemp_txtListComp1noUnit(ctx, field, obj)
		case "txtListComp1UnitNo":
			out.Values[i] = ec._IformTemp_txtListComp1UnitNo(ctx, field, obj)
		case "txtListComp2noUnit":
			out.Values[i] = ec._IformTemp_txtListComp2noUnit(ctx, field, obj)
		case "txtListComp2UnitNo":
			out.Values[i] = ec._IformTemp_txtListComp2UnitNo(ctx, field, obj)
		case "txtListComp3noUnit":
			out.Values[i] = ec._IformTemp_txtListComp3noUnit(ctx, field, obj)
		case "txtListComp3UnitNo":
			out.Values[i] = ec._IformTemp_txtListComp3UnitNo(ctx, field, obj)
		case "txtSubjectUnits":
			out.Values[i] = ec._IformTemp_txtSubjectUnits(ctx, field, obj)
		case "txtSaleComp1Units":
			out.Values[i] = ec._IformTemp_txtSaleComp1Units(ctx, field, obj)
		case "txtSaleComp2Units":
			out.Values[i] = ec._IformTemp_txtSaleComp2Units(ctx, field, obj)
		case "txtSaleComp3Units":
			out.Values[i] = ec._IformTemp_txtSaleComp3Units(ctx, field, obj)
		case "txtListComp1Units":
			out.Values[i] = ec._IformTemp_txtListComp1Units(ctx, field, obj)
		case "txtListComp2Units":
			out.Values[i] = ec._IformTemp_txtListComp2Units(ctx, field, obj)
		case "txtListComp3Units":
			out.Values[i] = ec._IformTemp_txtListComp3Units(ctx, field, obj)
		case "txtSubjectZip":
			out.Values[i] = ec._IformTemp_txtSubjectZip(ctx, field, obj)
		case "txtSaleComp1Zip":
			out.Values[i] = ec._IformTemp_txtSaleComp1Zip(ctx, field, obj)
		case "txtSaleComp2Zip":
			out.Values[i] = ec._IformTemp_txtSaleComp2Zip(ctx, field, obj)
		case "txtSaleComp3Zip":
			out.Values[i] = ec._IformTemp_txtSaleComp3Zip(ctx, field, obj)
		case "txtListComp1Zip":
			out.Values[i] = ec._IformTemp_txtListComp1Zip(ctx, field, obj)
		case "txtListComp2Zip":
			out.Values[i] = ec._IformTemp_txtListComp2Zip(ctx, field, obj)
		case "txtListComp3Zip":
			out.Values[i] = ec._IformTemp_txtListComp3Zip(ctx, field, obj)
		case "txtSubjectProximity":
			out.Values[i] = ec._IformTemp_txtSubjectProximity(ctx, field, obj)
		case "txtSaleComp1Proximity":
			out.Values[i] = ec._IformTemp_txtSaleComp1Proximity(ctx, field, obj)
		case "txtSaleComp2Proximity":
			out.Values[i] = ec._IformTemp_txtSaleComp2Proximity(ctx, field, obj)
		case "txtSaleComp3Proximity":
			out.Values[i] = ec._IformTemp_txtSaleComp3Proximity(ctx, field, obj)
		case "txtListComp1Proximity":
			out.Values[i] = ec._IformTemp_txtListComp1Proximity(ctx, field, obj)
		case "txtListComp2Proximity":
			out.Values[i] = ec._IformTemp_txtListComp2Proximity(ctx, field, obj)
		case "txtListComp3Proximity":
			out.Values[i] = ec._IformTemp_txtListComp3Proximity(ctx, field, obj)
		case "txtSubjectDataSource":
			out.Values[i] = ec._IformTemp_txtSubjectDataSource(ctx, field, obj)
		case "txtSaleComp1DataSource":
			out.Values[i] = ec._IformTemp_txtSaleComp1DataSource(ctx, field, obj)
		case "txtSaleComp2DataSource":
			out.Values[i] = ec._IformTemp_txtSaleComp2DataSource(ctx, field, obj)
		case "txtSaleComp3DataSource":
			out.Values[i] = ec._IformTemp_txtSaleComp3DataSource(ctx, field, obj)
		case "txtListComp1DataSource":
			out.Values[i] = ec._IformTemp_txtListComp1DataSource(ctx, field, obj)
		case "txtListComp2DataSource":
			out.Values[i] = ec._IformTemp_txtListComp2DataSource(ctx, field, obj)
		case "txtListComp3DataSource":
			out.Values[i] = ec._IformTemp_txtListComp3DataSource(ctx, field, obj)
		case "txtSubjectMLSNumber":
			out.Values[i] = ec._IformTemp_txtSubjectMLSNumber(ctx, field, obj)
		case "txtSaleComp1MLSNumber":
			out.Values[i] = ec._IformTemp_txtSaleComp1MLSNumber(ctx, field, obj)
		case "txtSaleComp2MLSNumber":
			out.Values[i] = ec._IformTemp_txtSaleComp2MLSNumber(ctx, field, obj)
		case "txtSaleComp3MLSNumber":
			out.Values[i] = ec._IformTemp_txtSaleComp3MLSNumber(ctx, field, obj)
		case "txtListComp1MLSNumber":
			out.Values[i] = ec._IformTemp_txtListComp1MLSNumber(ctx, field, obj)
		case "txtListComp2MLSNumber":
			out.Values[i] = ec._IformTemp_txtListComp2MLSNumber(ctx, field, obj)
		case "txtListComp3MLSNumber":
			out.Values[i] = ec._IformTemp_txtListComp3MLSNumber(ctx, field, obj)
		case "cmbSubjectSaleType":
			out.Values[i] = ec._IformTemp_cmbSubjectSaleType(ctx, field, obj)
		case "cmbSaleComp1SaleType":
			out.Values[i] = ec._IformTemp_cmbSaleComp1SaleType(ctx, field, obj)
		case "cmbSaleComp2SaleType":
			out.Values[i] = ec._IformTemp_cmbSaleComp2SaleType(ctx, field, obj)
		case "cmbSaleComp3SaleType":
			out.Values[i] = ec._IformTemp_cmbSaleComp3SaleType(ctx, field, obj)
		case "cmbListComp1SaleType":
			out.Values[i] = ec._IformTemp_cmbListComp1SaleType(ctx, field, obj)
		case "cmbListComp2SaleType":
			out.Values[i] = ec._IformTemp_cmbListComp2SaleType(ctx, field, obj)
		case "cmbListComp3SaleType":
			out.Values[i] = ec._IformTemp_cmbListComp3SaleType(ctx, field, obj)
		case "cmbSubjectType":
			out.Values[i] = ec._IformTemp_cmbSubjectType(ctx, field, obj)
		case "cmbSaleComp1Type":
			out.Values[i] = ec._IformTemp_cmbSaleComp1Type(ctx, field, obj)
		case "cmbSaleComp2Type":
			out.Values[i] = ec._IformTemp_cmbSaleComp2Type(ctx, field, obj)
		case "cmbSaleComp3Type":
			out.Values[i] = ec._IformTemp_cmbSaleComp3Type(ctx, field, obj)
		case "cmbListComp1Type":
			out.Values[i] = ec._IformTemp_cmbListComp1Type(ctx, field, obj)
		case "cmbListComp2Type":
			out.Values[i] = ec._IformTemp_cmbListComp2Type(ctx, field, obj)
		case "cmbListComp3Type":
			out.Values[i] = ec._IformTemp_cmbListComp3Type(ctx, field, obj)
		case "cmbSubjectStyle":
			out.Values[i] = ec._IformTemp_cmbSubjectStyle(ctx, field, obj)
		case "cmbSaleComp1Style":
			out.Values[i] = ec._IformTemp_cmbSaleComp1Style(ctx, field, obj)
		case "txtSaleComp1StyleAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1StyleAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Style":
			out.Values[i] = ec._IformTemp_cmbSaleComp2Style(ctx, field, obj)
		case "txtSaleComp2StyleAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2StyleAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Style":
			out.Values[i] = ec._IformTemp_cmbSaleComp3Style(ctx, field, obj)
		case "txtSaleComp3StyleAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3StyleAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Style":
			out.Values[i] = ec._IformTemp_cmbListComp1Style(ctx, field, obj)
		case "txtListComp1StyleAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1StyleAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Style":
			out.Values[i] = ec._IformTemp_cmbListComp2Style(ctx, field, obj)
		case "txtListComp2StyleAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2StyleAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Style":
			out.Values[i] = ec._IformTemp_cmbListComp3Style(ctx, field, obj)
		case "txtListComp3StyleAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3StyleAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectExtFinish":
			out.Values[i] = ec._IformTemp_cmbSubjectExtFinish(ctx, field, obj)
		case "cmbSaleComp1ExtFinish":
			out.Values[i] = ec._IformTemp_cmbSaleComp1ExtFinish(ctx, field, obj)
		case "txtSaleComp1ExtFinishAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1ExtFinishAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2ExtFinish":
			out.Values[i] = ec._IformTemp_cmbSaleComp2ExtFinish(ctx, field, obj)
		case "txtSaleComp2ExtFinishAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2ExtFinishAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3ExtFinish":
			out.Values[i] = ec._IformTemp_cmbSaleComp3ExtFinish(ctx, field, obj)
		case "txtSaleComp3ExtFinishAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3ExtFinishAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1ExtFinish":
			out.Values[i] = ec._IformTemp_cmbListComp1ExtFinish(ctx, field, obj)
		case "txtListComp1ExtFinishAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1ExtFinishAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2ExtFinish":
			out.Values[i] = ec._IformTemp_cmbListComp2ExtFinish(ctx, field, obj)
		case "txtListComp2ExtFinishAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2ExtFinishAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3ExtFinish":
			out.Values[i] = ec._IformTemp_cmbListComp3ExtFinish(ctx, field, obj)
		case "txtListComp3ExtFinishAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3ExtFinishAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectCondition":
			out.Values[i] = ec._IformTemp_cmbSubjectCondition(ctx, field, obj)
		case "cmbSaleComp1Condition":
			out.Values[i] = ec._IformTemp_cmbSaleComp1Condition(ctx, field, obj)
		case "txtSaleComp1ConditionAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1ConditionAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Condition":
			out.Values[i] = ec._IformTemp_cmbSaleComp2Condition(ctx, field, obj)
		case "txtSaleComp2ConditionAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2ConditionAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Condition":
			out.Values[i] = ec._IformTemp_cmbSaleComp3Condition(ctx, field, obj)
		case "txtSaleComp3ConditionAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3ConditionAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Condition":
			out.Values[i] = ec._IformTemp_cmbListComp1Condition(ctx, field, obj)
		case "txtListComp1ConditionAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1ConditionAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Condition":
			out.Values[i] = ec._IformTemp_cmbListComp2Condition(ctx, field, obj)
		case "txtListComp2ConditionAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2ConditionAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Condition":
			out.Values[i] = ec._IformTemp_cmbListComp3Condition(ctx, field, obj)
		case "txtListComp3ConditionAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3ConditionAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectQuality":
			out.Values[i] = ec._IformTemp_cmbSubjectQuality(ctx, field, obj)
		case "cmbSaleComp1Quality":
			out.Values[i] = ec._IformTemp_cmbSaleComp1Quality(ctx, field, obj)
		case "txtSaleComp1QualityAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1QualityAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Quality":
			out.Values[i] = ec._IformTemp_cmbSaleComp2Quality(ctx, field, obj)
		case "txtSaleComp2QualityAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2QualityAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Quality":
			out.Values[i] = ec._IformTemp_cmbSaleComp3Quality(ctx, field, obj)
		case "txtSaleComp3QualityAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3QualityAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Quality":
			out.Values[i] = ec._IformTemp_cmbListComp1Quality(ctx, field, obj)
		case "txtListComp1QualityAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1QualityAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Quality":
			out.Values[i] = ec._IformTemp_cmbListComp2Quality(ctx, field, obj)
		case "txtListComp2QualityAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2QualityAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Quality":
			out.Values[i] = ec._IformTemp_cmbListComp3Quality(ctx, field, obj)
		case "txtListComp3QualityAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3QualityAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectView":
			out.Values[i] = ec._IformTemp_cmbSubjectView(ctx, field, obj)
		case "cmbSaleComp1View":
			out.Values[i] = ec._IformTemp_cmbSaleComp1View(ctx, field, obj)
		case "txtSaleComp1ViewAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1ViewAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2View":
			out.Values[i] = ec._IformTemp_cmbSaleComp2View(ctx, field, obj)
		case "txtSaleComp2ViewAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2ViewAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3View":
			out.Values[i] = ec._IformTemp_cmbSaleComp3View(ctx, field, obj)
		case "txtSaleComp3ViewAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3ViewAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1View":
			out.Values[i] = ec._IformTemp_cmbListComp1View(ctx, field, obj)
		case "txtListComp1ViewAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1ViewAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2View":
			out.Values[i] = ec._IformTemp_cmbListComp2View(ctx, field, obj)
		case "txtListComp2ViewAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2ViewAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3View":
			out.Values[i] = ec._IformTemp_cmbListComp3View(ctx, field, obj)
		case "txtListComp3ViewAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3ViewAdjBuiltIn(ctx, field, obj)
		case "txtSubjectSubdivision":
			out.Values[i] = ec._IformTemp_txtSubjectSubdivision(ctx, field, obj)
		case "txtSaleComp1Subdivision":
			out.Values[i] = ec._IformTemp_txtSaleComp1Subdivision(ctx, field, obj)
		case "txtSaleComp2Subdivision":
			out.Values[i] = ec._IformTemp_txtSaleComp2Subdivision(ctx, field, obj)
		case "txtSaleComp3Subdivision":
			out.Values[i] = ec._IformTemp_txtSaleComp3Subdivision(ctx, field, obj)
		case "txtListComp1Subdivision":
			out.Values[i] = ec._IformTemp_txtListComp1Subdivision(ctx, field, obj)
		case "txtListComp2Subdivision":
			out.Values[i] = ec._IformTemp_txtListComp2Subdivision(ctx, field, obj)
		case "txtListComp3Subdivision":
			out.Values[i] = ec._IformTemp_txtListComp3Subdivision(ctx, field, obj)
		case "txtSubjectHOAFee":
			out.Values[i] = ec._IformTemp_txtSubjectHOAFee(ctx, field, obj)
		case "txtSaleComp1HOAFee":
			out.Values[i] = ec._IformTemp_txtSaleComp1HOAFee(ctx, field, obj)
		case "txtSaleComp2HOAFee":
			out.Values[i] = ec._IformTemp_txtSaleComp2HOAFee(ctx, field, obj)
		case "txtSaleComp3HOAFee":
			out.Values[i] = ec._IformTemp_txtSaleComp3HOAFee(ctx, field, obj)
		case "txtListComp1HOAFee":
			out.Values[i] = ec._IformTemp_txtListComp1HOAFee(ctx, field, obj)
		case "txtListComp2HOAFee":
			out.Values[i] = ec._IformTemp_txtListComp2HOAFee(ctx, field, obj)
		case "txtListComp3HOAFee":
			out.Values[i] = ec._IformTemp_txtListComp3HOAFee(ctx, field, obj)
		case "txtSubjectTotalRooms":
			out.Values[i] = ec._IformTemp_txtSubjectTotalRooms(ctx, field, obj)
		case "txtSaleComp1TotalRooms":
			out.Values[i] = ec._IformTemp_txtSaleComp1TotalRooms(ctx, field, obj)
		case "txtSaleComp1TotalRoomsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1TotalRoomsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2TotalRooms":
			out.Values[i] = ec._IformTemp_txtSaleComp2TotalRooms(ctx, field, obj)
		case "txtSaleComp2TotalRoomsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2TotalRoomsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3TotalRooms":
			out.Values[i] = ec._IformTemp_txtSaleComp3TotalRooms(ctx, field, obj)
		case "txtSaleComp3TotalRoomsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3TotalRoomsAdjBuiltIn(ctx, field, obj)
		case "txtListComp1TotalRooms":
			out.Values[i] = ec._IformTemp_txtListComp1TotalRooms(ctx, field, obj)
		case "txtListComp1TotalRoomsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1TotalRoomsAdjBuiltIn(ctx, field, obj)
		case "txtListComp2TotalRooms":
			out.Values[i] = ec._IformTemp_txtListComp2TotalRooms(ctx, field, obj)
		case "txtListComp2TotalRoomsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2TotalRoomsAdjBuiltIn(ctx, field, obj)
		case "txtListComp3TotalRooms":
			out.Values[i] = ec._IformTemp_txtListComp3TotalRooms(ctx, field, obj)
		case "txtListComp3TotalRoomsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3TotalRoomsAdjBuiltIn(ctx, field, obj)
		case "txtSubjectBedrooms":
			out.Values[i] = ec._IformTemp_txtSubjectBedrooms(ctx, field, obj)
		case "txtSaleComp1Bedrooms":
			out.Values[i] = ec._IformTemp_txtSaleComp1Bedrooms(ctx, field, obj)
		case "txtSaleComp1BedroomsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1BedroomsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2Bedrooms":
			out.Values[i] = ec._IformTemp_txtSaleComp2Bedrooms(ctx, field, obj)
		case "txtSaleComp2BedroomsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2BedroomsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3Bedrooms":
			out.Values[i] = ec._IformTemp_txtSaleComp3Bedrooms(ctx, field, obj)
		case "txtSaleComp3BedroomsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3BedroomsAdjBuiltIn(ctx, field, obj)
		case "txtListComp1Bedrooms":
			out.Values[i] = ec._IformTemp_txtListComp1Bedrooms(ctx, field, obj)
		case "txtListComp1BedroomsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1BedroomsAdjBuiltIn(ctx, field, obj)
		case "txtListComp2Bedrooms":
			out.Values[i] = ec._IformTemp_txtListComp2Bedrooms(ctx, field, obj)
		case "txtListComp2BedroomsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2BedroomsAdjBuiltIn(ctx, field, obj)
		case "txtListComp3Bedrooms":
			out.Values[i] = ec._IformTemp_txtListComp3Bedrooms(ctx, field, obj)
		case "txtListComp3BedroomsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3BedroomsAdjBuiltIn(ctx, field, obj)
		case "txtSubjectFullBaths":
			out.Values[i] = ec._IformTemp_txtSubjectFullBaths(ctx, field, obj)
		case "txtSaleComp1FullBaths":
			out.Values[i] = ec._IformTemp_txtSaleComp1FullBaths(ctx, field, obj)
		case "txtSaleComp1FullBathsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1FullBathsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2FullBaths":
			out.Values[i] = ec._IformTemp_txtSaleComp2FullBaths(ctx, field, obj)
		case "txtSaleComp2FullBathsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2FullBathsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3FullBaths":
			out.Values[i] = ec._IformTemp_txtSaleComp3FullBaths(ctx, field, obj)
		case "txtSaleComp3FullBathsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3FullBathsAdjBuiltIn(ctx, field, obj)
		case "txtListComp1FullBaths":
			out.Values[i] = ec._IformTemp_txtListComp1FullBaths(ctx, field, obj)
		case "txtListComp1FullBathsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1FullBathsAdjBuiltIn(ctx, field, obj)
		case "txtListComp2FullBaths":
			out.Values[i] = ec._IformTemp_txtListComp2FullBaths(ctx, field, obj)
		case "txtListComp2FullBathsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2FullBathsAdjBuiltIn(ctx, field, obj)
		case "txtListComp3FullBaths":
			out.Values[i] = ec._IformTemp_txtListComp3FullBaths(ctx, field, obj)
		case "txtListComp3FullBathsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3FullBathsAdjBuiltIn(ctx, field, obj)
		case "txtSubjectHalfBaths":
			out.Values[i] = ec._IformTemp_txtSubjectHalfBaths(ctx, field, obj)
		case "txtSaleComp1HalfBaths":
			out.Values[i] = ec._IformTemp_txtSaleComp1HalfBaths(ctx, field, obj)
		case "txtSaleComp1HalfBathsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1HalfBathsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2HalfBaths":
			out.Values[i] = ec._IformTemp_txtSaleComp2HalfBaths(ctx, field, obj)
		case "txtSaleComp2HalfBathsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2HalfBathsAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3HalfBaths":
			out.Values[i] = ec._IformTemp_txtSaleComp3HalfBaths(ctx, field, obj)
		case "txtSaleComp3HalfBathsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3HalfBathsAdjBuiltIn(ctx, field, obj)
		case "txtListComp1HalfBaths":
			out.Values[i] = ec._IformTemp_txtListComp1HalfBaths(ctx, field, obj)
		case "txtListComp1HalfBathsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1HalfBathsAdjBuiltIn(ctx, field, obj)
		case "txtListComp2HalfBaths":
			out.Values[i] = ec._IformTemp_txtListComp2HalfBaths(ctx, field, obj)
		case "txtListComp2HalfBathsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2HalfBathsAdjBuiltIn(ctx, field, obj)
		case "txtListComp3HalfBaths":
			out.Values[i] = ec._IformTemp_txtListComp3HalfBaths(ctx, field, obj)
		case "txtListComp3HalfBathsAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3HalfBathsAdjBuiltIn(ctx, field, obj)
		case "txtSubjectGLA":
			out.Values[i] = ec._IformTemp_txtSubjectGLA(ctx, field, obj)
		case "txtSaleComp1GLA":
			out.Values[i] = ec._IformTemp_txtSaleComp1GLA(ctx, field, obj)
		case "txtSaleComp1GLAAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1GLAAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2GLA":
			out.Values[i] = ec._IformTemp_txtSaleComp2GLA(ctx, field, obj)
		case "txtSaleComp2GLAAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2GLAAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3GLA":
			out.Values[i] = ec._IformTemp_txtSaleComp3GLA(ctx, field, obj)
		case "txtSaleComp3GLAAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3GLAAdjBuiltIn(ctx, field, obj)
		case "txtListComp1GLA":
			out.Values[i] = ec._IformTemp_txtListComp1GLA(ctx, field, obj)
		case "txtListComp1GLAAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1GLAAdjBuiltIn(ctx, field, obj)
		case "txtListComp2GLA":
			out.Values[i] = ec._IformTemp_txtListComp2GLA(ctx, field, obj)
		case "txtListComp2GLAAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2GLAAdjBuiltIn(ctx, field, obj)
		case "txtListComp3GLA":
			out.Values[i] = ec._IformTemp_txtListComp3GLA(ctx, field, obj)
		case "txtListComp3GLAAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3GLAAdjBuiltIn(ctx, field, obj)
		case "txtSubjectYearBuilt":
			out.Values[i] = ec._IformTemp_txtSubjectYearBuilt(ctx, field, obj)
		case "txtSaleComp1YearBuilt":
			out.Values[i] = ec._IformTemp_txtSaleComp1YearBuilt(ctx, field, obj)
		case "txtSaleComp1YearBuiltAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1YearBuiltAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2YearBuilt":
			out.Values[i] = ec._IformTemp_txtSaleComp2YearBuilt(ctx, field, obj)
		case "txtSaleComp2YearBuiltAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2YearBuiltAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3YearBuilt":
			out.Values[i] = ec._IformTemp_txtSaleComp3YearBuilt(ctx, field, obj)
		case "txtSaleComp3YearBuiltAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3YearBuiltAdjBuiltIn(ctx, field, obj)
		case "txtListComp1YearBuilt":
			out.Values[i] = ec._IformTemp_txtListComp1YearBuilt(ctx, field, obj)
		case "txtListComp1YearBuiltAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1YearBuiltAdjBuiltIn(ctx, field, obj)
		case "txtListComp2YearBuilt":
			out.Values[i] = ec._IformTemp_txtListComp2YearBuilt(ctx, field, obj)
		case "txtListComp2YearBuiltAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2YearBuiltAdjBuiltIn(ctx, field, obj)
		case "txtListComp3YearBuilt":
			out.Values[i] = ec._IformTemp_txtListComp3YearBuilt(ctx, field, obj)
		case "txtListComp3YearBuiltAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3YearBuiltAdjBuiltIn(ctx, field, obj)
		case "txtSubjectAge":
			out.Values[i] = ec._IformTemp_txtSubjectAge(ctx, field, obj)
		case "txtSaleComp1Age":
			out.Values[i] = ec._IformTemp_txtSaleComp1Age(ctx, field, obj)
		case "txtSaleComp2Age":
			out.Values[i] = ec._IformTemp_txtSaleComp2Age(ctx, field, obj)
		case "txtSaleComp3Age":
			out.Values[i] = ec._IformTemp_txtSaleComp3Age(ctx, field, obj)
		case "txtListComp1Age":
			out.Values[i] = ec._IformTemp_txtListComp1Age(ctx, field, obj)
		case "txtListComp2Age":
			out.Values[i] = ec._IformTemp_txtListComp2Age(ctx, field, obj)
		case "txtListComp3Age":
			out.Values[i] = ec._IformTemp_txtListComp3Age(ctx, field, obj)
		case "txtSubjectAcres":
			out.Values[i] = ec._IformTemp_txtSubjectAcres(ctx, field, obj)
		case "txtSaleComp1Acres":
			out.Values[i] = ec._IformTemp_txtSaleComp1Acres(ctx, field, obj)
		case "txtSaleComp1AcresAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1AcresAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2Acres":
			out.Values[i] = ec._IformTemp_txtSaleComp2Acres(ctx, field, obj)
		case "txtSaleComp2AcresAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2AcresAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3Acres":
			out.Values[i] = ec._IformTemp_txtSaleComp3Acres(ctx, field, obj)
		case "txtSaleComp3AcresAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3AcresAdjBuiltIn(ctx, field, obj)
		case "txtListComp1Acres":
			out.Values[i] = ec._IformTemp_txtListComp1Acres(ctx, field, obj)
		case "txtListComp1AcresAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1AcresAdjBuiltIn(ctx, field, obj)
		case "txtListComp2Acres":
			out.Values[i] = ec._IformTemp_txtListComp2Acres(ctx, field, obj)
		case "txtListComp2AcresAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2AcresAdjBuiltIn(ctx, field, obj)
		case "txtListComp3Acres":
			out.Values[i] = ec._IformTemp_txtListComp3Acres(ctx, field, obj)
		case "txtListComp3AcresAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3AcresAdjBuiltIn(ctx, field, obj)
		case "txtSubjectSquareFeet":
			out.Values[i] = ec._IformTemp_txtSubjectSquareFeet(ctx, field, obj)
		case "txtSaleComp1SquareFeet":
			out.Values[i] = ec._IformTemp_txtSaleComp1SquareFeet(ctx, field, obj)
		case "txtSaleComp2SquareFeet":
			out.Values[i] = ec._IformTemp_txtSaleComp2SquareFeet(ctx, field, obj)
		case "txtSaleComp3SquareFeet":
			out.Values[i] = ec._IformTemp_txtSaleComp3SquareFeet(ctx, field, obj)
		case "txtListComp1SquareFeet":
			out.Values[i] = ec._IformTemp_txtListComp1SquareFeet(ctx, field, obj)
		case "txtListComp2SquareFeet":
			out.Values[i] = ec._IformTemp_txtListComp2SquareFeet(ctx, field, obj)
		case "txtListComp3SquareFeet":
			out.Values[i] = ec._IformTemp_txtListComp3SquareFeet(ctx, field, obj)
		case "cmbSubjectGarage":
			out.Values[i] = ec._IformTemp_cmbSubjectGarage(ctx, field, obj)
		case "cmbSaleComp1Garage":
			out.Values[i] = ec._IformTemp_cmbSaleComp1Garage(ctx, field, obj)
		case "txtSaleComp1GarageAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1GarageAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Garage":
			out.Values[i] = ec._IformTemp_cmbSaleComp2Garage(ctx, field, obj)
		case "txtSaleComp2GarageAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2GarageAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Garage":
			out.Values[i] = ec._IformTemp_cmbSaleComp3Garage(ctx, field, obj)
		case "txtSaleComp3GarageAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3GarageAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Garage":
			out.Values[i] = ec._IformTemp_cmbListComp1Garage(ctx, field, obj)
		case "txtListComp1GarageAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1GarageAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Garage":
			out.Values[i] = ec._IformTemp_cmbListComp2Garage(ctx, field, obj)
		case "txtListComp2GarageAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2GarageAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Garage":
			out.Values[i] = ec._IformTemp_cmbListComp3Garage(ctx, field, obj)
		case "txtListComp3GarageAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3GarageAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectPool":
			out.Values[i] = ec._IformTemp_cmbSubjectPool(ctx, field, obj)
		case "cmbSaleComp1Pool":
			out.Values[i] = ec._IformTemp_cmbSaleComp1Pool(ctx, field, obj)
		case "txtSaleComp1PoolAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1PoolAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Pool":
			out.Values[i] = ec._IformTemp_cmbSaleComp2Pool(ctx, field, obj)
		case "txtSaleComp2PoolAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2PoolAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Pool":
			out.Values[i] = ec._IformTemp_cmbSaleComp3Pool(ctx, field, obj)
		case "txtSaleComp3PoolAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3PoolAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Pool":
			out.Values[i] = ec._IformTemp_cmbListComp1Pool(ctx, field, obj)
		case "txtListComp1PoolAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1PoolAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Pool":
			out.Values[i] = ec._IformTemp_cmbListComp2Pool(ctx, field, obj)
		case "txtListComp2PoolAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2PoolAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Pool":
			out.Values[i] = ec._IformTemp_cmbListComp3Pool(ctx, field, obj)
		case "txtListComp3PoolAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3PoolAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectPorchPatioDeck":
			out.Values[i] = ec._IformTemp_cmbSubjectPorchPatioDeck(ctx, field, obj)
		case "cmbSaleComp1PorchPatioDeck":
			out.Values[i] = ec._IformTemp_cmbSaleComp1PorchPatioDeck(ctx, field, obj)
		case "txtSaleComp1PorchPatioDeckAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1PorchPatioDeckAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2PorchPatioDeck":
			out.Values[i] = ec._IformTemp_cmbSaleComp2PorchPatioDeck(ctx, field, obj)
		case "txtSaleComp2PorchPatioDeckAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2PorchPatioDeckAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3PorchPatioDeck":
			out.Values[i] = ec._IformTemp_cmbSaleComp3PorchPatioDeck(ctx, field, obj)
		case "txtSaleComp3PorchPatioDeckAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3PorchPatioDeckAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1PorchPatioDeck":
			out.Values[i] = ec._IformTemp_cmbListComp1PorchPatioDeck(ctx, field, obj)
		case "txtListComp1PorchPatioDeckAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1PorchPatioDeckAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2PorchPatioDeck":
			out.Values[i] = ec._IformTemp_cmbListComp2PorchPatioDeck(ctx, field, obj)
		case "txtListComp2PorchPatioDeckAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2PorchPatioDeckAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3PorchPatioDeck":
			out.Values[i] = ec._IformTemp_cmbListComp3PorchPatioDeck(ctx, field, obj)
		case "txtListComp3PorchPatioDeckAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3PorchPatioDeckAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectFireplace":
			out.Values[i] = ec._IformTemp_cmbSubjectFireplace(ctx, field, obj)
		case "cmbSaleComp1Fireplace":
			out.Values[i] = ec._IformTemp_cmbSaleComp1Fireplace(ctx, field, obj)
		case "txtSaleComp1FireplaceAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1FireplaceAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Fireplace":
			out.Values[i] = ec._IformTemp_cmbSaleComp2Fireplace(ctx, field, obj)
		case "txtSaleComp2FireplaceAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2FireplaceAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Fireplace":
			out.Values[i] = ec._IformTemp_cmbSaleComp3Fireplace(ctx, field, obj)
		case "txtSaleComp3FireplaceAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3FireplaceAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Fireplace":
			out.Values[i] = ec._IformTemp_cmbListComp1Fireplace(ctx, field, obj)
		case "txtListComp1FireplaceAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1FireplaceAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Fireplace":
			out.Values[i] = ec._IformTemp_cmbListComp2Fireplace(ctx, field, obj)
		case "txtListComp2FireplaceAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2FireplaceAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Fireplace":
			out.Values[i] = ec._IformTemp_cmbListComp3Fireplace(ctx, field, obj)
		case "txtListComp3FireplaceAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3FireplaceAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectBasement":
			out.Values[i] = ec._IformTemp_cmbSubjectBasement(ctx, field, obj)
		case "cmbSaleComp1Basement":
			out.Values[i] = ec._IformTemp_cmbSaleComp1Basement(ctx, field, obj)
		case "txtSaleComp1BasementAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1BasementAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2Basement":
			out.Values[i] = ec._IformTemp_cmbSaleComp2Basement(ctx, field, obj)
		case "txtSaleComp2BasementAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2BasementAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3Basement":
			out.Values[i] = ec._IformTemp_cmbSaleComp3Basement(ctx, field, obj)
		case "txtSaleComp3BasementAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3BasementAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1Basement":
			out.Values[i] = ec._IformTemp_cmbListComp1Basement(ctx, field, obj)
		case "txtListComp1BasementAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1BasementAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2Basement":
			out.Values[i] = ec._IformTemp_cmbListComp2Basement(ctx, field, obj)
		case "txtListComp2BasementAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2BasementAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3Basement":
			out.Values[i] = ec._IformTemp_cmbListComp3Basement(ctx, field, obj)
		case "txtListComp3BasementAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3BasementAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectIsFinished":
			out.Values[i] = ec._IformTemp_cmbSubjectIsFinished(ctx, field, obj)
		case "cmbSaleComp1IsFinished":
			out.Values[i] = ec._IformTemp_cmbSaleComp1IsFinished(ctx, field, obj)
		case "txtSaleComp1IsFinishedAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1IsFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2IsFinished":
			out.Values[i] = ec._IformTemp_cmbSaleComp2IsFinished(ctx, field, obj)
		case "txtSaleComp2IsFinishedAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2IsFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3IsFinished":
			out.Values[i] = ec._IformTemp_cmbSaleComp3IsFinished(ctx, field, obj)
		case "txtSaleComp3IsFinishedAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3IsFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1IsFinished":
			out.Values[i] = ec._IformTemp_cmbListComp1IsFinished(ctx, field, obj)
		case "txtListComp1IsFinishedAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1IsFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2IsFinished":
			out.Values[i] = ec._IformTemp_cmbListComp2IsFinished(ctx, field, obj)
		case "txtListComp2IsFinishedAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2IsFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3IsFinished":
			out.Values[i] = ec._IformTemp_cmbListComp3IsFinished(ctx, field, obj)
		case "txtListComp3IsFinishedAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3IsFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbSubjectPercentFinished":
			out.Values[i] = ec._IformTemp_cmbSubjectPercentFinished(ctx, field, obj)
		case "cmbSaleComp1PercentFinished":
			out.Values[i] = ec._IformTemp_cmbSaleComp1PercentFinished(ctx, field, obj)
		case "txtSaleComp1PercentFinishedAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1PercentFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp2PercentFinished":
			out.Values[i] = ec._IformTemp_cmbSaleComp2PercentFinished(ctx, field, obj)
		case "txtSaleComp2PercentFinishedAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2PercentFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbSaleComp3PercentFinished":
			out.Values[i] = ec._IformTemp_cmbSaleComp3PercentFinished(ctx, field, obj)
		case "txtSaleComp3PercentFinishedAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3PercentFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbListComp1PercentFinished":
			out.Values[i] = ec._IformTemp_cmbListComp1PercentFinished(ctx, field, obj)
		case "txtListComp1PercentFinishedAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1PercentFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbListComp2PercentFinished":
			out.Values[i] = ec._IformTemp_cmbListComp2PercentFinished(ctx, field, obj)
		case "txtListComp2PercentFinishedAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2PercentFinishedAdjBuiltIn(ctx, field, obj)
		case "cmbListComp3PercentFinished":
			out.Values[i] = ec._IformTemp_cmbListComp3PercentFinished(ctx, field, obj)
		case "txtListComp3PercentFinishedAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3PercentFinishedAdjBuiltIn(ctx, field, obj)
		case "txtSubjectBasementSqFt":
			out.Values[i] = ec._IformTemp_txtSubjectBasementSqFt(ctx, field, obj)
		case "txtSaleComp1BasementSqFt":
			out.Values[i] = ec._IformTemp_txtSaleComp1BasementSqFt(ctx, field, obj)
		case "txtSaleComp1BasementSqFtAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp1BasementSqFtAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp2BasementSqFt":
			out.Values[i] = ec._IformTemp_txtSaleComp2BasementSqFt(ctx, field, obj)
		case "txtSaleComp2BasementSqFtAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp2BasementSqFtAdjBuiltIn(ctx, field, obj)
		case "txtSaleComp3BasementSqFt":
			out.Values[i] = ec._IformTemp_txtSaleComp3BasementSqFt(ctx, field, obj)
		case "txtSaleComp3BasementSqFtAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtSaleComp3BasementSqFtAdjBuiltIn(ctx, field, obj)
		case "txtListComp1BasementSqFt":
			out.Values[i] = ec._IformTemp_txtListComp1BasementSqFt(ctx, field, obj)
		case "txtListComp1BasementSqFtAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp1BasementSqFtAdjBuiltIn(ctx, field, obj)
		case "txtListComp2BasementSqFt":
			out.Values[i] = ec._IformTemp_txtListComp2BasementSqFt(ctx, field, obj)
		case "txtListComp2BasementSqFtAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp2BasementSqFtAdjBuiltIn(ctx, field, obj)
		case "txtListComp3BasementSqFt":
			out.Values[i] = ec._IformTemp_txtListComp3BasementSqFt(ctx, field, obj)
		case "txtListComp3BasementSqFtAdjBuiltIn":
			out.Values[i] = ec._IformTemp_txtListComp3BasementSqFtAdjBuiltIn(ctx, field, obj)
		case "txtSubjectOriginalListDate":
			out.Values[i] = ec._IformTemp_txtSubjectOriginalListDate(ctx, field, obj)
		case "txtSaleComp1OriginalListDate":
			out.Values[i] = ec._IformTemp_txtSaleComp1OriginalListDate(ctx, field, obj)
		case "txtSaleComp2OriginalListDate":
			out.Values[i] = ec._IformTemp_txtSaleComp2OriginalListDate(ctx, field, obj)
		case "txtSaleComp3OriginalListDate":
			out.Values[i] = ec._IformTemp_txtSaleComp3OriginalListDate(ctx, field, obj)
		case "txtListComp1OriginalListDate":
			out.Values[i] = ec._IformTemp_txtListComp1OriginalListDate(ctx, field, obj)
		case "txtListComp2OriginalListDate":
			out.Values[i] = ec._IformTemp_txtListComp2OriginalListDate(ctx, field, obj)
		case "txtListComp3OriginalListDate":
			out.Values[i] = ec._IformTemp_txtListComp3OriginalListDate(ctx, field, obj)
		case "txtSubjectCurrentListDate":
			out.Values[i] = ec._IformTemp_txtSubjectCurrentListDate(ctx, field, obj)
		case "txtSaleComp1CurrentListDate":
			out.Values[i] = ec._IformTemp_txtSaleComp1CurrentListDate(ctx, field, obj)
		case "txtSaleComp2CurrentListDate":
			out.Values[i] = ec._IformTemp_txtSaleComp2CurrentListDate(ctx, field, obj)
		case "txtSaleComp3CurrentListDate":
			out.Values[i] = ec._IformTemp_txtSaleComp3CurrentListDate(ctx, field, obj)
		case "txtListComp1CurrentListDate":
			out.Values[i] = ec._IformTemp_txtListComp1CurrentListDate(ctx, field, obj)
		case "txtListComp2CurrentListDate":
			out.Values[i] = ec._IformTemp_txtListComp2CurrentListDate(ctx, field, obj)
		case "txtListComp3CurrentListDate":
			out.Values[i] = ec._IformTemp_txtListComp3CurrentListDate(ctx, field, obj)
		case "txtSubjectOriginalListPrice":
			out.Values[i] = ec._IformTemp_txtSubjectOriginalListPrice(ctx, field, obj)
		case "txtSaleComp1OriginalListPrice":
			out.Values[i] = ec._IformTemp_txtSaleComp1OriginalListPrice(ctx, field, obj)
		case "txtSaleComp2OriginalListPrice":
			out.Values[i] = ec._IformTemp_txtSaleComp2OriginalListPrice(ctx, field, obj)
		case "txtSaleComp3OriginalListPrice":
			out.Values[i] = ec._IformTemp_txtSaleComp3OriginalListPrice(ctx, field, obj)
		case "txtListComp1OriginalListPrice":
			out.Values[i] = ec._IformTemp_txtListComp1OriginalListPrice(ctx, field, obj)
		case "txtListComp2OriginalListPrice":
			out.Values[i] = ec._IformTemp_txtListComp2OriginalListPrice(ctx, field, obj)
		case "txtListComp3OriginalListPrice":
			out.Values[i] = ec._IformTemp_txtListComp3OriginalListPrice(ctx, field, obj)
		case "txtSubjectListPrice":
			out.Values[i] = ec._IformTemp_txtSubjectListPrice(ctx, field, obj)
		case "txtSaleComp1ListPrice":
			out.Values[i] = ec._IformTemp_txtSaleComp1ListPrice(ctx, field, obj)
		case "txtSaleComp2ListPrice":
			out.Values[i] = ec._IformTemp_txtSaleComp2ListPrice(ctx, field, obj)
		case "txtSaleComp3ListPrice":
			out.Values[i] = ec._IformTemp_txtSaleComp3ListPrice(ctx, field, obj)
		case "txtListComp1ListPrice":
			out.Values[i] = ec._IformTemp_txtListComp1ListPrice(ctx, field, obj)
		case "txtListComp2ListPrice":
			out.Values[i] = ec._IformTemp_txtListComp2ListPrice(ctx, field, obj)
		case "txtListComp3ListPrice":
			out.Values[i] = ec._IformTemp_txtListComp3ListPrice(ctx, field, obj)
		case "txtSubjectSalePrice":
			out.Values[i] = ec._IformTemp_txtSubjectSalePrice(ctx, field, obj)
		case "txtSaleComp1SalePrice":
			out.Values[i] = ec._IformTemp_txtSaleComp1SalePrice(ctx, field, obj)
		case "txtSaleComp2SalePrice":
			out.Values[i] = ec._IformTemp_txtSaleComp2SalePrice(ctx, field, obj)
		case "txtSaleComp3SalePrice":
			out.Values[i] = ec._IformTemp_txtSaleComp3SalePrice(ctx, field, obj)
		case "txtSubjectSaleDate":
			out.Values[i] = ec._IformTemp_txtSubjectSaleDate(ctx, field, obj)
		case "txtSaleComp1SaleDate":
			out.Values[i] = ec._IformTemp_txtSaleComp1SaleDate(ctx, field, obj)
		case "txtSaleComp2SaleDate":
			out.Values[i] = ec._IformTemp_txtSaleComp2SaleDate(ctx, field, obj)
		case "txtSaleComp3SaleDate":
			out.Values[i] = ec._IformTemp_txtSaleComp3SaleDate(ctx, field, obj)
		case "cmbSubjectFinancing":
			out.Values[i] = ec._IformTemp_cmbSubjectFinancing(ctx, field, obj)
		case "cmbSaleComp1Financing":
			out.Values[i] = ec._IformTemp_cmbSaleComp1Financing(ctx, field, obj)
		case "cmbSaleComp2Financing":
			out.Values[i] = ec._IformTemp_cmbSaleComp2Financing(ctx, field, obj)
		case "cmbSaleComp3Financing":
			out.Values[i] = ec._IformTemp_cmbSaleComp3Financing(ctx, field, obj)
		case "cmbListComp1Financing":
			out.Values[i] = ec._IformTemp_cmbListComp1Financing(ctx, field, obj)
		case "cmbListComp2Financing":
			out.Values[i] = ec._IformTemp_cmbListComp2Financing(ctx, field, obj)
		case "cmbListComp3Financing":
			out.Values[i] = ec._IformTemp_cmbListComp3Financing(ctx, field, obj)
		case "txtSubjectDOM":
			out.Values[i] = ec._IformTemp_txtSubjectDOM(ctx, field, obj)
		case "txtSaleComp1DOM":
			out.Values[i] = ec._IformTemp_txtSaleComp1DOM(ctx, field, obj)
		case "txtSaleComp2DOM":
			out.Values[i] = ec._IformTemp_txtSaleComp2DOM(ctx, field, obj)
		case "txtSaleComp3DOM":
			out.Values[i] = ec._IformTemp_txtSaleComp3DOM(ctx, field, obj)
		case "txtListComp1DOM":
			out.Values[i] = ec._IformTemp_txtListComp1DOM(ctx, field, obj)
		case "txtListComp2DOM":
			out.Values[i] = ec._IformTemp_txtListComp2DOM(ctx, field, obj)
		case "txtListComp3DOM":
			out.Values[i] = ec._IformTemp_txtListComp3DOM(ctx, field, obj)
		case "txtSubjectPricePerSqFt":
			out.Values[i] = ec._IformTemp_txtSubjectPricePerSqFt(ctx, field, obj)
		case "txtSaleComp1PricePerSqFt":
			out.Values[i] = ec._IformTemp_txtSaleComp1PricePerSqFt(ctx, field, obj)
		case "txtSaleComp2PricePerSqFt":
			out.Values[i] = ec._IformTemp_txtSaleComp2PricePerSqFt(ctx, field, obj)
		case "txtSaleComp3PricePerSqFt":
			out.Values[i] = ec._IformTemp_txtSaleComp3PricePerSqFt(ctx, field, obj)
		case "txtListComp1PricePerSqFt":
			out.Values[i] = ec._IformTemp_txtListComp1PricePerSqFt(ctx, field, obj)
		case "txtListComp2PricePerSqFt":
			out.Values[i] = ec._IformTemp_txtListComp2PricePerSqFt(ctx, field, obj)
		case "txtListComp3PricePerSqFt":
			out.Values[i] = ec._IformTemp_txtListComp3PricePerSqFt(ctx, field, obj)
		case "txtSubjectAdjustments":
			out.Values[i] = ec._IformTemp_txtSubjectAdjustments(ctx, field, obj)
		case "txtSaleComp1Adjustments":
			out.Values[i] = ec._IformTemp_txtSaleComp1Adjustments(ctx, field, obj)
		case "txtSaleComp2Adjustments":
			out.Values[i] = ec._IformTemp_txtSaleComp2Adjustments(ctx, field, obj)
		case "txtSaleComp3Adjustments":
			out.Values[i] = ec._IformTemp_txtSaleComp3Adjustments(ctx, field, obj)
		case "txtListComp1Adjustments":
			out.Values[i] = ec._IformTemp_txtListComp1Adjustments(ctx, field, obj)
		case "txtListComp2Adjustments":
			out.Values[i] = ec._IformTemp_txtListComp2Adjustments(ctx, field, obj)
		case "txtListComp3Adjustments":
			out.Values[i] = ec._IformTemp_txtListComp3Adjustments(ctx, field, obj)
		case "txtSubjectCompTotals":
			out.Values[i] = ec._IformTemp_txtSubjectCompTotals(ctx, field, obj)
		case "txtSaleComp1CompTotals":
			out.Values[i] = ec._IformTemp_txtSaleComp1CompTotals(ctx, field, obj)
		case "txtSaleComp2CompTotals":
			out.Values[i] = ec._IformTemp_txtSaleComp2CompTotals(ctx, field, obj)
		case "txtSaleComp3CompTotals":
			out.Values[i] = ec._IformTemp_txtSaleComp3CompTotals(ctx, field, obj)
		case "txtListComp1CompTotals":
			out.Values[i] = ec._IformTemp_txtListComp1CompTotals(ctx, field, obj)
		case "txtListComp2CompTotals":
			out.Values[i] = ec._IformTemp_txtListComp2CompTotals(ctx, field, obj)
		case "txtListComp3CompTotals":
			out.Values[i] = ec._IformTemp_txtListComp3CompTotals(ctx, field, obj)
		case "cmbListComp1CommentType":
			out.Values[i] = ec._IformTemp_cmbListComp1CommentType(ctx, field, obj)
		case "txtListComp1ComparableComments":
			out.Values[i] = ec._IformTemp_txtListComp1ComparableComments(ctx, field, obj)
		case "txtListComp1FormatAdjustments":
			out.Values[i] = ec._IformTemp_txtListComp1FormatAdjustments(ctx, field, obj)
		case "txtListComp1MLSComments":
			out.Values[i] = ec._IformTemp_txtListComp1MLSComments(ctx, field, obj)
		case "cmbListComp2CommentType":
			out.Values[i] = ec._IformTemp_cmbListComp2CommentType(ctx, field, obj)
		case "txtListComp2ComparableComments":
			out.Values[i] = ec._IformTemp_txtListComp2ComparableComments(ctx, field, obj)
		case "txtListComp2FormatAdjustments":
			out.Values[i] = ec._IformTemp_txtListComp2FormatAdjustments(ctx, field, obj)
		case "txtListComp2MLSComments":
			out.Values[i] = ec._IformTemp_txtListComp2MLSComments(ctx, field, obj)
		case "cmbListComp3CommentType":
			out.Values[i] = ec._IformTemp_cmbListComp3CommentType(ctx, field, obj)
		case "txtListComp3ComparableComments":
			out.Values[i] = ec._IformTemp_txtListComp3ComparableComments(ctx, field, obj)
		case "txtListComp3FormatAdjustments":
			out.Values[i] = ec._IformTemp_txtListComp3FormatAdjustments(ctx, field, obj)
		case "txtListComp3MLSComments":
			out.Values[i] = ec._IformTemp_txtListComp3MLSComments(ctx, field, obj)
		case "cmbSaleComp1CommentType":
			out.Values[i] = ec._IformTemp_cmbSaleComp1CommentType(ctx, field, obj)
		case "txtSaleComp1ComparableComments":
			out.Values[i] = ec._IformTemp_txtSaleComp1ComparableComments(ctx, field, obj)
		case "txtSaleComp1FormatAdjustments":
			out.Values[i] = ec._IformTemp_txtSaleComp1FormatAdjustments(ctx, field, obj)
		case "txtSaleComp1MLSComments":
			out.Values[i] = ec._IformTemp_txtSaleComp1MLSComments(ctx, field, obj)
		case "cmbSaleComp2CommentType":
			out.Values[i] = ec._IformTemp_cmbSaleComp2CommentType(ctx, field, obj)
		case "txtSaleComp2ComparableComments":
			out.Values[i] = ec._IformTemp_txtSaleComp2ComparableComments(ctx, field, obj)
		case "txtSaleComp2FormatAdjustments":
			out.Values[i] = ec._IformTemp_txtSaleComp2FormatAdjustments(ctx, field, obj)
		case "txtSaleComp2MLSComments":
			out.Values[i] = ec._IformTemp_txtSaleComp2MLSComments(ctx, field, obj)
		case "cmbSaleComp3CommentType":
			out.Values[i] = ec._IformTemp_cmbSaleComp3CommentType(ctx, field, obj)
		case "txtSaleComp3ComparableComments":
			out.Values[i] = ec._IformTemp_txtSaleComp3ComparableComments(ctx, field, obj)
		case "txtSaleComp3FormatAdjustments":
			out.Values[i] = ec._IformTemp_txtSaleComp3FormatAdjustments(ctx, field, obj)
		case "txtSaleComp3MLSComments":
			out.Values[i] = ec._IformTemp_txtSaleComp3MLSComments(ctx, field, obj)
		case "cmbNeighborhoodTrend":
			out.Values[i] = ec._IformTemp_cmbNeighborhoodTrend(ctx, field, obj)
		case "txtMonthlyPecent":
			out.Values[i] = ec._IformTemp_txtMonthlyPecent(ctx, field, obj)
		case "txtEstimatedRent":
			out.Values[i] = ec._IformTemp_txtEstimatedRent(ctx, field, obj)
		case "txtEstimatedDaysOnMarket":
			out.Values[i] = ec._IformTemp_txtEstimatedDaysOnMarket(ctx, field, obj)
		case "txtNoBoarded":
			out.Values[i] = ec._IformTemp_txtNoBoarded(ctx, field, obj)
		case "txtNoOfActive":
			out.Values[i] = ec._IformTemp_txtNoOfActive(ctx, field, obj)
		case "txt6MonthPecent":
			out.Values[i] = ec._IformTemp_txt6MonthPecent(ctx, field, obj)
		case "txtAnnualPecent":
			out.Values[i] = ec._IformTemp_txtAnnualPecent(ctx, field, obj)
		case "txtListings":
			out.Values[i] = ec._IformTemp_txtListings(ctx, field, obj)
		case "cmbSupply":
			out.Values[i] = ec._IformTemp_cmbSupply(ctx, field, obj)
		case "txtListingsMinValue":
			out.Values[i] = ec._IformTemp_txtListingsMinValue(ctx, field, obj)
		case "txtListingsRange1":
			out.Values[i] = ec._IformTemp_txtListingsRange1(ctx, field, obj)
		case "txtListingsMedValue":
			out.Values[i] = ec._IformTemp_txtListingsMedValue(ctx, field, obj)
		case "txtListingsMaxValue":
			out.Values[i] = ec._IformTemp_txtListingsMaxValue(ctx, field, obj)
		case "txtListingsRange2":
			out.Values[i] = ec._IformTemp_txtListingsRange2(ctx, field, obj)
		case "txtListingsDOM":
			out.Values[i] = ec._IformTemp_txtListingsDOM(ctx, field, obj)
		case "txtListingsDOMRange1":
			out.Values[i] = ec._IformTemp_txtListingsDOMRange1(ctx, field, obj)
		case "txtListingsDOMRange2":
			out.Values[i] = ec._IformTemp_txtListingsDOMRange2(ctx, field, obj)
		case "cmbREOTrend":
			out.Values[i] = ec._IformTemp_cmbREOTrend(ctx, field, obj)
		case "txtNoOfFM":
			out.Values[i] = ec._IformTemp_txtNoOfFM(ctx, field, obj)
		case "txtNoOfSS":
			out.Values[i] = ec._IformTemp_txtNoOfSS(ctx, field, obj)
		case "txtNoOfREO":
			out.Values[i] = ec._IformTemp_txtNoOfREO(ctx, field, obj)
		case "txtNoOfDistressed":
			out.Values[i] = ec._IformTemp_txtNoOfDistressed(ctx, field, obj)
		case "txtSales":
			out.Values[i] = ec._IformTemp_txtSales(ctx, field, obj)
		case "cmbDemand":
			out.Values[i] = ec._IformTemp_cmbDemand(ctx, field, obj)
		case "txtSalesRange1":
			out.Values[i] = ec._IformTemp_txtSalesRange1(ctx, field, obj)
		case "txtSalesMedValue":
			out.Values[i] = ec._IformTemp_txtSalesMedValue(ctx, field, obj)
		case "txtSalesRange2":
			out.Values[i] = ec._IformTemp_txtSalesRange2(ctx, field, obj)
		case "txtSalesDOM":
			out.Values[i] = ec._IformTemp_txtSalesDOM(ctx, field, obj)
		case "txtSalesDOMRange1":
			out.Values[i] = ec._IformTemp_txtSalesDOMRange1(ctx, field, obj)
		case "txtSalesDOMRange2":
			out.Values[i] = ec._IformTemp_txtSalesDOMRange2(ctx, field, obj)
		case "txtZillowNeighborhoodTrend":
			out.Values[i] = ec._IformTemp_txtZillowNeighborhoodTrend(ctx, field, obj)
		case "txtNeighborhoodTrendComments":
			out.Values[i] = ec._IformTemp_txtNeighborhoodTrendComments(ctx, field, obj)
		case "txtTotalListings":
			out.Values[i] = ec._IformTemp_txtTotalListings(ctx, field, obj)
		case "txtTotalSales":
			out.Values[i] = ec._IformTemp_txtTotalSales(ctx, field, obj)
		case "txtNoOfREOListings":
			out.Values[i] = ec._IformTemp_txtNoOfREOListings(ctx, field, obj)
		case "txtNoOfSSListings":
			out.Values[i] = ec._IformTemp_txtNoOfSSListings(ctx, field, obj)
		case "txtNoOfREOSales":
			out.Values[i] = ec._IformTemp_txtNoOfREOSales(ctx, field, obj)
		case "txtNoOfSSSales":
			out.Values[i] = ec._IformTemp_txtNoOfSSSales(ctx, field, obj)
		case "txtTaxID":
			out.Values[i] = ec._IformTemp_txtTaxID(ctx, field, obj)
		case "txtLastSaleDate":
			out.Values[i] = ec._IformTemp_txtLastSaleDate(ctx, field, obj)
		case "txtLastSalePrice":
			out.Values[i] = ec._IformTemp_txtLastSalePrice(ctx, field, obj)
		case "cmbIsListed":
			out.Values[i] = ec._IformTemp_cmbIsListed(ctx, field, obj)
		case "txtOwnerOccupied":
			out.Values[i] = ec._IformTemp_txtOwnerOccupied(ctx, field, obj)
		case "txtRenterOccupied":
			out.Values[i] = ec._IformTemp_txtRenterOccupied(ctx, field, obj)
		case "txtMarketRent":
			out.Values[i] = ec._IformTemp_txtMarketRent(ctx, field, obj)
		case "txtNoOfRentals":
			out.Values[i] = ec._IformTemp_txtNoOfRentals(ctx, field, obj)
		case "txtTypicalDOM":
			out.Values[i] = ec._IformTemp_txtTypicalDOM(ctx, field, obj)
		case "txtNoRentHomes":
			out.Values[i] = ec._IformTemp_txtNoRentHomes(ctx, field, obj)
		case "txtTypicalRentalRates":
			out.Values[i] = ec._IformTemp_txtTypicalRentalRates(ctx, field, obj)
		case "adjustmentPrice":
			out.Values[i] = ec._IformTemp_adjustmentPrice(ctx, field, obj)
		case "txtCalculatedGLA":
			out.Values[i] = ec._IformTemp_txtCalculatedGLA(ctx, field, obj)
		case "txtCalculatedAge":
			out.Values[i] = ec._IformTemp_txtCalculatedAge(ctx, field, obj)
		case "txtCalculatedSaleDates":
			out.Values[i] = ec._IformTemp_txtCalculatedSaleDates(ctx, field, obj)
		case "txtCalculatedProximity":
			out.Values[i] = ec._IformTemp_txtCalculatedProximity(ctx, field, obj)
		case "txtCalculatedStyle":
			out.Values[i] = ec._IformTemp_txtCalculatedStyle(ctx, field, obj)
		case "txtCalculatedMonthsSupply":
			out.Values[i] = ec._IformTemp_txtCalculatedMonthsSupply(ctx, field, obj)
		case "txtCalculatedProxim":
			out.Values[i] = ec._IformTemp_txtCalculatedProxim(ctx, field, obj)
		case "txtCalculatedGLAs":
			out.Values[i] = ec._IformTemp_txtCalculatedGLAs(ctx, field, obj)
		case "txtCalculatedAges":
			out.Values[i] = ec._IformTemp_txtCalculatedAges(ctx, field, obj)
		case "txtCalculatedCond":
			out.Values[i] = ec._IformTemp_txtCalculatedCond(ctx, field, obj)
		case "txtCalculatedView":
			out.Values[i] = ec._IformTemp_txtCalculatedView(ctx, field, obj)
		case "txtCalculatedStyle1":
			out.Values[i] = ec._IformTemp_txtCalculatedStyle1(ctx, field, obj)
		case "txtCalculatedLots":
			out.Values[i] = ec._IformTemp_txtCalculatedLots(ctx, field, obj)
		case "txtCalculatedBeds":
			out.Values[i] = ec._IformTemp_txtCalculatedBeds(ctx, field, obj)
		case "txtCalculatedBath":
			out.Values[i] = ec._IformTemp_txtCalculatedBath(ctx, field, obj)
		case "rdbresaletext":
			out.Values[i] = ec._IformTemp_rdbresaletext(ctx, field, obj)
		case "rdbmarketedtext":
			out.Values[i] = ec._IformTemp_rdbmarketedtext(ctx, field, obj)
		case "txtpmi":
			out.Values[i] = ec._IformTemp_txtpmi(ctx, field, obj)
		case "txtOtherComments":
			out.Values[i] = ec._IformTemp_txtOtherComments(ctx, field, obj)
		case "txtcbnew":
			out.Values[i] = ec._IformTemp_txtcbnew(ctx, field, obj)
		case "txtcbold":
			out.Values[i] = ec._IformTemp_txtcbold(ctx, field, obj)
		case "txtcbstyle":
			out.Values[i] = ec._IformTemp_txtcbstyle(ctx, field, obj)
		case "txtcblot":
			out.Values[i] = ec._IformTemp_txtcblot(ctx, field, obj)
		case "txtcbview":
			out.Values[i] = ec._IformTemp_txtcbview(ctx, field, obj)
		case "txtcbdamage":
			out.Values[i] = ec._IformTemp_txtcbdamage(ctx, field, obj)
		case "txtcbupgrade":
			out.Values[i] = ec._IformTemp_txtcbupgrade(ctx, field, obj)
		case "txtcbinfluence":
			out.Values[i] = ec._IformTemp_txtcbinfluence(ctx, field, obj)
		case "txtSubjectComments":
			out.Values[i] = ec._IformTemp_txtSubjectComments(ctx, field, obj)
		case "txtNeighborhoodComments":
			out.Values[i] = ec._IformTemp_txtNeighborhoodComments(ctx, field, obj)
		case "txtNeighborhoodTrend":
			out.Values[i] = ec._IformTemp_txtNeighborhoodTrend(ctx, field, obj)
		case "txtValidation1":
			out.Values[i] = ec._IformTemp_txtValidation1(ctx, field, obj)
		case "txtUniqueComments":
			out.Values[i] = ec._IformTemp_txtUniqueComments(ctx, field, obj)
		case "txtMarketingStrategy":
			out.Values[i] = ec._IformTemp_txtMarketingStrategy(ctx, field, obj)
		case "txtDisclaimer2":
			out.Values[i] = ec._IformTemp_txtDisclaimer2(ctx, field, obj)
		case "txtBrokerComments":
			out.Values[i] = ec._IformTemp_txtBrokerComments(ctx, field, obj)
		case "txtValidation":
			out.Values[i] = ec._IformTemp_txtValidation(ctx, field, obj)
		case "txt30DayQuickSale":
			out.Values[i] = ec._IformTemp_txt30DayQuickSale(ctx, field, obj)
		case "txt60DayQuickSale":
			out.Values[i] = ec._IformTemp_txt60DayQuickSale(ctx, field, obj)
		case "txt90DayAsIsValue":
			out.Values[i] = ec._IformTemp_txt90DayAsIsValue(ctx, field, obj)
		case "txt120DayQuickSale":
			out.Values[i] = ec._IformTemp_txt120DayQuickSale(ctx, field, obj)
		case "txt180DayQuickSale":
			out.Values[i] = ec._IformTemp_txt180DayQuickSale(ctx, field, obj)
		case "txtListPriceFinalValues":
			out.Values[i] = ec._IformTemp_txtListPriceFinalValues(ctx, field, obj)
		case "txt30DayListPriceFinalValues":
			out.Values[i] = ec._IformTemp_txt30DayListPriceFinalValues(ctx, field, obj)
		case "txt30DayQuickSaleRepaired":
			out.Values[i] = ec._IformTemp_txt30DayQuickSaleRepaired(ctx, field, obj)
		case "txt60DayQuickSaleRepaired":
			out.Values[i] = ec._IformTemp_txt60DayQuickSaleRepaired(ctx, field, obj)
		case "txt90DayAsIsValueRepaired":
			out.Values[i] = ec._IformTemp_txt90DayAsIsValueRepaired(ctx, field, obj)
		case "txt120DayQuickSaleRepaired":
			out.Values[i] = ec._IformTemp_txt120DayQuickSaleRepaired(ctx, field, obj)
		case "txt180DayQuickSaleRepaired":
			out.Values[i] = ec._IformTemp_txt180DayQuickSaleRepaired(ctx, field, obj)
		case "txtListPriceRepaired":
			out.Values[i] = ec._IformTemp_txtListPriceRepaired(ctx, field, obj)
		case "txt30DayListPriceRepaired":
			out.Values[i] = ec._IformTemp_txt30DayListPriceRepaired(ctx, field, obj)
		case "cmbHouse":
			out.Values[i] = ec._IformTemp_cmbHouse(ctx, field, obj)
		case "cmbPositive":
			out.Values[i] = ec._IformTemp_cmbPositive(ctx, field, obj)
		case "cmbNegative":
			out.Values[i] = ec._IformTemp_cmbNegative(ctx, field, obj)
		case "cmbView":
			out.Values[i] = ec._IformTemp_cmbView(ctx, field, obj)
		case "cmbMarket":
			out.Values[i] = ec._IformTemp_cmbMarket(ctx, field, obj)
		case "cmbPricing":
			out.Values[i] = ec._IformTemp_cmbPricing(ctx, field, obj)
		case "cmbListing":
			out.Values[i] = ec._IformTemp_cmbListing(ctx, field, obj)
		case "cmbExtra":
			out.Values[i] = ec._IformTemp_cmbExtra(ctx, field, obj)
		case "txtUnique":
			out.Values[i] = ec._IformTemp_txtUnique(ctx, field, obj)
		case "priceComment":
			out.Values[i] = ec._IformTemp_priceComment(ctx, field, obj)
		case "rangeComment":
			out.Values[i] = ec._IformTemp_rangeComment(ctx, field, obj)
		case "proxException":
			out.Values[i] = ec._IformTemp_proxException(ctx, field, obj)
		case "glaException":
			out.Values[i] = ec._IformTemp_glaException(ctx, field, obj)
		case "ageException":
			out.Values[i] = ec._IformTemp_ageException(ctx, field, obj)
		case "condException":
			out.Values[i] = ec._IformTemp_condException(ctx, field, obj)
		case "viewException":
			out.Values[i] = ec._IformTemp_viewException(ctx, field, obj)
		case "styleException":
			out.Values[i] = ec._IformTemp_styleException(ctx, field, obj)
		case "lotException":
			out.Values[i] = ec._IformTemp_lotException(ctx, field, obj)
		case "bedException":
			out.Values[i] = ec._IformTemp_bedException(ctx, field, obj)
		case "bathException":
			out.Values[i] = ec._IformTemp_bathException(ctx, field, obj)
		case "history":
			out.Values[i] = ec._IformTemp_history(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var instructionImplementors = []string{"Instruction"}

func (ec *executionContext) _Instruction(ctx context.Context, sel ast.SelectionSet, obj *models.Instruction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, instructionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Instruction")
		case "id":
			out.Values[i] = ec._Instruction_id(ctx, field, obj)
		case "tag":
			out.Values[i] = ec._Instruction_tag(ctx, field, obj)
		case "client":
			out.Values[i] = ec._Instruction_client(ctx, field, obj)
		case "clientId":
			out.Values[i] = ec._Instruction_clientId(ctx, field, obj)
		case "company":
			out.Values[i] = ec._Instruction_company(ctx, field, obj)
		case "companyId":
			out.Values[i] = ec._Instruction_companyId(ctx, field, obj)
		case "url":
			out.Values[i] = ec._Instruction_url(ctx, field, obj)
		case "fileName":
			out.Values[i] = ec._Instruction_fileName(ctx, field, obj)
		case "comment":
			out.Values[i] = ec._Instruction_comment(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._Instruction_createdDateTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var instructionResultImplementors = []string{"InstructionResult"}

func (ec *executionContext) _InstructionResult(ctx context.Context, sel ast.SelectionSet, obj *models.InstructionResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, instructionResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InstructionResult")
		case "totalCount":
			out.Values[i] = ec._InstructionResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._InstructionResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var invoiceImplementors = []string{"Invoice"}

func (ec *executionContext) _Invoice(ctx context.Context, sel ast.SelectionSet, obj *models.Invoice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, invoiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Invoice")
		case "id":
			out.Values[i] = ec._Invoice_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Invoice_type(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Invoice_name(ctx, field, obj)
		case "employeeId":
			out.Values[i] = ec._Invoice_employeeId(ctx, field, obj)
		case "date":
			out.Values[i] = ec._Invoice_date(ctx, field, obj)
		case "orderNumber":
			out.Values[i] = ec._Invoice_orderNumber(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Invoice_address(ctx, field, obj)
		case "company":
			out.Values[i] = ec._Invoice_company(ctx, field, obj)
		case "client":
			out.Values[i] = ec._Invoice_client(ctx, field, obj)
		case "orderType":
			out.Values[i] = ec._Invoice_orderType(ctx, field, obj)
		case "isSuperRush":
			out.Values[i] = ec._Invoice_isSuperRush(ctx, field, obj)
		case "superRushRemarks":
			out.Values[i] = ec._Invoice_superRushRemarks(ctx, field, obj)
		case "isRush":
			out.Values[i] = ec._Invoice_isRush(ctx, field, obj)
		case "rushRemarks":
			out.Values[i] = ec._Invoice_rushRemarks(ctx, field, obj)
		case "isInterior":
			out.Values[i] = ec._Invoice_isInterior(ctx, field, obj)
		case "interiorRemarks":
			out.Values[i] = ec._Invoice_interiorRemarks(ctx, field, obj)
		case "isRentalAddendum":
			out.Values[i] = ec._Invoice_isRentalAddendum(ctx, field, obj)
		case "RentalAddendumRemarks":
			out.Values[i] = ec._Invoice_RentalAddendumRemarks(ctx, field, obj)
		case "isInitialBpo":
			out.Values[i] = ec._Invoice_isInitialBpo(ctx, field, obj)
		case "initialBpoRemarks":
			out.Values[i] = ec._Invoice_initialBpoRemarks(ctx, field, obj)
		case "isInspection":
			out.Values[i] = ec._Invoice_isInspection(ctx, field, obj)
		case "inspectionRemarks":
			out.Values[i] = ec._Invoice_inspectionRemarks(ctx, field, obj)
		case "isNoCsv":
			out.Values[i] = ec._Invoice_isNoCsv(ctx, field, obj)
		case "noCsvRemarks":
			out.Values[i] = ec._Invoice_noCsvRemarks(ctx, field, obj)
		case "isNoIFill":
			out.Values[i] = ec._Invoice_isNoIFill(ctx, field, obj)
		case "noIFillRemarks":
			out.Values[i] = ec._Invoice_noIFillRemarks(ctx, field, obj)
		case "isOtherPremium":
			out.Values[i] = ec._Invoice_isOtherPremium(ctx, field, obj)
		case "otherPremiumRemarks":
			out.Values[i] = ec._Invoice_otherPremiumRemarks(ctx, field, obj)
		case "qcType":
			out.Values[i] = ec._Invoice_qcType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var invoiceRequestHistoryImplementors = []string{"InvoiceRequestHistory"}

func (ec *executionContext) _InvoiceRequestHistory(ctx context.Context, sel ast.SelectionSet, obj *models.InvoiceRequestHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, invoiceRequestHistoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InvoiceRequestHistory")
		case "id":
			out.Values[i] = ec._InvoiceRequestHistory_id(ctx, field, obj)
		case "dateRequested":
			out.Values[i] = ec._InvoiceRequestHistory_dateRequested(ctx, field, obj)
		case "orderNumber":
			out.Values[i] = ec._InvoiceRequestHistory_orderNumber(ctx, field, obj)
		case "address":
			out.Values[i] = ec._InvoiceRequestHistory_address(ctx, field, obj)
		case "company":
			out.Values[i] = ec._InvoiceRequestHistory_company(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._InvoiceRequestHistory_remarks(ctx, field, obj)
		case "status":
			out.Values[i] = ec._InvoiceRequestHistory_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var invoiceRequestHistoryResultImplementors = []string{"InvoiceRequestHistoryResult"}

func (ec *executionContext) _InvoiceRequestHistoryResult(ctx context.Context, sel ast.SelectionSet, obj *models.InvoiceRequestHistoryResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, invoiceRequestHistoryResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InvoiceRequestHistoryResult")
		case "totalCount":
			out.Values[i] = ec._InvoiceRequestHistoryResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._InvoiceRequestHistoryResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var invoiceRequestResultImplementors = []string{"InvoiceRequestResult"}

func (ec *executionContext) _InvoiceRequestResult(ctx context.Context, sel ast.SelectionSet, obj *models.InvoiceRequestResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, invoiceRequestResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InvoiceRequestResult")
		case "totalCount":
			out.Values[i] = ec._InvoiceRequestResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._InvoiceRequestResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var logImplementors = []string{"Log"}

func (ec *executionContext) _Log(ctx context.Context, sel ast.SelectionSet, obj *models.Log) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, logImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Log")
		case "datetime":
			out.Values[i] = ec._Log_datetime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "action":
			out.Values[i] = ec._Log_action(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Log_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modifiedBy":
			out.Values[i] = ec._Log_modifiedBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var loginLogImplementors = []string{"LoginLog"}

func (ec *executionContext) _LoginLog(ctx context.Context, sel ast.SelectionSet, obj *models.LoginLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, loginLogImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginLog")
		case "username":
			out.Values[i] = ec._LoginLog_username(ctx, field, obj)
		case "datetime":
			out.Values[i] = ec._LoginLog_datetime(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._LoginLog_ipAddress(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var loginLogResultImplementors = []string{"LoginLogResult"}

func (ec *executionContext) _LoginLogResult(ctx context.Context, sel ast.SelectionSet, obj *models.LoginLogResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, loginLogResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginLogResult")
		case "totalCount":
			out.Values[i] = ec._LoginLogResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._LoginLogResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "login":
			out.Values[i] = ec._Mutation_login(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "registerUser":
			out.Values[i] = ec._Mutation_registerUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "forgetPassword":
			out.Values[i] = ec._Mutation_forgetPassword(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resetPassword":
			out.Values[i] = ec._Mutation_resetPassword(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateProfile":
			out.Values[i] = ec._Mutation_updateProfile(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveProfileDoc":
			out.Values[i] = ec._Mutation_saveProfileDoc(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteProfileDoc":
			out.Values[i] = ec._Mutation_deleteProfileDoc(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveAccount":
			out.Values[i] = ec._Mutation_saveAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAccount":
			out.Values[i] = ec._Mutation_updateAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAccount":
			out.Values[i] = ec._Mutation_deleteAccount(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAdjustment":
			out.Values[i] = ec._Mutation_updateAdjustment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setAdjustmentDefault":
			out.Values[i] = ec._Mutation_setAdjustmentDefault(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveComment":
			out.Values[i] = ec._Mutation_saveComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateComment":
			out.Values[i] = ec._Mutation_updateComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteComment":
			out.Values[i] = ec._Mutation_deleteComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setCommentDefault":
			out.Values[i] = ec._Mutation_setCommentDefault(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDefault":
			out.Values[i] = ec._Mutation_updateDefault(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "savePipeline":
			out.Values[i] = ec._Mutation_savePipeline(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePipeline":
			out.Values[i] = ec._Mutation_updatePipeline(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "savePipelineQualityControl":
			out.Values[i] = ec._Mutation_savePipelineQualityControl(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "savePipelineDoc":
			out.Values[i] = ec._Mutation_savePipelineDoc(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePipelineDoc":
			out.Values[i] = ec._Mutation_deletePipelineDoc(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "savePipelinePhoto":
			out.Values[i] = ec._Mutation_savePipelinePhoto(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePipelinePhoto":
			out.Values[i] = ec._Mutation_deletePipelinePhoto(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submitPipelinePhoto":
			out.Values[i] = ec._Mutation_submitPipelinePhoto(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "savePipelineNote":
			out.Values[i] = ec._Mutation_savePipelineNote(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveCredit":
			out.Values[i] = ec._Mutation_saveCredit(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addCreditLedger":
			out.Values[i] = ec._Mutation_addCreditLedger(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveCompany":
			out.Values[i] = ec._Mutation_saveCompany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCompany":
			out.Values[i] = ec._Mutation_updateCompany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCompany":
			out.Values[i] = ec._Mutation_deleteCompany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveUser":
			out.Values[i] = ec._Mutation_saveUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePipelineState":
			out.Values[i] = ec._Mutation_updatePipelineState(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveEmailTemplate":
			out.Values[i] = ec._Mutation_saveEmailTemplate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateEmailTemplate":
			out.Values[i] = ec._Mutation_updateEmailTemplate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteEmailTemplate":
			out.Values[i] = ec._Mutation_deleteEmailTemplate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveHeader":
			out.Values[i] = ec._Mutation_saveHeader(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveHeaderDetail":
			out.Values[i] = ec._Mutation_saveHeaderDetail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateHeader":
			out.Values[i] = ec._Mutation_updateHeader(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteHeader":
			out.Values[i] = ec._Mutation_deleteHeader(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveInstruction":
			out.Values[i] = ec._Mutation_saveInstruction(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteInstruction":
			out.Values[i] = ec._Mutation_deleteInstruction(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveQualityControl":
			out.Values[i] = ec._Mutation_saveQualityControl(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateQualityControl":
			out.Values[i] = ec._Mutation_updateQualityControl(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePipelineNeighborhood":
			out.Values[i] = ec._Mutation_updatePipelineNeighborhood(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveReview":
			out.Values[i] = ec._Mutation_saveReview(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateReview":
			out.Values[i] = ec._Mutation_updateReview(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteReview":
			out.Values[i] = ec._Mutation_deleteReview(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRequest":
			out.Values[i] = ec._Mutation_updateRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveRequest":
			out.Values[i] = ec._Mutation_saveRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "savePipelineQualityControlAndNote":
			out.Values[i] = ec._Mutation_savePipelineQualityControlAndNote(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveInvoice":
			out.Values[i] = ec._Mutation_saveInvoice(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateInvoice":
			out.Values[i] = ec._Mutation_updateInvoice(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cancelInvoice":
			out.Values[i] = ec._Mutation_cancelInvoice(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIform":
			out.Values[i] = ec._Mutation_updateIform(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateIformTemp":
			out.Values[i] = ec._Mutation_updateIformTemp(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePipelineRepair":
			out.Values[i] = ec._Mutation_updatePipelineRepair(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUser":
			out.Values[i] = ec._Mutation_updateUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveAnnouncement":
			out.Values[i] = ec._Mutation_saveAnnouncement(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAnnouncement":
			out.Values[i] = ec._Mutation_updateAnnouncement(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAnnouncement":
			out.Values[i] = ec._Mutation_deleteAnnouncement(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveSession":
			out.Values[i] = ec._Mutation_saveSession(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stopSession":
			out.Values[i] = ec._Mutation_stopSession(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateSession":
			out.Values[i] = ec._Mutation_updateSession(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "savePermissionGroup":
			out.Values[i] = ec._Mutation_savePermissionGroup(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePermissionGroup":
			out.Values[i] = ec._Mutation_updatePermissionGroup(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePermissionGroup":
			out.Values[i] = ec._Mutation_deletePermissionGroup(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "savePipelineComparable":
			out.Values[i] = ec._Mutation_savePipelineComparable(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePipelineComparable":
			out.Values[i] = ec._Mutation_updatePipelineComparable(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePipelineComparable":
			out.Values[i] = ec._Mutation_deletePipelineComparable(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveBilling":
			out.Values[i] = ec._Mutation_saveBilling(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateBilling":
			out.Values[i] = ec._Mutation_updateBilling(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteBilling":
			out.Values[i] = ec._Mutation_deleteBilling(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveIformGrid":
			out.Values[i] = ec._Mutation_saveIformGrid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteIformGrid":
			out.Values[i] = ec._Mutation_deleteIformGrid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verifyPaypalTransaction":
			out.Values[i] = ec._Mutation_verifyPaypalTransaction(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createBillingExcel":
			out.Values[i] = ec._Mutation_createBillingExcel(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateQcRequest":
			out.Values[i] = ec._Mutation_updateQcRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "continueSession":
			out.Values[i] = ec._Mutation_continueSession(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orderAnalyticsImplementors = []string{"OrderAnalytics"}

func (ec *executionContext) _OrderAnalytics(ctx context.Context, sel ast.SelectionSet, obj *models.OrderAnalytics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, orderAnalyticsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderAnalytics")
		case "client":
			out.Values[i] = ec._OrderAnalytics_client(ctx, field, obj)
		case "month":
			out.Values[i] = ec._OrderAnalytics_month(ctx, field, obj)
		case "unpaid":
			out.Values[i] = ec._OrderAnalytics_unpaid(ctx, field, obj)
		case "paid":
			out.Values[i] = ec._OrderAnalytics_paid(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orderSubmitImplementors = []string{"OrderSubmit"}

func (ec *executionContext) _OrderSubmit(ctx context.Context, sel ast.SelectionSet, obj *models.OrderSubmit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, orderSubmitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderSubmit")
		case "coordinatorName":
			out.Values[i] = ec._OrderSubmit_coordinatorName(ctx, field, obj)
		case "month":
			out.Values[i] = ec._OrderSubmit_month(ctx, field, obj)
		case "year":
			out.Values[i] = ec._OrderSubmit_year(ctx, field, obj)
		case "count":
			out.Values[i] = ec._OrderSubmit_count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionGroupImplementors = []string{"PermissionGroup"}

func (ec *executionContext) _PermissionGroup(ctx context.Context, sel ast.SelectionSet, obj *models.PermissionGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, permissionGroupImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PermissionGroup")
		case "id":
			out.Values[i] = ec._PermissionGroup_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._PermissionGroup_name(ctx, field, obj)
		case "permissions":
			out.Values[i] = ec._PermissionGroup_permissions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionGroupResultImplementors = []string{"PermissionGroupResult"}

func (ec *executionContext) _PermissionGroupResult(ctx context.Context, sel ast.SelectionSet, obj *models.PermissionGroupResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, permissionGroupResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PermissionGroupResult")
		case "totalCount":
			out.Values[i] = ec._PermissionGroupResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._PermissionGroupResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineImplementors = []string{"Pipeline"}

func (ec *executionContext) _Pipeline(ctx context.Context, sel ast.SelectionSet, obj *models.Pipeline) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Pipeline")
		case "id":
			out.Values[i] = ec._Pipeline_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "orderNumber":
			out.Values[i] = ec._Pipeline_orderNumber(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Pipeline_address(ctx, field, obj)
		case "country":
			out.Values[i] = ec._Pipeline_country(ctx, field, obj)
		case "county":
			out.Values[i] = ec._Pipeline_county(ctx, field, obj)
		case "location":
			out.Values[i] = ec._Pipeline_location(ctx, field, obj)
		case "zipCode":
			out.Values[i] = ec._Pipeline_zipCode(ctx, field, obj)
		case "company":
			out.Values[i] = ec._Pipeline_company(ctx, field, obj)
		case "companyId":
			out.Values[i] = ec._Pipeline_companyId(ctx, field, obj)
		case "premiumCompany":
			out.Values[i] = ec._Pipeline_premiumCompany(ctx, field, obj)
		case "premiumCompanyId":
			out.Values[i] = ec._Pipeline_premiumCompanyId(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Pipeline_type(ctx, field, obj)
		case "orderType":
			out.Values[i] = ec._Pipeline_orderType(ctx, field, obj)
		case "objective":
			out.Values[i] = ec._Pipeline_objective(ctx, field, obj)
		case "assign":
			out.Values[i] = ec._Pipeline_assign(ctx, field, obj)
		case "assignDateTime":
			out.Values[i] = ec._Pipeline_assignDateTime(ctx, field, obj)
		case "assignId":
			out.Values[i] = ec._Pipeline_assignId(ctx, field, obj)
		case "mls":
			out.Values[i] = ec._Pipeline_mls(ctx, field, obj)
		case "otherCompany":
			out.Values[i] = ec._Pipeline_otherCompany(ctx, field, obj)
		case "isRushOrder":
			out.Values[i] = ec._Pipeline_isRushOrder(ctx, field, obj)
		case "isSuperRush":
			out.Values[i] = ec._Pipeline_isSuperRush(ctx, field, obj)
		case "isInspection":
			out.Values[i] = ec._Pipeline_isInspection(ctx, field, obj)
		case "isInitialBpo":
			out.Values[i] = ec._Pipeline_isInitialBpo(ctx, field, obj)
		case "orderFee":
			out.Values[i] = ec._Pipeline_orderFee(ctx, field, obj)
		case "totalFee":
			out.Values[i] = ec._Pipeline_totalFee(ctx, field, obj)
		case "isSyncedToTurboBpo":
			out.Values[i] = ec._Pipeline_isSyncedToTurboBpo(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._Pipeline_createdDateTime(ctx, field, obj)
		case "lastUpdateTime":
			out.Values[i] = ec._Pipeline_lastUpdateTime(ctx, field, obj)
		case "dueDateTime":
			out.Values[i] = ec._Pipeline_dueDateTime(ctx, field, obj)
		case "holdDateTime":
			out.Values[i] = ec._Pipeline_holdDateTime(ctx, field, obj)
		case "ratingOverAll":
			out.Values[i] = ec._Pipeline_ratingOverAll(ctx, field, obj)
		case "ratingTimeliness":
			out.Values[i] = ec._Pipeline_ratingTimeliness(ctx, field, obj)
		case "ratingQuality":
			out.Values[i] = ec._Pipeline_ratingQuality(ctx, field, obj)
		case "ratingFeedback":
			out.Values[i] = ec._Pipeline_ratingFeedback(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Pipeline_status(ctx, field, obj)
		case "pipelineQualityControlTotal":
			out.Values[i] = ec._Pipeline_pipelineQualityControlTotal(ctx, field, obj)
		case "pipelinePhotoTotal":
			out.Values[i] = ec._Pipeline_pipelinePhotoTotal(ctx, field, obj)
		case "pipelineDocTotal":
			out.Values[i] = ec._Pipeline_pipelineDocTotal(ctx, field, obj)
		case "pipelineNoteTotal":
			out.Values[i] = ec._Pipeline_pipelineNoteTotal(ctx, field, obj)
		case "authorId":
			out.Values[i] = ec._Pipeline_authorId(ctx, field, obj)
		case "authorName":
			out.Values[i] = ec._Pipeline_authorName(ctx, field, obj)
		case "isProcessIform":
			out.Values[i] = ec._Pipeline_isProcessIform(ctx, field, obj)
		case "processIformModifiedDate":
			out.Values[i] = ec._Pipeline_processIformModifiedDate(ctx, field, obj)
		case "isProcessIfill":
			out.Values[i] = ec._Pipeline_isProcessIfill(ctx, field, obj)
		case "ifillProcessModifiedDate":
			out.Values[i] = ec._Pipeline_ifillProcessModifiedDate(ctx, field, obj)
		case "isProcessReview":
			out.Values[i] = ec._Pipeline_isProcessReview(ctx, field, obj)
		case "processReviewModifiedDate":
			out.Values[i] = ec._Pipeline_processReviewModifiedDate(ctx, field, obj)
		case "pipelineHistory":
			out.Values[i] = ec._Pipeline_pipelineHistory(ctx, field, obj)
		case "assignedHistory":
			out.Values[i] = ec._Pipeline_assignedHistory(ctx, field, obj)
		case "isHold":
			out.Values[i] = ec._Pipeline_isHold(ctx, field, obj)
		case "holdRemarks":
			out.Values[i] = ec._Pipeline_holdRemarks(ctx, field, obj)
		case "unHoldRemarks":
			out.Values[i] = ec._Pipeline_unHoldRemarks(ctx, field, obj)
		case "cancelRemarks":
			out.Values[i] = ec._Pipeline_cancelRemarks(ctx, field, obj)
		case "pauseDateTime":
			out.Values[i] = ec._Pipeline_pauseDateTime(ctx, field, obj)
		case "isBilled":
			out.Values[i] = ec._Pipeline_isBilled(ctx, field, obj)
		case "isQc":
			out.Values[i] = ec._Pipeline_isQc(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineAssignedHistoryImplementors = []string{"PipelineAssignedHistory"}

func (ec *executionContext) _PipelineAssignedHistory(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineAssignedHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineAssignedHistoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineAssignedHistory")
		case "logDateTime":
			out.Values[i] = ec._PipelineAssignedHistory_logDateTime(ctx, field, obj)
		case "action":
			out.Values[i] = ec._PipelineAssignedHistory_action(ctx, field, obj)
		case "assignee":
			out.Values[i] = ec._PipelineAssignedHistory_assignee(ctx, field, obj)
		case "assigneeID":
			out.Values[i] = ec._PipelineAssignedHistory_assigneeID(ctx, field, obj)
		case "assignedBy":
			out.Values[i] = ec._PipelineAssignedHistory_assignedBy(ctx, field, obj)
		case "assignedByID":
			out.Values[i] = ec._PipelineAssignedHistory_assignedByID(ctx, field, obj)
		case "modifiedBy":
			out.Values[i] = ec._PipelineAssignedHistory_modifiedBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineComparableImplementors = []string{"PipelineComparable"}

func (ec *executionContext) _PipelineComparable(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineComparable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineComparableImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineComparable")
		case "id":
			out.Values[i] = ec._PipelineComparable_id(ctx, field, obj)
		case "pipelineId":
			out.Values[i] = ec._PipelineComparable_pipelineId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mls":
			out.Values[i] = ec._PipelineComparable_mls(ctx, field, obj)
		case "status":
			out.Values[i] = ec._PipelineComparable_status(ctx, field, obj)
		case "order":
			out.Values[i] = ec._PipelineComparable_order(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineComparableResultImplementors = []string{"PipelineComparableResult"}

func (ec *executionContext) _PipelineComparableResult(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineComparableResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineComparableResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineComparableResult")
		case "totalCount":
			out.Values[i] = ec._PipelineComparableResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._PipelineComparableResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineDocImplementors = []string{"PipelineDoc"}

func (ec *executionContext) _PipelineDoc(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineDoc) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineDocImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineDoc")
		case "id":
			out.Values[i] = ec._PipelineDoc_id(ctx, field, obj)
		case "fileName":
			out.Values[i] = ec._PipelineDoc_fileName(ctx, field, obj)
		case "url":
			out.Values[i] = ec._PipelineDoc_url(ctx, field, obj)
		case "type":
			out.Values[i] = ec._PipelineDoc_type(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._PipelineDoc_createdBy(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._PipelineDoc_createdDateTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineDocResultImplementors = []string{"PipelineDocResult"}

func (ec *executionContext) _PipelineDocResult(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineDocResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineDocResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineDocResult")
		case "totalCount":
			out.Values[i] = ec._PipelineDocResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._PipelineDocResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineHistoryImplementors = []string{"PipelineHistory"}

func (ec *executionContext) _PipelineHistory(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineHistoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineHistory")
		case "logDateTime":
			out.Values[i] = ec._PipelineHistory_logDateTime(ctx, field, obj)
		case "action":
			out.Values[i] = ec._PipelineHistory_action(ctx, field, obj)
		case "value":
			out.Values[i] = ec._PipelineHistory_value(ctx, field, obj)
		case "modifiedBy":
			out.Values[i] = ec._PipelineHistory_modifiedBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineNeighborhoodImplementors = []string{"PipelineNeighborhood"}

func (ec *executionContext) _PipelineNeighborhood(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineNeighborhood) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineNeighborhoodImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineNeighborhood")
		case "id":
			out.Values[i] = ec._PipelineNeighborhood_id(ctx, field, obj)
		case "isReoDriven":
			out.Values[i] = ec._PipelineNeighborhood_isReoDriven(ctx, field, obj)
		case "marketTrend":
			out.Values[i] = ec._PipelineNeighborhood_marketTrend(ctx, field, obj)
		case "monthlyPercentage":
			out.Values[i] = ec._PipelineNeighborhood_monthlyPercentage(ctx, field, obj)
		case "sixmonthPercentage":
			out.Values[i] = ec._PipelineNeighborhood_sixmonthPercentage(ctx, field, obj)
		case "annualPercentage":
			out.Values[i] = ec._PipelineNeighborhood_annualPercentage(ctx, field, obj)
		case "totalListings":
			out.Values[i] = ec._PipelineNeighborhood_totalListings(ctx, field, obj)
		case "supply":
			out.Values[i] = ec._PipelineNeighborhood_supply(ctx, field, obj)
		case "listingsMinValue":
			out.Values[i] = ec._PipelineNeighborhood_listingsMinValue(ctx, field, obj)
		case "listingsMedValue":
			out.Values[i] = ec._PipelineNeighborhood_listingsMedValue(ctx, field, obj)
		case "listingsMaxValue":
			out.Values[i] = ec._PipelineNeighborhood_listingsMaxValue(ctx, field, obj)
		case "listingsDomAve":
			out.Values[i] = ec._PipelineNeighborhood_listingsDomAve(ctx, field, obj)
		case "listingsDomRangeFrom":
			out.Values[i] = ec._PipelineNeighborhood_listingsDomRangeFrom(ctx, field, obj)
		case "listingsDomRangeTo":
			out.Values[i] = ec._PipelineNeighborhood_listingsDomRangeTo(ctx, field, obj)
		case "fm":
			out.Values[i] = ec._PipelineNeighborhood_fm(ctx, field, obj)
		case "ss":
			out.Values[i] = ec._PipelineNeighborhood_ss(ctx, field, obj)
		case "reo":
			out.Values[i] = ec._PipelineNeighborhood_reo(ctx, field, obj)
		case "distressed":
			out.Values[i] = ec._PipelineNeighborhood_distressed(ctx, field, obj)
		case "totalSales":
			out.Values[i] = ec._PipelineNeighborhood_totalSales(ctx, field, obj)
		case "demand":
			out.Values[i] = ec._PipelineNeighborhood_demand(ctx, field, obj)
		case "salesMinValue":
			out.Values[i] = ec._PipelineNeighborhood_salesMinValue(ctx, field, obj)
		case "salesMedValue":
			out.Values[i] = ec._PipelineNeighborhood_salesMedValue(ctx, field, obj)
		case "salesMaxValue":
			out.Values[i] = ec._PipelineNeighborhood_salesMaxValue(ctx, field, obj)
		case "salesDomRangeFrom":
			out.Values[i] = ec._PipelineNeighborhood_salesDomRangeFrom(ctx, field, obj)
		case "salesDomRangeTo":
			out.Values[i] = ec._PipelineNeighborhood_salesDomRangeTo(ctx, field, obj)
		case "zntComments":
			out.Values[i] = ec._PipelineNeighborhood_zntComments(ctx, field, obj)
		case "ntComments":
			out.Values[i] = ec._PipelineNeighborhood_ntComments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineNoteImplementors = []string{"PipelineNote"}

func (ec *executionContext) _PipelineNote(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineNote) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineNoteImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineNote")
		case "id":
			out.Values[i] = ec._PipelineNote_id(ctx, field, obj)
		case "orderNotes":
			out.Values[i] = ec._PipelineNote_orderNotes(ctx, field, obj)
		case "inspectionNotes":
			out.Values[i] = ec._PipelineNote_inspectionNotes(ctx, field, obj)
		case "exteriorRepairDescription1":
			out.Values[i] = ec._PipelineNote_exteriorRepairDescription1(ctx, field, obj)
		case "exteriorRepairPrice1":
			out.Values[i] = ec._PipelineNote_exteriorRepairPrice1(ctx, field, obj)
		case "exteriorRepairDescription2":
			out.Values[i] = ec._PipelineNote_exteriorRepairDescription2(ctx, field, obj)
		case "exteriorRepairPrice2":
			out.Values[i] = ec._PipelineNote_exteriorRepairPrice2(ctx, field, obj)
		case "exteriorRepairDescription3":
			out.Values[i] = ec._PipelineNote_exteriorRepairDescription3(ctx, field, obj)
		case "exteriorRepairPrice3":
			out.Values[i] = ec._PipelineNote_exteriorRepairPrice3(ctx, field, obj)
		case "exteriorRepairDescription4":
			out.Values[i] = ec._PipelineNote_exteriorRepairDescription4(ctx, field, obj)
		case "exteriorRepairPrice4":
			out.Values[i] = ec._PipelineNote_exteriorRepairPrice4(ctx, field, obj)
		case "exteriorRepairDescription5":
			out.Values[i] = ec._PipelineNote_exteriorRepairDescription5(ctx, field, obj)
		case "exteriorRepairPrice5":
			out.Values[i] = ec._PipelineNote_exteriorRepairPrice5(ctx, field, obj)
		case "exteriorRepairDescription6":
			out.Values[i] = ec._PipelineNote_exteriorRepairDescription6(ctx, field, obj)
		case "exteriorRepairPrice6":
			out.Values[i] = ec._PipelineNote_exteriorRepairPrice6(ctx, field, obj)
		case "exteriorRepairDescription7":
			out.Values[i] = ec._PipelineNote_exteriorRepairDescription7(ctx, field, obj)
		case "exteriorRepairPrice7":
			out.Values[i] = ec._PipelineNote_exteriorRepairPrice7(ctx, field, obj)
		case "exteriorRepairDescription8":
			out.Values[i] = ec._PipelineNote_exteriorRepairDescription8(ctx, field, obj)
		case "exteriorRepairPrice8":
			out.Values[i] = ec._PipelineNote_exteriorRepairPrice8(ctx, field, obj)
		case "exteriorRepairDescription9":
			out.Values[i] = ec._PipelineNote_exteriorRepairDescription9(ctx, field, obj)
		case "exteriorRepairPrice9":
			out.Values[i] = ec._PipelineNote_exteriorRepairPrice9(ctx, field, obj)
		case "exteriorRepairDescription10":
			out.Values[i] = ec._PipelineNote_exteriorRepairDescription10(ctx, field, obj)
		case "exteriorRepairPrice10":
			out.Values[i] = ec._PipelineNote_exteriorRepairPrice10(ctx, field, obj)
		case "exteriorRepairPriceTotal":
			out.Values[i] = ec._PipelineNote_exteriorRepairPriceTotal(ctx, field, obj)
		case "interiorRepairDescription1":
			out.Values[i] = ec._PipelineNote_interiorRepairDescription1(ctx, field, obj)
		case "interiorRepairPrice1":
			out.Values[i] = ec._PipelineNote_interiorRepairPrice1(ctx, field, obj)
		case "interiorRepairDescription2":
			out.Values[i] = ec._PipelineNote_interiorRepairDescription2(ctx, field, obj)
		case "interiorRepairPrice2":
			out.Values[i] = ec._PipelineNote_interiorRepairPrice2(ctx, field, obj)
		case "interiorRepairDescription3":
			out.Values[i] = ec._PipelineNote_interiorRepairDescription3(ctx, field, obj)
		case "interiorRepairPrice3":
			out.Values[i] = ec._PipelineNote_interiorRepairPrice3(ctx, field, obj)
		case "interiorRepairDescription4":
			out.Values[i] = ec._PipelineNote_interiorRepairDescription4(ctx, field, obj)
		case "interiorRepairPrice4":
			out.Values[i] = ec._PipelineNote_interiorRepairPrice4(ctx, field, obj)
		case "interiorRepairDescription5":
			out.Values[i] = ec._PipelineNote_interiorRepairDescription5(ctx, field, obj)
		case "interiorRepairPrice5":
			out.Values[i] = ec._PipelineNote_interiorRepairPrice5(ctx, field, obj)
		case "interiorRepairDescription6":
			out.Values[i] = ec._PipelineNote_interiorRepairDescription6(ctx, field, obj)
		case "interiorRepairPrice6":
			out.Values[i] = ec._PipelineNote_interiorRepairPrice6(ctx, field, obj)
		case "interiorRepairDescription7":
			out.Values[i] = ec._PipelineNote_interiorRepairDescription7(ctx, field, obj)
		case "interiorRepairPrice7":
			out.Values[i] = ec._PipelineNote_interiorRepairPrice7(ctx, field, obj)
		case "interiorRepairDescription8":
			out.Values[i] = ec._PipelineNote_interiorRepairDescription8(ctx, field, obj)
		case "interiorRepairPrice8":
			out.Values[i] = ec._PipelineNote_interiorRepairPrice8(ctx, field, obj)
		case "interiorRepairDescription9":
			out.Values[i] = ec._PipelineNote_interiorRepairDescription9(ctx, field, obj)
		case "interiorRepairPrice9":
			out.Values[i] = ec._PipelineNote_interiorRepairPrice9(ctx, field, obj)
		case "interiorRepairDescription10":
			out.Values[i] = ec._PipelineNote_interiorRepairDescription10(ctx, field, obj)
		case "interiorRepairPrice10":
			out.Values[i] = ec._PipelineNote_interiorRepairPrice10(ctx, field, obj)
		case "interiorRepairPriceTotal":
			out.Values[i] = ec._PipelineNote_interiorRepairPriceTotal(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._PipelineNote_createdBy(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._PipelineNote_createdDateTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineNoteResultImplementors = []string{"PipelineNoteResult"}

func (ec *executionContext) _PipelineNoteResult(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineNoteResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineNoteResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineNoteResult")
		case "totalCount":
			out.Values[i] = ec._PipelineNoteResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._PipelineNoteResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelinePhotoImplementors = []string{"PipelinePhoto"}

func (ec *executionContext) _PipelinePhoto(ctx context.Context, sel ast.SelectionSet, obj *models.PipelinePhoto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelinePhotoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelinePhoto")
		case "id":
			out.Values[i] = ec._PipelinePhoto_id(ctx, field, obj)
		case "fileName":
			out.Values[i] = ec._PipelinePhoto_fileName(ctx, field, obj)
		case "fileSize":
			out.Values[i] = ec._PipelinePhoto_fileSize(ctx, field, obj)
		case "url":
			out.Values[i] = ec._PipelinePhoto_url(ctx, field, obj)
		case "isSubmitted":
			out.Values[i] = ec._PipelinePhoto_isSubmitted(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._PipelinePhoto_createdBy(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._PipelinePhoto_createdDateTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelinePhotoResultImplementors = []string{"PipelinePhotoResult"}

func (ec *executionContext) _PipelinePhotoResult(ctx context.Context, sel ast.SelectionSet, obj *models.PipelinePhotoResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelinePhotoResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelinePhotoResult")
		case "totalCount":
			out.Values[i] = ec._PipelinePhotoResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._PipelinePhotoResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineQualityControlImplementors = []string{"PipelineQualityControl"}

func (ec *executionContext) _PipelineQualityControl(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineQualityControl) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineQualityControlImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineQualityControl")
		case "orderNotes":
			out.Values[i] = ec._PipelineQualityControl_orderNotes(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._PipelineQualityControl_createdBy(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._PipelineQualityControl_createdDateTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineQualityControlAndNoteImplementors = []string{"PipelineQualityControlAndNote"}

func (ec *executionContext) _PipelineQualityControlAndNote(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineQualityControlAndNote) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineQualityControlAndNoteImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineQualityControlAndNote")
		case "message":
			out.Values[i] = ec._PipelineQualityControlAndNote_message(ctx, field, obj)
		case "date":
			out.Values[i] = ec._PipelineQualityControlAndNote_date(ctx, field, obj)
		case "category":
			out.Values[i] = ec._PipelineQualityControlAndNote_category(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._PipelineQualityControlAndNote_createdBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineQualityControlAndNoteResultImplementors = []string{"PipelineQualityControlAndNoteResult"}

func (ec *executionContext) _PipelineQualityControlAndNoteResult(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineQualityControlAndNoteResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineQualityControlAndNoteResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineQualityControlAndNoteResult")
		case "totalCount":
			out.Values[i] = ec._PipelineQualityControlAndNoteResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._PipelineQualityControlAndNoteResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineQualityControlResultImplementors = []string{"PipelineQualityControlResult"}

func (ec *executionContext) _PipelineQualityControlResult(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineQualityControlResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineQualityControlResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineQualityControlResult")
		case "totalCount":
			out.Values[i] = ec._PipelineQualityControlResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._PipelineQualityControlResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineRepairImplementors = []string{"PipelineRepair"}

func (ec *executionContext) _PipelineRepair(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineRepair) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineRepairImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineRepair")
		case "exteriorRepairDescription1":
			out.Values[i] = ec._PipelineRepair_exteriorRepairDescription1(ctx, field, obj)
		case "exteriorRepairPrice1":
			out.Values[i] = ec._PipelineRepair_exteriorRepairPrice1(ctx, field, obj)
		case "exteriorRepairDescription2":
			out.Values[i] = ec._PipelineRepair_exteriorRepairDescription2(ctx, field, obj)
		case "exteriorRepairPrice2":
			out.Values[i] = ec._PipelineRepair_exteriorRepairPrice2(ctx, field, obj)
		case "exteriorRepairDescription3":
			out.Values[i] = ec._PipelineRepair_exteriorRepairDescription3(ctx, field, obj)
		case "exteriorRepairPrice3":
			out.Values[i] = ec._PipelineRepair_exteriorRepairPrice3(ctx, field, obj)
		case "exteriorRepairDescription4":
			out.Values[i] = ec._PipelineRepair_exteriorRepairDescription4(ctx, field, obj)
		case "exteriorRepairPrice4":
			out.Values[i] = ec._PipelineRepair_exteriorRepairPrice4(ctx, field, obj)
		case "exteriorRepairDescription5":
			out.Values[i] = ec._PipelineRepair_exteriorRepairDescription5(ctx, field, obj)
		case "exteriorRepairPrice5":
			out.Values[i] = ec._PipelineRepair_exteriorRepairPrice5(ctx, field, obj)
		case "exteriorRepairDescription6":
			out.Values[i] = ec._PipelineRepair_exteriorRepairDescription6(ctx, field, obj)
		case "exteriorRepairPrice6":
			out.Values[i] = ec._PipelineRepair_exteriorRepairPrice6(ctx, field, obj)
		case "exteriorRepairDescription7":
			out.Values[i] = ec._PipelineRepair_exteriorRepairDescription7(ctx, field, obj)
		case "exteriorRepairPrice7":
			out.Values[i] = ec._PipelineRepair_exteriorRepairPrice7(ctx, field, obj)
		case "exteriorRepairDescription8":
			out.Values[i] = ec._PipelineRepair_exteriorRepairDescription8(ctx, field, obj)
		case "exteriorRepairPrice8":
			out.Values[i] = ec._PipelineRepair_exteriorRepairPrice8(ctx, field, obj)
		case "exteriorRepairDescription9":
			out.Values[i] = ec._PipelineRepair_exteriorRepairDescription9(ctx, field, obj)
		case "exteriorRepairPrice9":
			out.Values[i] = ec._PipelineRepair_exteriorRepairPrice9(ctx, field, obj)
		case "exteriorRepairDescription10":
			out.Values[i] = ec._PipelineRepair_exteriorRepairDescription10(ctx, field, obj)
		case "exteriorRepairPrice10":
			out.Values[i] = ec._PipelineRepair_exteriorRepairPrice10(ctx, field, obj)
		case "exteriorRepairPriceTotal":
			out.Values[i] = ec._PipelineRepair_exteriorRepairPriceTotal(ctx, field, obj)
		case "interiorRepairDescription1":
			out.Values[i] = ec._PipelineRepair_interiorRepairDescription1(ctx, field, obj)
		case "interiorRepairPrice1":
			out.Values[i] = ec._PipelineRepair_interiorRepairPrice1(ctx, field, obj)
		case "interiorRepairDescription2":
			out.Values[i] = ec._PipelineRepair_interiorRepairDescription2(ctx, field, obj)
		case "interiorRepairPrice2":
			out.Values[i] = ec._PipelineRepair_interiorRepairPrice2(ctx, field, obj)
		case "interiorRepairDescription3":
			out.Values[i] = ec._PipelineRepair_interiorRepairDescription3(ctx, field, obj)
		case "interiorRepairPrice3":
			out.Values[i] = ec._PipelineRepair_interiorRepairPrice3(ctx, field, obj)
		case "interiorRepairDescription4":
			out.Values[i] = ec._PipelineRepair_interiorRepairDescription4(ctx, field, obj)
		case "interiorRepairPrice4":
			out.Values[i] = ec._PipelineRepair_interiorRepairPrice4(ctx, field, obj)
		case "interiorRepairDescription5":
			out.Values[i] = ec._PipelineRepair_interiorRepairDescription5(ctx, field, obj)
		case "interiorRepairPrice5":
			out.Values[i] = ec._PipelineRepair_interiorRepairPrice5(ctx, field, obj)
		case "interiorRepairDescription6":
			out.Values[i] = ec._PipelineRepair_interiorRepairDescription6(ctx, field, obj)
		case "interiorRepairPrice6":
			out.Values[i] = ec._PipelineRepair_interiorRepairPrice6(ctx, field, obj)
		case "interiorRepairDescription7":
			out.Values[i] = ec._PipelineRepair_interiorRepairDescription7(ctx, field, obj)
		case "interiorRepairPrice7":
			out.Values[i] = ec._PipelineRepair_interiorRepairPrice7(ctx, field, obj)
		case "interiorRepairDescription8":
			out.Values[i] = ec._PipelineRepair_interiorRepairDescription8(ctx, field, obj)
		case "interiorRepairPrice8":
			out.Values[i] = ec._PipelineRepair_interiorRepairPrice8(ctx, field, obj)
		case "interiorRepairDescription9":
			out.Values[i] = ec._PipelineRepair_interiorRepairDescription9(ctx, field, obj)
		case "interiorRepairPrice9":
			out.Values[i] = ec._PipelineRepair_interiorRepairPrice9(ctx, field, obj)
		case "interiorRepairDescription10":
			out.Values[i] = ec._PipelineRepair_interiorRepairDescription10(ctx, field, obj)
		case "interiorRepairPrice10":
			out.Values[i] = ec._PipelineRepair_interiorRepairPrice10(ctx, field, obj)
		case "interiorRepairPriceTotal":
			out.Values[i] = ec._PipelineRepair_interiorRepairPriceTotal(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineResultImplementors = []string{"PipelineResult"}

func (ec *executionContext) _PipelineResult(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineResult")
		case "totalCount":
			out.Values[i] = ec._PipelineResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._PipelineResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pipelineStateImplementors = []string{"PipelineState"}

func (ec *executionContext) _PipelineState(ctx context.Context, sel ast.SelectionSet, obj *models.PipelineState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, pipelineStateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PipelineState")
		case "maxDailyVolume":
			out.Values[i] = ec._PipelineState_maxDailyVolume(ctx, field, obj)
		case "standByAutoComplete":
			out.Values[i] = ec._PipelineState_standByAutoComplete(ctx, field, obj)
		case "isRush":
			out.Values[i] = ec._PipelineState_isRush(ctx, field, obj)
		case "isNewOrder":
			out.Values[i] = ec._PipelineState_isNewOrder(ctx, field, obj)
		case "orderMessage":
			out.Values[i] = ec._PipelineState_orderMessage(ctx, field, obj)
		case "tTSlow":
			out.Values[i] = ec._PipelineState_tTSlow(ctx, field, obj)
		case "tTModerate":
			out.Values[i] = ec._PipelineState_tTModerate(ctx, field, obj)
		case "tTBusy":
			out.Values[i] = ec._PipelineState_tTBusy(ctx, field, obj)
		case "tTMax":
			out.Values[i] = ec._PipelineState_tTMax(ctx, field, obj)
		case "tLSlow":
			out.Values[i] = ec._PipelineState_tLSlow(ctx, field, obj)
		case "tLModerate":
			out.Values[i] = ec._PipelineState_tLModerate(ctx, field, obj)
		case "tLBusy":
			out.Values[i] = ec._PipelineState_tLBusy(ctx, field, obj)
		case "oPInterior":
			out.Values[i] = ec._PipelineState_oPInterior(ctx, field, obj)
		case "oPExterior":
			out.Values[i] = ec._PipelineState_oPExterior(ctx, field, obj)
		case "oPDataEntry":
			out.Values[i] = ec._PipelineState_oPDataEntry(ctx, field, obj)
		case "oPRush":
			out.Values[i] = ec._PipelineState_oPRush(ctx, field, obj)
		case "oPSuperRush":
			out.Values[i] = ec._PipelineState_oPSuperRush(ctx, field, obj)
		case "oPConditionReport":
			out.Values[i] = ec._PipelineState_oPConditionReport(ctx, field, obj)
		case "oPRentalAddendum":
			out.Values[i] = ec._PipelineState_oPRentalAddendum(ctx, field, obj)
		case "oPInitialBPO":
			out.Values[i] = ec._PipelineState_oPInitialBPO(ctx, field, obj)
		case "oPInspection":
			out.Values[i] = ec._PipelineState_oPInspection(ctx, field, obj)
		case "pCIsAcceptOrder":
			out.Values[i] = ec._PipelineState_pCIsAcceptOrder(ctx, field, obj)
		case "pCcatchTime":
			out.Values[i] = ec._PipelineState_pCcatchTime(ctx, field, obj)
		case "oAOfferLimitInMin":
			out.Values[i] = ec._PipelineState_oAOfferLimitInMin(ctx, field, obj)
		case "oAIsAutoAssign":
			out.Values[i] = ec._PipelineState_oAIsAutoAssign(ctx, field, obj)
		case "qCElapseTime":
			out.Values[i] = ec._PipelineState_qCElapseTime(ctx, field, obj)
		case "todayOrderCount":
			out.Values[i] = ec._PipelineState_todayOrderCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var priceModuleImplementors = []string{"PriceModule"}

func (ec *executionContext) _PriceModule(ctx context.Context, sel ast.SelectionSet, obj *models.PriceModule) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, priceModuleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PriceModule")
		case "credits":
			out.Values[i] = ec._PriceModule_credits(ctx, field, obj)
		case "orderinterior":
			out.Values[i] = ec._PriceModule_orderinterior(ctx, field, obj)
		case "orderexterior":
			out.Values[i] = ec._PriceModule_orderexterior(ctx, field, obj)
		case "orderdataEntry":
			out.Values[i] = ec._PriceModule_orderdataEntry(ctx, field, obj)
		case "orderrush":
			out.Values[i] = ec._PriceModule_orderrush(ctx, field, obj)
		case "ordersuperRush":
			out.Values[i] = ec._PriceModule_ordersuperRush(ctx, field, obj)
		case "orderconditionReport":
			out.Values[i] = ec._PriceModule_orderconditionReport(ctx, field, obj)
		case "orderrentalAddendum":
			out.Values[i] = ec._PriceModule_orderrentalAddendum(ctx, field, obj)
		case "photoExterior":
			out.Values[i] = ec._PriceModule_photoExterior(ctx, field, obj)
		case "photoInteriorVacantLB":
			out.Values[i] = ec._PriceModule_photoInteriorVacantLB(ctx, field, obj)
		case "photoInteriorAppointment":
			out.Values[i] = ec._PriceModule_photoInteriorAppointment(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var profileDocResultImplementors = []string{"ProfileDocResult"}

func (ec *executionContext) _ProfileDocResult(ctx context.Context, sel ast.SelectionSet, obj *models.ProfileDocResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, profileDocResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProfileDocResult")
		case "totalCount":
			out.Values[i] = ec._ProfileDocResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._ProfileDocResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var qcCompletedImplementors = []string{"QcCompleted"}

func (ec *executionContext) _QcCompleted(ctx context.Context, sel ast.SelectionSet, obj *models.QcCompleted) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, qcCompletedImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QcCompleted")
		case "qualityControlName":
			out.Values[i] = ec._QcCompleted_qualityControlName(ctx, field, obj)
		case "month":
			out.Values[i] = ec._QcCompleted_month(ctx, field, obj)
		case "year":
			out.Values[i] = ec._QcCompleted_year(ctx, field, obj)
		case "normal":
			out.Values[i] = ec._QcCompleted_normal(ctx, field, obj)
		case "fullRec":
			out.Values[i] = ec._QcCompleted_fullRec(ctx, field, obj)
		case "dd":
			out.Values[i] = ec._QcCompleted_dd(ctx, field, obj)
		case "total":
			out.Values[i] = ec._QcCompleted_total(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var qcHistoryImplementors = []string{"QcHistory"}

func (ec *executionContext) _QcHistory(ctx context.Context, sel ast.SelectionSet, obj *models.QcHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, qcHistoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QcHistory")
		case "id":
			out.Values[i] = ec._QcHistory_id(ctx, field, obj)
		case "pipelineId":
			out.Values[i] = ec._QcHistory_pipelineId(ctx, field, obj)
		case "orderNumber":
			out.Values[i] = ec._QcHistory_orderNumber(ctx, field, obj)
		case "address":
			out.Values[i] = ec._QcHistory_address(ctx, field, obj)
		case "country":
			out.Values[i] = ec._QcHistory_country(ctx, field, obj)
		case "location":
			out.Values[i] = ec._QcHistory_location(ctx, field, obj)
		case "company":
			out.Values[i] = ec._QcHistory_company(ctx, field, obj)
		case "type":
			out.Values[i] = ec._QcHistory_type(ctx, field, obj)
		case "orderType":
			out.Values[i] = ec._QcHistory_orderType(ctx, field, obj)
		case "objective":
			out.Values[i] = ec._QcHistory_objective(ctx, field, obj)
		case "assign":
			out.Values[i] = ec._QcHistory_assign(ctx, field, obj)
		case "assignId":
			out.Values[i] = ec._QcHistory_assignId(ctx, field, obj)
		case "mls":
			out.Values[i] = ec._QcHistory_mls(ctx, field, obj)
		case "isRushOrder":
			out.Values[i] = ec._QcHistory_isRushOrder(ctx, field, obj)
		case "isSuperRush":
			out.Values[i] = ec._QcHistory_isSuperRush(ctx, field, obj)
		case "isInspection":
			out.Values[i] = ec._QcHistory_isInspection(ctx, field, obj)
		case "isInitialBpo":
			out.Values[i] = ec._QcHistory_isInitialBpo(ctx, field, obj)
		case "orderFee":
			out.Values[i] = ec._QcHistory_orderFee(ctx, field, obj)
		case "totalFee":
			out.Values[i] = ec._QcHistory_totalFee(ctx, field, obj)
		case "isSyncedToTurboBpo":
			out.Values[i] = ec._QcHistory_isSyncedToTurboBpo(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._QcHistory_createdDateTime(ctx, field, obj)
		case "lastUpdateTime":
			out.Values[i] = ec._QcHistory_lastUpdateTime(ctx, field, obj)
		case "ratingOverAll":
			out.Values[i] = ec._QcHistory_ratingOverAll(ctx, field, obj)
		case "ratingTimeliness":
			out.Values[i] = ec._QcHistory_ratingTimeliness(ctx, field, obj)
		case "ratingQuality":
			out.Values[i] = ec._QcHistory_ratingQuality(ctx, field, obj)
		case "ratingFeedback":
			out.Values[i] = ec._QcHistory_ratingFeedback(ctx, field, obj)
		case "status":
			out.Values[i] = ec._QcHistory_status(ctx, field, obj)
		case "pipelineQualityControlTotal":
			out.Values[i] = ec._QcHistory_pipelineQualityControlTotal(ctx, field, obj)
		case "pipelinePhotoTotal":
			out.Values[i] = ec._QcHistory_pipelinePhotoTotal(ctx, field, obj)
		case "pipelineDocTotal":
			out.Values[i] = ec._QcHistory_pipelineDocTotal(ctx, field, obj)
		case "pipelineNoteTotal":
			out.Values[i] = ec._QcHistory_pipelineNoteTotal(ctx, field, obj)
		case "authorId":
			out.Values[i] = ec._QcHistory_authorId(ctx, field, obj)
		case "authorName":
			out.Values[i] = ec._QcHistory_authorName(ctx, field, obj)
		case "isProcessIform":
			out.Values[i] = ec._QcHistory_isProcessIform(ctx, field, obj)
		case "processIformModifiedDate":
			out.Values[i] = ec._QcHistory_processIformModifiedDate(ctx, field, obj)
		case "isProcessIfill":
			out.Values[i] = ec._QcHistory_isProcessIfill(ctx, field, obj)
		case "ifillProcessModifiedDate":
			out.Values[i] = ec._QcHistory_ifillProcessModifiedDate(ctx, field, obj)
		case "isProcessReview":
			out.Values[i] = ec._QcHistory_isProcessReview(ctx, field, obj)
		case "processReviewModifiedDate":
			out.Values[i] = ec._QcHistory_processReviewModifiedDate(ctx, field, obj)
		case "qcHistory":
			out.Values[i] = ec._QcHistory_qcHistory(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var qcHistoryResultImplementors = []string{"QcHistoryResult"}

func (ec *executionContext) _QcHistoryResult(ctx context.Context, sel ast.SelectionSet, obj *models.QcHistoryResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, qcHistoryResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QcHistoryResult")
		case "totalCount":
			out.Values[i] = ec._QcHistoryResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._QcHistoryResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var qcRatingImplementors = []string{"QcRating"}

func (ec *executionContext) _QcRating(ctx context.Context, sel ast.SelectionSet, obj *models.QcRating) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, qcRatingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QcRating")
		case "contractorName":
			out.Values[i] = ec._QcRating_contractorName(ctx, field, obj)
		case "month":
			out.Values[i] = ec._QcRating_month(ctx, field, obj)
		case "year":
			out.Values[i] = ec._QcRating_year(ctx, field, obj)
		case "noOfOders":
			out.Values[i] = ec._QcRating_noOfOders(ctx, field, obj)
		case "noOfQcL":
			out.Values[i] = ec._QcRating_noOfQcL(ctx, field, obj)
		case "percentOfQc":
			out.Values[i] = ec._QcRating_percentOfQc(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var qcRequestImplementors = []string{"QcRequest"}

func (ec *executionContext) _QcRequest(ctx context.Context, sel ast.SelectionSet, obj *models.QcRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, qcRequestImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QcRequest")
		case "id":
			out.Values[i] = ec._QcRequest_id(ctx, field, obj)
		case "qcId":
			out.Values[i] = ec._QcRequest_qcId(ctx, field, obj)
		case "pipelineId":
			out.Values[i] = ec._QcRequest_pipelineId(ctx, field, obj)
		case "orderNumber":
			out.Values[i] = ec._QcRequest_orderNumber(ctx, field, obj)
		case "address":
			out.Values[i] = ec._QcRequest_address(ctx, field, obj)
		case "company":
			out.Values[i] = ec._QcRequest_company(ctx, field, obj)
		case "type":
			out.Values[i] = ec._QcRequest_type(ctx, field, obj)
		case "qcTotal":
			out.Values[i] = ec._QcRequest_qcTotal(ctx, field, obj)
		case "notesTotal":
			out.Values[i] = ec._QcRequest_notesTotal(ctx, field, obj)
		case "orderAssignee":
			out.Values[i] = ec._QcRequest_orderAssignee(ctx, field, obj)
		case "orderAssigneeId":
			out.Values[i] = ec._QcRequest_orderAssigneeId(ctx, field, obj)
		case "qcAssignee":
			out.Values[i] = ec._QcRequest_qcAssignee(ctx, field, obj)
		case "status":
			out.Values[i] = ec._QcRequest_status(ctx, field, obj)
		case "requestDate":
			out.Values[i] = ec._QcRequest_requestDate(ctx, field, obj)
		case "requestType":
			out.Values[i] = ec._QcRequest_requestType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var qcRequestResultImplementors = []string{"QcRequestResult"}

func (ec *executionContext) _QcRequestResult(ctx context.Context, sel ast.SelectionSet, obj *models.QcRequestResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, qcRequestResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QcRequestResult")
		case "totalCount":
			out.Values[i] = ec._QcRequestResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._QcRequestResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var qualityControlImplementors = []string{"QualityControl"}

func (ec *executionContext) _QualityControl(ctx context.Context, sel ast.SelectionSet, obj *models.QualityControl) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, qualityControlImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QualityControl")
		case "id":
			out.Values[i] = ec._QualityControl_id(ctx, field, obj)
		case "pipelineId":
			out.Values[i] = ec._QualityControl_pipelineId(ctx, field, obj)
		case "orderNumber":
			out.Values[i] = ec._QualityControl_orderNumber(ctx, field, obj)
		case "orderType":
			out.Values[i] = ec._QualityControl_orderType(ctx, field, obj)
		case "orderContractor":
			out.Values[i] = ec._QualityControl_orderContractor(ctx, field, obj)
		case "orderContractorId":
			out.Values[i] = ec._QualityControl_orderContractorId(ctx, field, obj)
		case "clientName":
			out.Values[i] = ec._QualityControl_clientName(ctx, field, obj)
		case "requests":
			out.Values[i] = ec._QualityControl_requests(ctx, field, obj)
		case "status":
			out.Values[i] = ec._QualityControl_status(ctx, field, obj)
		case "assignee":
			out.Values[i] = ec._QualityControl_assignee(ctx, field, obj)
		case "assigneeId":
			out.Values[i] = ec._QualityControl_assigneeId(ctx, field, obj)
		case "address":
			out.Values[i] = ec._QualityControl_address(ctx, field, obj)
		case "history":
			out.Values[i] = ec._QualityControl_history(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._QualityControl_createdDateTime(ctx, field, obj)
		case "LastUpdateTime":
			out.Values[i] = ec._QualityControl_LastUpdateTime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var qualityControlHistoryImplementors = []string{"QualityControlHistory"}

func (ec *executionContext) _QualityControlHistory(ctx context.Context, sel ast.SelectionSet, obj *models.QualityControlHistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, qualityControlHistoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QualityControlHistory")
		case "status":
			out.Values[i] = ec._QualityControlHistory_status(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._QualityControlHistory_reason(ctx, field, obj)
		case "date":
			out.Values[i] = ec._QualityControlHistory_date(ctx, field, obj)
		case "cratedby":
			out.Values[i] = ec._QualityControlHistory_cratedby(ctx, field, obj)
		case "currentAssignee":
			out.Values[i] = ec._QualityControlHistory_currentAssignee(ctx, field, obj)
		case "newAssignee":
			out.Values[i] = ec._QualityControlHistory_newAssignee(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var qualityControlResultImplementors = []string{"QualityControlResult"}

func (ec *executionContext) _QualityControlResult(ctx context.Context, sel ast.SelectionSet, obj *models.QualityControlResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, qualityControlResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QualityControlResult")
		case "totalCount":
			out.Values[i] = ec._QualityControlResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._QualityControlResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "profile":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_profile(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allProfileDoc":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allProfileDoc(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allAccount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allAccount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allAdjustment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allAdjustment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allComment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allComment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "default":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_default(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allPipeline":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allPipeline(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allPipelineQualityControl":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allPipelineQualityControl(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allPipelineDoc":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allPipelineDoc(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allPipelinePhoto":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allPipelinePhoto(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allPipelineNote":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allPipelineNote(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allCredit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allCredit(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allCompany":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allCompany(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "company":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_company(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "pipelineState":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pipelineState(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allEmailTemplate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allEmailTemplate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allHeader":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allHeader(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allHeaderDetail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allHeaderDetail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "headerCode":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_headerCode(ctx, field)
				return res
			})
		case "allInstruction":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allInstruction(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allSalesAnalytics":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allSalesAnalytics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allOrderAnalytics":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allOrderAnalytics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allQualityControl":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allQualityControl(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allPipelineQualityControlAndNote":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allPipelineQualityControlAndNote(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "pipelineNeighborhood":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pipelineNeighborhood(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allBalance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allBalance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allCheckout":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allCheckout(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allCredits":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allCredits(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allQcRating":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allQcRating(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allOrderSubmit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allOrderSubmit(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allQcHistory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allQcHistory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allQcRequest":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allQcRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allReview":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allReview(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allRequest":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allQcCompleted":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allQcCompleted(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "pipeline":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pipeline(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allInvoice":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allInvoice(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allInvoiceRequest":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allInvoiceRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allInvoiceRequestHistory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allInvoiceRequestHistory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "iform":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_iform(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "iformTemp":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_iformTemp(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "pipelineRepair":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pipelineRepair(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allAnnouncement":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allAnnouncement(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allSession":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allSession(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allPermissionGroup":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allPermissionGroup(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allLoginLog":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allLoginLog(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allPipelineComparable":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allPipelineComparable(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allBilling":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allBilling(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allIformGrid":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allIformGrid(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allCreditLedger":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allCreditLedger(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "priceModule":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_priceModule(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requestImplementors = []string{"Request"}

func (ec *executionContext) _Request(ctx context.Context, sel ast.SelectionSet, obj *models.Request) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, requestImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Request")
		case "id":
			out.Values[i] = ec._Request_id(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Request_status(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Request_type(ctx, field, obj)
		case "orderType":
			out.Values[i] = ec._Request_orderType(ctx, field, obj)
		case "pipelineId":
			out.Values[i] = ec._Request_pipelineId(ctx, field, obj)
		case "orderNumber":
			out.Values[i] = ec._Request_orderNumber(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Request_address(ctx, field, obj)
		case "company":
			out.Values[i] = ec._Request_company(ctx, field, obj)
		case "conditionType":
			out.Values[i] = ec._Request_conditionType(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._Request_createdDateTime(ctx, field, obj)
		case "requestedBy":
			out.Values[i] = ec._Request_requestedBy(ctx, field, obj)
		case "requestedById":
			out.Values[i] = ec._Request_requestedById(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._Request_remarks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requestResultImplementors = []string{"RequestResult"}

func (ec *executionContext) _RequestResult(ctx context.Context, sel ast.SelectionSet, obj *models.RequestResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, requestResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RequestResult")
		case "totalCount":
			out.Values[i] = ec._RequestResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._RequestResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reviewImplementors = []string{"Review"}

func (ec *executionContext) _Review(ctx context.Context, sel ast.SelectionSet, obj *models.Review) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, reviewImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Review")
		case "id":
			out.Values[i] = ec._Review_id(ctx, field, obj)
		case "orderNumber":
			out.Values[i] = ec._Review_orderNumber(ctx, field, obj)
		case "pipelineId":
			out.Values[i] = ec._Review_pipelineId(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Review_address(ctx, field, obj)
		case "assignedTo":
			out.Values[i] = ec._Review_assignedTo(ctx, field, obj)
		case "reviewDescription":
			out.Values[i] = ec._Review_reviewDescription(ctx, field, obj)
		case "reviewDate":
			out.Values[i] = ec._Review_reviewDate(ctx, field, obj)
		case "reviewBy":
			out.Values[i] = ec._Review_reviewBy(ctx, field, obj)
		case "url":
			out.Values[i] = ec._Review_url(ctx, field, obj)
		case "fileName":
			out.Values[i] = ec._Review_fileName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reviewResultImplementors = []string{"ReviewResult"}

func (ec *executionContext) _ReviewResult(ctx context.Context, sel ast.SelectionSet, obj *models.ReviewResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, reviewResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReviewResult")
		case "totalCount":
			out.Values[i] = ec._ReviewResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._ReviewResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var salesAnalyticsImplementors = []string{"SalesAnalytics"}

func (ec *executionContext) _SalesAnalytics(ctx context.Context, sel ast.SelectionSet, obj *models.SalesAnalytics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, salesAnalyticsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SalesAnalytics")
		case "day":
			out.Values[i] = ec._SalesAnalytics_day(ctx, field, obj)
		case "completedOrder":
			out.Values[i] = ec._SalesAnalytics_completedOrder(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sessionImplementors = []string{"Session"}

func (ec *executionContext) _Session(ctx context.Context, sel ast.SelectionSet, obj *models.Session) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, sessionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Session")
		case "id":
			out.Values[i] = ec._Session_id(ctx, field, obj)
		case "invoiceDate":
			out.Values[i] = ec._Session_invoiceDate(ctx, field, obj)
		case "start":
			out.Values[i] = ec._Session_start(ctx, field, obj)
		case "end":
			out.Values[i] = ec._Session_end(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sessionResultImplementors = []string{"SessionResult"}

func (ec *executionContext) _SessionResult(ctx context.Context, sel ast.SelectionSet, obj *models.SessionResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, sessionResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SessionResult")
		case "totalCount":
			out.Values[i] = ec._SessionResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._SessionResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tokenImplementors = []string{"Token"}

func (ec *executionContext) _Token(ctx context.Context, sel ast.SelectionSet, obj *models.Token) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, tokenImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Token")
		case "token":
			out.Values[i] = ec._Token_token(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *models.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstName":
			out.Values[i] = ec._User_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._User_lastName(ctx, field, obj)
		case "company":
			out.Values[i] = ec._User_company(ctx, field, obj)
		case "phoneNumber":
			out.Values[i] = ec._User_phoneNumber(ctx, field, obj)
		case "address":
			out.Values[i] = ec._User_address(ctx, field, obj)
		case "city":
			out.Values[i] = ec._User_city(ctx, field, obj)
		case "state":
			out.Values[i] = ec._User_state(ctx, field, obj)
		case "zipCode":
			out.Values[i] = ec._User_zipCode(ctx, field, obj)
		case "title":
			out.Values[i] = ec._User_title(ctx, field, obj)
		case "about":
			out.Values[i] = ec._User_about(ctx, field, obj)
		case "roles":
			out.Values[i] = ec._User_roles(ctx, field, obj)
		case "status":
			out.Values[i] = ec._User_status(ctx, field, obj)
		case "hdyfu":
			out.Values[i] = ec._User_hdyfu(ctx, field, obj)
		case "phoneConsultation":
			out.Values[i] = ec._User_phoneConsultation(ctx, field, obj)
		case "imABroker":
			out.Values[i] = ec._User_imABroker(ctx, field, obj)
		case "broker":
			out.Values[i] = ec._User_broker(ctx, field, obj)
		case "brokerLicense":
			out.Values[i] = ec._User_brokerLicense(ctx, field, obj)
		case "agent":
			out.Values[i] = ec._User_agent(ctx, field, obj)
		case "agentLicense":
			out.Values[i] = ec._User_agentLicense(ctx, field, obj)
		case "licenseDate":
			out.Values[i] = ec._User_licenseDate(ctx, field, obj)
		case "licenseExpirationDate":
			out.Values[i] = ec._User_licenseExpirationDate(ctx, field, obj)
		case "brokerage":
			out.Values[i] = ec._User_brokerage(ctx, field, obj)
		case "yearOfExperience":
			out.Values[i] = ec._User_yearOfExperience(ctx, field, obj)
		case "profilePicture":
			out.Values[i] = ec._User_profilePicture(ctx, field, obj)
		case "createdDateTime":
			out.Values[i] = ec._User_createdDateTime(ctx, field, obj)
		case "lastUpdateTime":
			out.Values[i] = ec._User_lastUpdateTime(ctx, field, obj)
		case "logs":
			out.Values[i] = ec._User_logs(ctx, field, obj)
		case "credit":
			out.Values[i] = ec._User_credit(ctx, field, obj)
		case "orderTotal":
			out.Values[i] = ec._User_orderTotal(ctx, field, obj)
		case "assignmentPercentage":
			out.Values[i] = ec._User_assignmentPercentage(ctx, field, obj)
		case "companyList":
			out.Values[i] = ec._User_companyList(ctx, field, obj)
		case "permissionGroupId":
			out.Values[i] = ec._User_permissionGroupId(ctx, field, obj)
		case "permissionList":
			out.Values[i] = ec._User_permissionList(ctx, field, obj)
		case "priceModule":
			out.Values[i] = ec._User_priceModule(ctx, field, obj)
		case "disclaimer":
			out.Values[i] = ec._User_disclaimer(ctx, field, obj)
		case "theme":
			out.Values[i] = ec._User_theme(ctx, field, obj)
		case "isEnableEmailNotification":
			out.Values[i] = ec._User_isEnableEmailNotification(ctx, field, obj)
		case "tier":
			out.Values[i] = ec._User_tier(ctx, field, obj)
		case "mao":
			out.Values[i] = ec._User_mao(ctx, field, obj)
		case "assignDate":
			out.Values[i] = ec._User_assignDate(ctx, field, obj)
		case "assignActive":
			out.Values[i] = ec._User_assignActive(ctx, field, obj)
		case "assignHold":
			out.Values[i] = ec._User_assignHold(ctx, field, obj)
		case "assignRush":
			out.Values[i] = ec._User_assignRush(ctx, field, obj)
		case "assignStandby":
			out.Values[i] = ec._User_assignStandby(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userResultImplementors = []string{"UserResult"}

func (ec *executionContext) _UserResult(ctx context.Context, sel ast.SelectionSet, obj *models.UserResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, userResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserResult")
		case "totalCount":
			out.Values[i] = ec._UserResult_totalCount(ctx, field, obj)
		case "results":
			out.Values[i] = ec._UserResult_results(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAccountInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccountInput(ctx context.Context, v interface{}) (models.AccountInput, error) {
	return ec.unmarshalInputAccountInput(ctx, v)
}

func (ec *executionContext) marshalNAccountResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccountResult(ctx context.Context, sel ast.SelectionSet, v models.AccountResult) graphql.Marshaler {
	return ec._AccountResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccountResult(ctx context.Context, sel ast.SelectionSet, v *models.AccountResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccountResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAddCreditLedgerInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAddCreditLedgerInput(ctx context.Context, v interface{}) (models.AddCreditLedgerInput, error) {
	return ec.unmarshalInputAddCreditLedgerInput(ctx, v)
}

func (ec *executionContext) marshalNAdjustment2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAdjustment(ctx context.Context, sel ast.SelectionSet, v models.Adjustment) graphql.Marshaler {
	return ec._Adjustment(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdjustment2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAdjustment(ctx context.Context, sel ast.SelectionSet, v []*models.Adjustment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdjustment2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAdjustment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAdjustment2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAdjustment(ctx context.Context, sel ast.SelectionSet, v *models.Adjustment) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Adjustment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAnnouncementInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncementInput(ctx context.Context, v interface{}) (models.AnnouncementInput, error) {
	return ec.unmarshalInputAnnouncementInput(ctx, v)
}

func (ec *executionContext) marshalNAnnouncementResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncementResult(ctx context.Context, sel ast.SelectionSet, v models.AnnouncementResult) graphql.Marshaler {
	return ec._AnnouncementResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNAnnouncementResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncementResult(ctx context.Context, sel ast.SelectionSet, v *models.AnnouncementResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AnnouncementResult(ctx, sel, v)
}

func (ec *executionContext) marshalNBalanceResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBalanceResult(ctx context.Context, sel ast.SelectionSet, v models.BalanceResult) graphql.Marshaler {
	return ec._BalanceResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNBalanceResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBalanceResult(ctx context.Context, sel ast.SelectionSet, v *models.BalanceResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BalanceResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBillingEntryInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntryInput(ctx context.Context, v interface{}) (models.BillingEntryInput, error) {
	return ec.unmarshalInputBillingEntryInput(ctx, v)
}

func (ec *executionContext) unmarshalNBillingEntryInput2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntryInput(ctx context.Context, v interface{}) ([]*models.BillingEntryInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.BillingEntryInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNBillingEntryInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntryInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNBillingEntryInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntryInput(ctx context.Context, v interface{}) (*models.BillingEntryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNBillingEntryInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntryInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNBillingResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingResult(ctx context.Context, sel ast.SelectionSet, v models.BillingResult) graphql.Marshaler {
	return ec._BillingResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNBillingResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingResult(ctx context.Context, sel ast.SelectionSet, v *models.BillingResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BillingResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCheckoutResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCheckoutResult(ctx context.Context, sel ast.SelectionSet, v models.CheckoutResult) graphql.Marshaler {
	return ec._CheckoutResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCheckoutResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCheckoutResult(ctx context.Context, sel ast.SelectionSet, v *models.CheckoutResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CheckoutResult(ctx, sel, v)
}

func (ec *executionContext) marshalNComment2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐComment(ctx context.Context, sel ast.SelectionSet, v models.Comment) graphql.Marshaler {
	return ec._Comment(ctx, sel, &v)
}

func (ec *executionContext) marshalNComment2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐComment(ctx context.Context, sel ast.SelectionSet, v []*models.Comment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComment2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNComment2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐComment(ctx context.Context, sel ast.SelectionSet, v *models.Comment) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommentInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCommentInput(ctx context.Context, v interface{}) (models.CommentInput, error) {
	return ec.unmarshalInputCommentInput(ctx, v)
}

func (ec *executionContext) marshalNCompany2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompany(ctx context.Context, sel ast.SelectionSet, v models.Company) graphql.Marshaler {
	return ec._Company(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompany2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompany(ctx context.Context, sel ast.SelectionSet, v *models.Company) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Company(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCompanyInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyInput(ctx context.Context, v interface{}) (models.CompanyInput, error) {
	return ec.unmarshalInputCompanyInput(ctx, v)
}

func (ec *executionContext) marshalNCompanyResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyResult(ctx context.Context, sel ast.SelectionSet, v models.CompanyResult) graphql.Marshaler {
	return ec._CompanyResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanyResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyResult(ctx context.Context, sel ast.SelectionSet, v *models.CompanyResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CompanyResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCredit2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCredit(ctx context.Context, sel ast.SelectionSet, v models.Credit) graphql.Marshaler {
	return ec._Credit(ctx, sel, &v)
}

func (ec *executionContext) marshalNCredit2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCredit(ctx context.Context, sel ast.SelectionSet, v []*models.Credit) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCredit2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCredit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCredit2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCredit(ctx context.Context, sel ast.SelectionSet, v *models.Credit) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Credit(ctx, sel, v)
}

func (ec *executionContext) marshalNCreditLedgerResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditLedgerResult(ctx context.Context, sel ast.SelectionSet, v models.CreditLedgerResult) graphql.Marshaler {
	return ec._CreditLedgerResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreditLedgerResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditLedgerResult(ctx context.Context, sel ast.SelectionSet, v *models.CreditLedgerResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreditLedgerResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCreditsResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditsResult(ctx context.Context, sel ast.SelectionSet, v models.CreditsResult) graphql.Marshaler {
	return ec._CreditsResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreditsResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditsResult(ctx context.Context, sel ast.SelectionSet, v *models.CreditsResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreditsResult(ctx, sel, v)
}

func (ec *executionContext) marshalNDefault2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐDefault(ctx context.Context, sel ast.SelectionSet, v models.Default) graphql.Marshaler {
	return ec._Default(ctx, sel, &v)
}

func (ec *executionContext) marshalNDefault2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐDefault(ctx context.Context, sel ast.SelectionSet, v *models.Default) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Default(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDefaultInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐDefaultInput(ctx context.Context, v interface{}) (models.DefaultInput, error) {
	return ec.unmarshalInputDefaultInput(ctx, v)
}

func (ec *executionContext) marshalNEmailTemplateResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐEmailTemplateResult(ctx context.Context, sel ast.SelectionSet, v models.EmailTemplateResult) graphql.Marshaler {
	return ec._EmailTemplateResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmailTemplateResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐEmailTemplateResult(ctx context.Context, sel ast.SelectionSet, v *models.EmailTemplateResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EmailTemplateResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNHeaderResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderResult(ctx context.Context, sel ast.SelectionSet, v models.HeaderResult) graphql.Marshaler {
	return ec._HeaderResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNHeaderResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderResult(ctx context.Context, sel ast.SelectionSet, v *models.HeaderResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._HeaderResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNIform2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIform(ctx context.Context, sel ast.SelectionSet, v models.Iform) graphql.Marshaler {
	return ec._Iform(ctx, sel, &v)
}

func (ec *executionContext) marshalNIform2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIform(ctx context.Context, sel ast.SelectionSet, v *models.Iform) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Iform(ctx, sel, v)
}

func (ec *executionContext) marshalNIformGridResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformGridResult(ctx context.Context, sel ast.SelectionSet, v models.IformGridResult) graphql.Marshaler {
	return ec._IformGridResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNIformGridResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformGridResult(ctx context.Context, sel ast.SelectionSet, v *models.IformGridResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IformGridResult(ctx, sel, v)
}

func (ec *executionContext) marshalNIformTemp2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformTemp(ctx context.Context, sel ast.SelectionSet, v models.IformTemp) graphql.Marshaler {
	return ec._IformTemp(ctx, sel, &v)
}

func (ec *executionContext) marshalNIformTemp2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformTemp(ctx context.Context, sel ast.SelectionSet, v *models.IformTemp) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IformTemp(ctx, sel, v)
}

func (ec *executionContext) marshalNInstructionResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInstructionResult(ctx context.Context, sel ast.SelectionSet, v models.InstructionResult) graphql.Marshaler {
	return ec._InstructionResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNInstructionResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInstructionResult(ctx context.Context, sel ast.SelectionSet, v *models.InstructionResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._InstructionResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNInvoice2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoice(ctx context.Context, sel ast.SelectionSet, v []*models.Invoice) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOInvoice2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNInvoiceRequestHistoryResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestHistoryResult(ctx context.Context, sel ast.SelectionSet, v models.InvoiceRequestHistoryResult) graphql.Marshaler {
	return ec._InvoiceRequestHistoryResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNInvoiceRequestHistoryResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestHistoryResult(ctx context.Context, sel ast.SelectionSet, v *models.InvoiceRequestHistoryResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._InvoiceRequestHistoryResult(ctx, sel, v)
}

func (ec *executionContext) marshalNInvoiceRequestResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestResult(ctx context.Context, sel ast.SelectionSet, v models.InvoiceRequestResult) graphql.Marshaler {
	return ec._InvoiceRequestResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNInvoiceRequestResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestResult(ctx context.Context, sel ast.SelectionSet, v *models.InvoiceRequestResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._InvoiceRequestResult(ctx, sel, v)
}

func (ec *executionContext) marshalNLoginLogResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLoginLogResult(ctx context.Context, sel ast.SelectionSet, v models.LoginLogResult) graphql.Marshaler {
	return ec._LoginLogResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNLoginLogResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLoginLogResult(ctx context.Context, sel ast.SelectionSet, v *models.LoginLogResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LoginLogResult(ctx, sel, v)
}

func (ec *executionContext) marshalNOrderAnalytics2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐOrderAnalytics(ctx context.Context, sel ast.SelectionSet, v models.OrderAnalytics) graphql.Marshaler {
	return ec._OrderAnalytics(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrderAnalytics2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐOrderAnalytics(ctx context.Context, sel ast.SelectionSet, v []*models.OrderAnalytics) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrderAnalytics2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐOrderAnalytics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNOrderAnalytics2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐOrderAnalytics(ctx context.Context, sel ast.SelectionSet, v *models.OrderAnalytics) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrderAnalytics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrderAnalyticsFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐOrderAnalyticsFilterInput(ctx context.Context, v interface{}) (models.OrderAnalyticsFilterInput, error) {
	return ec.unmarshalInputOrderAnalyticsFilterInput(ctx, v)
}

func (ec *executionContext) marshalNOrderSubmit2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐOrderSubmit(ctx context.Context, sel ast.SelectionSet, v []*models.OrderSubmit) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrderSubmit2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐOrderSubmit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNPermissionGroupInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroupInput(ctx context.Context, v interface{}) (models.PermissionGroupInput, error) {
	return ec.unmarshalInputPermissionGroupInput(ctx, v)
}

func (ec *executionContext) marshalNPermissionGroupResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroupResult(ctx context.Context, sel ast.SelectionSet, v models.PermissionGroupResult) graphql.Marshaler {
	return ec._PermissionGroupResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNPermissionGroupResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroupResult(ctx context.Context, sel ast.SelectionSet, v *models.PermissionGroupResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PermissionGroupResult(ctx, sel, v)
}

func (ec *executionContext) marshalNPipeline2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipeline(ctx context.Context, sel ast.SelectionSet, v models.Pipeline) graphql.Marshaler {
	return ec._Pipeline(ctx, sel, &v)
}

func (ec *executionContext) marshalNPipeline2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipeline(ctx context.Context, sel ast.SelectionSet, v *models.Pipeline) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Pipeline(ctx, sel, v)
}

func (ec *executionContext) marshalNPipelineComparableResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineComparableResult(ctx context.Context, sel ast.SelectionSet, v models.PipelineComparableResult) graphql.Marshaler {
	return ec._PipelineComparableResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNPipelineComparableResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineComparableResult(ctx context.Context, sel ast.SelectionSet, v *models.PipelineComparableResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PipelineComparableResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPipelineDocInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineDocInput(ctx context.Context, v interface{}) (models.PipelineDocInput, error) {
	return ec.unmarshalInputPipelineDocInput(ctx, v)
}

func (ec *executionContext) marshalNPipelineDocResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineDocResult(ctx context.Context, sel ast.SelectionSet, v models.PipelineDocResult) graphql.Marshaler {
	return ec._PipelineDocResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNPipelineDocResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineDocResult(ctx context.Context, sel ast.SelectionSet, v *models.PipelineDocResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PipelineDocResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPipelineInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineInput(ctx context.Context, v interface{}) (models.PipelineInput, error) {
	return ec.unmarshalInputPipelineInput(ctx, v)
}

func (ec *executionContext) marshalNPipelineNeighborhood2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineNeighborhood(ctx context.Context, sel ast.SelectionSet, v models.PipelineNeighborhood) graphql.Marshaler {
	return ec._PipelineNeighborhood(ctx, sel, &v)
}

func (ec *executionContext) marshalNPipelineNeighborhood2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineNeighborhood(ctx context.Context, sel ast.SelectionSet, v *models.PipelineNeighborhood) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PipelineNeighborhood(ctx, sel, v)
}

func (ec *executionContext) marshalNPipelineNoteResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineNoteResult(ctx context.Context, sel ast.SelectionSet, v models.PipelineNoteResult) graphql.Marshaler {
	return ec._PipelineNoteResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNPipelineNoteResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineNoteResult(ctx context.Context, sel ast.SelectionSet, v *models.PipelineNoteResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PipelineNoteResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPipelinePhotoInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelinePhotoInput(ctx context.Context, v interface{}) (models.PipelinePhotoInput, error) {
	return ec.unmarshalInputPipelinePhotoInput(ctx, v)
}

func (ec *executionContext) marshalNPipelinePhotoResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelinePhotoResult(ctx context.Context, sel ast.SelectionSet, v models.PipelinePhotoResult) graphql.Marshaler {
	return ec._PipelinePhotoResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNPipelinePhotoResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelinePhotoResult(ctx context.Context, sel ast.SelectionSet, v *models.PipelinePhotoResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PipelinePhotoResult(ctx, sel, v)
}

func (ec *executionContext) marshalNPipelineQualityControlAndNoteResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControlAndNoteResult(ctx context.Context, sel ast.SelectionSet, v models.PipelineQualityControlAndNoteResult) graphql.Marshaler {
	return ec._PipelineQualityControlAndNoteResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNPipelineQualityControlAndNoteResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControlAndNoteResult(ctx context.Context, sel ast.SelectionSet, v *models.PipelineQualityControlAndNoteResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PipelineQualityControlAndNoteResult(ctx, sel, v)
}

func (ec *executionContext) marshalNPipelineQualityControlResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControlResult(ctx context.Context, sel ast.SelectionSet, v models.PipelineQualityControlResult) graphql.Marshaler {
	return ec._PipelineQualityControlResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNPipelineQualityControlResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControlResult(ctx context.Context, sel ast.SelectionSet, v *models.PipelineQualityControlResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PipelineQualityControlResult(ctx, sel, v)
}

func (ec *executionContext) marshalNPipelineRepair2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineRepair(ctx context.Context, sel ast.SelectionSet, v models.PipelineRepair) graphql.Marshaler {
	return ec._PipelineRepair(ctx, sel, &v)
}

func (ec *executionContext) marshalNPipelineRepair2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineRepair(ctx context.Context, sel ast.SelectionSet, v *models.PipelineRepair) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PipelineRepair(ctx, sel, v)
}

func (ec *executionContext) marshalNPipelineResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineResult(ctx context.Context, sel ast.SelectionSet, v models.PipelineResult) graphql.Marshaler {
	return ec._PipelineResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNPipelineResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineResult(ctx context.Context, sel ast.SelectionSet, v *models.PipelineResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PipelineResult(ctx, sel, v)
}

func (ec *executionContext) marshalNPipelineState2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineState(ctx context.Context, sel ast.SelectionSet, v models.PipelineState) graphql.Marshaler {
	return ec._PipelineState(ctx, sel, &v)
}

func (ec *executionContext) marshalNPipelineState2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineState(ctx context.Context, sel ast.SelectionSet, v *models.PipelineState) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PipelineState(ctx, sel, v)
}

func (ec *executionContext) marshalNPriceModule2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPriceModule(ctx context.Context, sel ast.SelectionSet, v models.PriceModule) graphql.Marshaler {
	return ec._PriceModule(ctx, sel, &v)
}

func (ec *executionContext) marshalNPriceModule2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPriceModule(ctx context.Context, sel ast.SelectionSet, v *models.PriceModule) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PriceModule(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProfileDocInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐProfileDocInput(ctx context.Context, v interface{}) (models.ProfileDocInput, error) {
	return ec.unmarshalInputProfileDocInput(ctx, v)
}

func (ec *executionContext) marshalNProfileDocResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐProfileDocResult(ctx context.Context, sel ast.SelectionSet, v models.ProfileDocResult) graphql.Marshaler {
	return ec._ProfileDocResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNProfileDocResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐProfileDocResult(ctx context.Context, sel ast.SelectionSet, v *models.ProfileDocResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProfileDocResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProfileInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐProfileInput(ctx context.Context, v interface{}) (models.ProfileInput, error) {
	return ec.unmarshalInputProfileInput(ctx, v)
}

func (ec *executionContext) marshalNQcCompleted2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcCompleted(ctx context.Context, sel ast.SelectionSet, v []*models.QcCompleted) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQcCompleted2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcCompleted(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNQcHistoryResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcHistoryResult(ctx context.Context, sel ast.SelectionSet, v models.QcHistoryResult) graphql.Marshaler {
	return ec._QcHistoryResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNQcHistoryResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcHistoryResult(ctx context.Context, sel ast.SelectionSet, v *models.QcHistoryResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._QcHistoryResult(ctx, sel, v)
}

func (ec *executionContext) marshalNQcRating2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRating(ctx context.Context, sel ast.SelectionSet, v []*models.QcRating) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQcRating2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRating(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNQcRequestResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRequestResult(ctx context.Context, sel ast.SelectionSet, v models.QcRequestResult) graphql.Marshaler {
	return ec._QcRequestResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNQcRequestResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRequestResult(ctx context.Context, sel ast.SelectionSet, v *models.QcRequestResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._QcRequestResult(ctx, sel, v)
}

func (ec *executionContext) marshalNQualityControlResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControlResult(ctx context.Context, sel ast.SelectionSet, v models.QualityControlResult) graphql.Marshaler {
	return ec._QualityControlResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNQualityControlResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControlResult(ctx context.Context, sel ast.SelectionSet, v *models.QualityControlResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._QualityControlResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRegisterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRegisterInput(ctx context.Context, v interface{}) (models.RegisterInput, error) {
	return ec.unmarshalInputRegisterInput(ctx, v)
}

func (ec *executionContext) marshalNRequestResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRequestResult(ctx context.Context, sel ast.SelectionSet, v models.RequestResult) graphql.Marshaler {
	return ec._RequestResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNRequestResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRequestResult(ctx context.Context, sel ast.SelectionSet, v *models.RequestResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RequestResult(ctx, sel, v)
}

func (ec *executionContext) marshalNReviewResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐReviewResult(ctx context.Context, sel ast.SelectionSet, v models.ReviewResult) graphql.Marshaler {
	return ec._ReviewResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNReviewResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐReviewResult(ctx context.Context, sel ast.SelectionSet, v *models.ReviewResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ReviewResult(ctx, sel, v)
}

func (ec *executionContext) marshalNSalesAnalytics2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSalesAnalytics(ctx context.Context, sel ast.SelectionSet, v models.SalesAnalytics) graphql.Marshaler {
	return ec._SalesAnalytics(ctx, sel, &v)
}

func (ec *executionContext) marshalNSalesAnalytics2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSalesAnalytics(ctx context.Context, sel ast.SelectionSet, v []*models.SalesAnalytics) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSalesAnalytics2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSalesAnalytics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSalesAnalytics2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSalesAnalytics(ctx context.Context, sel ast.SelectionSet, v *models.SalesAnalytics) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SalesAnalytics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSalesAnalyticsFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSalesAnalyticsFilterInput(ctx context.Context, v interface{}) (models.SalesAnalyticsFilterInput, error) {
	return ec.unmarshalInputSalesAnalyticsFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalNSaveBillingInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveBillingInput(ctx context.Context, v interface{}) (models.SaveBillingInput, error) {
	return ec.unmarshalInputSaveBillingInput(ctx, v)
}

func (ec *executionContext) unmarshalNSaveCreditInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveCreditInput(ctx context.Context, v interface{}) (models.SaveCreditInput, error) {
	return ec.unmarshalInputSaveCreditInput(ctx, v)
}

func (ec *executionContext) unmarshalNSaveEmailTemplateInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveEmailTemplateInput(ctx context.Context, v interface{}) (models.SaveEmailTemplateInput, error) {
	return ec.unmarshalInputSaveEmailTemplateInput(ctx, v)
}

func (ec *executionContext) unmarshalNSaveIformGridInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveIformGridInput(ctx context.Context, v interface{}) (models.SaveIformGridInput, error) {
	return ec.unmarshalInputSaveIformGridInput(ctx, v)
}

func (ec *executionContext) unmarshalNSaveInstructionInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveInstructionInput(ctx context.Context, v interface{}) (models.SaveInstructionInput, error) {
	return ec.unmarshalInputSaveInstructionInput(ctx, v)
}

func (ec *executionContext) unmarshalNSaveInvoiceInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveInvoiceInput(ctx context.Context, v interface{}) (models.SaveInvoiceInput, error) {
	return ec.unmarshalInputSaveInvoiceInput(ctx, v)
}

func (ec *executionContext) unmarshalNSavePipelineComparableInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSavePipelineComparableInput(ctx context.Context, v interface{}) (models.SavePipelineComparableInput, error) {
	return ec.unmarshalInputSavePipelineComparableInput(ctx, v)
}

func (ec *executionContext) unmarshalNSavePipelineNoteInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSavePipelineNoteInput(ctx context.Context, v interface{}) (models.SavePipelineNoteInput, error) {
	return ec.unmarshalInputSavePipelineNoteInput(ctx, v)
}

func (ec *executionContext) unmarshalNSavePipelineQualityControlAndNoteInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSavePipelineQualityControlAndNoteInput(ctx context.Context, v interface{}) (models.SavePipelineQualityControlAndNoteInput, error) {
	return ec.unmarshalInputSavePipelineQualityControlAndNoteInput(ctx, v)
}

func (ec *executionContext) unmarshalNSaveReviewInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveReviewInput(ctx context.Context, v interface{}) (models.SaveReviewInput, error) {
	return ec.unmarshalInputSaveReviewInput(ctx, v)
}

func (ec *executionContext) unmarshalNSaveUserInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSaveUserInput(ctx context.Context, v interface{}) (models.SaveUserInput, error) {
	return ec.unmarshalInputSaveUserInput(ctx, v)
}

func (ec *executionContext) marshalNSessionResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSessionResult(ctx context.Context, sel ast.SelectionSet, v models.SessionResult) graphql.Marshaler {
	return ec._SessionResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNSessionResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSessionResult(ctx context.Context, sel ast.SelectionSet, v *models.SessionResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SessionResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNToken2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐToken(ctx context.Context, sel ast.SelectionSet, v models.Token) graphql.Marshaler {
	return ec._Token(ctx, sel, &v)
}

func (ec *executionContext) marshalNToken2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐToken(ctx context.Context, sel ast.SelectionSet, v *models.Token) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Token(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateBillingInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateBillingInput(ctx context.Context, v interface{}) (models.UpdateBillingInput, error) {
	return ec.unmarshalInputUpdateBillingInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateEmailTemplateInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateEmailTemplateInput(ctx context.Context, v interface{}) (models.UpdateEmailTemplateInput, error) {
	return ec.unmarshalInputUpdateEmailTemplateInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateIformInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateIformInput(ctx context.Context, v interface{}) (models.UpdateIformInput, error) {
	return ec.unmarshalInputUpdateIformInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateIformTempInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateIformTempInput(ctx context.Context, v interface{}) (models.UpdateIformTempInput, error) {
	return ec.unmarshalInputUpdateIformTempInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateInvoiceInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateInvoiceInput(ctx context.Context, v interface{}) (models.UpdateInvoiceInput, error) {
	return ec.unmarshalInputUpdateInvoiceInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdatePipelineInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdatePipelineInput(ctx context.Context, v interface{}) (models.UpdatePipelineInput, error) {
	return ec.unmarshalInputUpdatePipelineInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdatePipelineNeighborhoodInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdatePipelineNeighborhoodInput(ctx context.Context, v interface{}) (models.UpdatePipelineNeighborhoodInput, error) {
	return ec.unmarshalInputUpdatePipelineNeighborhoodInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdatePipelineRepairInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdatePipelineRepairInput(ctx context.Context, v interface{}) (models.UpdatePipelineRepairInput, error) {
	return ec.unmarshalInputUpdatePipelineRepairInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdatePipelineStateInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdatePipelineStateInput(ctx context.Context, v interface{}) (models.UpdatePipelineStateInput, error) {
	return ec.unmarshalInputUpdatePipelineStateInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateQcRequestInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateQcRequestInput(ctx context.Context, v interface{}) (models.UpdateQcRequestInput, error) {
	return ec.unmarshalInputUpdateQcRequestInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateQualityControlInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateQualityControlInput(ctx context.Context, v interface{}) (models.UpdateQualityControlInput, error) {
	return ec.unmarshalInputUpdateQualityControlInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateRequestInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateRequestInput(ctx context.Context, v interface{}) (models.UpdateRequestInput, error) {
	return ec.unmarshalInputUpdateRequestInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateReviewInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateReviewInput(ctx context.Context, v interface{}) (models.UpdateReviewInput, error) {
	return ec.unmarshalInputUpdateReviewInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateSessionInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateSessionInput(ctx context.Context, v interface{}) (models.UpdateSessionInput, error) {
	return ec.unmarshalInputUpdateSessionInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpdateUserInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUpdateUserInput(ctx context.Context, v interface{}) (models.UpdateUserInput, error) {
	return ec.unmarshalInputUpdateUserInput(ctx, v)
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	return graphql.UnmarshalUpload(v)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v models.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *models.User) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserResult2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUserResult(ctx context.Context, sel ast.SelectionSet, v models.UserResult) graphql.Marshaler {
	return ec._UserResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserResult2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUserResult(ctx context.Context, sel ast.SelectionSet, v *models.UserResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserResult(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAccount2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccount(ctx context.Context, sel ast.SelectionSet, v models.Account) graphql.Marshaler {
	return ec._Account(ctx, sel, &v)
}

func (ec *executionContext) marshalOAccount2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccount(ctx context.Context, sel ast.SelectionSet, v []*models.Account) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAccount2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAccount2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccount(ctx context.Context, sel ast.SelectionSet, v *models.Account) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAccountFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccountFilterInput(ctx context.Context, v interface{}) (models.AccountFilterInput, error) {
	return ec.unmarshalInputAccountFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOAccountFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccountFilterInput(ctx context.Context, v interface{}) (*models.AccountFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAccountFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAccountFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOAnnouncement2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncement(ctx context.Context, sel ast.SelectionSet, v models.Announcement) graphql.Marshaler {
	return ec._Announcement(ctx, sel, &v)
}

func (ec *executionContext) marshalOAnnouncement2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncement(ctx context.Context, sel ast.SelectionSet, v []*models.Announcement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAnnouncement2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAnnouncement2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncement(ctx context.Context, sel ast.SelectionSet, v *models.Announcement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Announcement(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAnnouncementFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncementFilterInput(ctx context.Context, v interface{}) (models.AnnouncementFilterInput, error) {
	return ec.unmarshalInputAnnouncementFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOAnnouncementFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncementFilterInput(ctx context.Context, v interface{}) (*models.AnnouncementFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAnnouncementFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐAnnouncementFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBalance2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBalance(ctx context.Context, sel ast.SelectionSet, v models.Balance) graphql.Marshaler {
	return ec._Balance(ctx, sel, &v)
}

func (ec *executionContext) marshalOBalance2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBalance(ctx context.Context, sel ast.SelectionSet, v []*models.Balance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBalance2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBalance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBalance2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBalance(ctx context.Context, sel ast.SelectionSet, v *models.Balance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Balance(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBalanceFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBalanceFilterInput(ctx context.Context, v interface{}) (models.BalanceFilterInput, error) {
	return ec.unmarshalInputBalanceFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOBalanceFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBalanceFilterInput(ctx context.Context, v interface{}) (*models.BalanceFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBalanceFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBalanceFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBilling2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBilling(ctx context.Context, sel ast.SelectionSet, v models.Billing) graphql.Marshaler {
	return ec._Billing(ctx, sel, &v)
}

func (ec *executionContext) marshalOBilling2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBilling(ctx context.Context, sel ast.SelectionSet, v []*models.Billing) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBilling2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBilling(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBilling2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBilling(ctx context.Context, sel ast.SelectionSet, v *models.Billing) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Billing(ctx, sel, v)
}

func (ec *executionContext) marshalOBillingEntry2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntry(ctx context.Context, sel ast.SelectionSet, v models.BillingEntry) graphql.Marshaler {
	return ec._BillingEntry(ctx, sel, &v)
}

func (ec *executionContext) marshalOBillingEntry2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntry(ctx context.Context, sel ast.SelectionSet, v []*models.BillingEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBillingEntry2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBillingEntry2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntry(ctx context.Context, sel ast.SelectionSet, v *models.BillingEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BillingEntry(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBillingEntryInput2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntryInput(ctx context.Context, v interface{}) ([]*models.BillingEntryInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.BillingEntryInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNBillingEntryInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingEntryInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBillingFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingFilterInput(ctx context.Context, v interface{}) (models.BillingFilterInput, error) {
	return ec.unmarshalInputBillingFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOBillingFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingFilterInput(ctx context.Context, v interface{}) (*models.BillingFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBillingFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐBillingFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) marshalOCheckout2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCheckout(ctx context.Context, sel ast.SelectionSet, v models.Checkout) graphql.Marshaler {
	return ec._Checkout(ctx, sel, &v)
}

func (ec *executionContext) marshalOCheckout2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCheckout(ctx context.Context, sel ast.SelectionSet, v []*models.Checkout) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCheckout2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCheckout(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCheckout2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCheckout(ctx context.Context, sel ast.SelectionSet, v *models.Checkout) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Checkout(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCheckoutFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCheckoutFilterInput(ctx context.Context, v interface{}) (models.CheckoutFilterInput, error) {
	return ec.unmarshalInputCheckoutFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOCheckoutFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCheckoutFilterInput(ctx context.Context, v interface{}) (*models.CheckoutFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCheckoutFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCheckoutFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOCompany2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompany(ctx context.Context, sel ast.SelectionSet, v models.Company) graphql.Marshaler {
	return ec._Company(ctx, sel, &v)
}

func (ec *executionContext) marshalOCompany2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompany(ctx context.Context, sel ast.SelectionSet, v []*models.Company) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCompany2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompany(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCompany2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompany(ctx context.Context, sel ast.SelectionSet, v *models.Company) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Company(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCompanyFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyFilterInput(ctx context.Context, v interface{}) (models.CompanyFilterInput, error) {
	return ec.unmarshalInputCompanyFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOCompanyFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyFilterInput(ctx context.Context, v interface{}) (*models.CompanyFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCompanyFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOCompanyForm2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyForm(ctx context.Context, sel ast.SelectionSet, v models.CompanyForm) graphql.Marshaler {
	return ec._CompanyForm(ctx, sel, &v)
}

func (ec *executionContext) marshalOCompanyForm2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyForm(ctx context.Context, sel ast.SelectionSet, v []*models.CompanyForm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCompanyForm2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyForm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCompanyForm2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyForm(ctx context.Context, sel ast.SelectionSet, v *models.CompanyForm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompanyForm(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCompanyFormInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyFormInput(ctx context.Context, v interface{}) (models.CompanyFormInput, error) {
	return ec.unmarshalInputCompanyFormInput(ctx, v)
}

func (ec *executionContext) unmarshalOCompanyFormInput2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyFormInput(ctx context.Context, v interface{}) ([]*models.CompanyFormInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*models.CompanyFormInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOCompanyFormInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyFormInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCompanyFormInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyFormInput(ctx context.Context, v interface{}) (*models.CompanyFormInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCompanyFormInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCompanyFormInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOCreditLedger2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditLedger(ctx context.Context, sel ast.SelectionSet, v models.CreditLedger) graphql.Marshaler {
	return ec._CreditLedger(ctx, sel, &v)
}

func (ec *executionContext) marshalOCreditLedger2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditLedger(ctx context.Context, sel ast.SelectionSet, v []*models.CreditLedger) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCreditLedger2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditLedger(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCreditLedger2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditLedger(ctx context.Context, sel ast.SelectionSet, v *models.CreditLedger) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreditLedger(ctx, sel, v)
}

func (ec *executionContext) marshalOCredits2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCredits(ctx context.Context, sel ast.SelectionSet, v models.Credits) graphql.Marshaler {
	return ec._Credits(ctx, sel, &v)
}

func (ec *executionContext) marshalOCredits2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCredits(ctx context.Context, sel ast.SelectionSet, v []*models.Credits) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCredits2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCredits(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCredits2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCredits(ctx context.Context, sel ast.SelectionSet, v *models.Credits) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Credits(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCreditsFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditsFilterInput(ctx context.Context, v interface{}) (models.CreditsFilterInput, error) {
	return ec.unmarshalInputCreditsFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOCreditsFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditsFilterInput(ctx context.Context, v interface{}) (*models.CreditsFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCreditsFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐCreditsFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalODoc2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐDoc(ctx context.Context, sel ast.SelectionSet, v models.Doc) graphql.Marshaler {
	return ec._Doc(ctx, sel, &v)
}

func (ec *executionContext) marshalODoc2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐDoc(ctx context.Context, sel ast.SelectionSet, v []*models.Doc) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODoc2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐDoc(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODoc2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐDoc(ctx context.Context, sel ast.SelectionSet, v *models.Doc) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Doc(ctx, sel, v)
}

func (ec *executionContext) marshalOEmailTemplate2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐEmailTemplate(ctx context.Context, sel ast.SelectionSet, v models.EmailTemplate) graphql.Marshaler {
	return ec._EmailTemplate(ctx, sel, &v)
}

func (ec *executionContext) marshalOEmailTemplate2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐEmailTemplate(ctx context.Context, sel ast.SelectionSet, v []*models.EmailTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEmailTemplate2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐEmailTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOEmailTemplate2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐEmailTemplate(ctx context.Context, sel ast.SelectionSet, v *models.EmailTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EmailTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEmailTemplateFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐEmailTemplateFilterInput(ctx context.Context, v interface{}) (models.EmailTemplateFilterInput, error) {
	return ec.unmarshalInputEmailTemplateFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOEmailTemplateFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐEmailTemplateFilterInput(ctx context.Context, v interface{}) (*models.EmailTemplateFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOEmailTemplateFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐEmailTemplateFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐFilterInput(ctx context.Context, v interface{}) (models.FilterInput, error) {
	return ec.unmarshalInputFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐFilterInput(ctx context.Context, v interface{}) (*models.FilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	return graphql.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFloat2float64(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOFloat2float64(ctx, sel, *v)
}

func (ec *executionContext) marshalOHeader2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeader(ctx context.Context, sel ast.SelectionSet, v models.Header) graphql.Marshaler {
	return ec._Header(ctx, sel, &v)
}

func (ec *executionContext) marshalOHeader2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeader(ctx context.Context, sel ast.SelectionSet, v []*models.Header) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHeader2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeader(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOHeader2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeader(ctx context.Context, sel ast.SelectionSet, v *models.Header) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Header(ctx, sel, v)
}

func (ec *executionContext) marshalOHeaderCode2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderCode(ctx context.Context, sel ast.SelectionSet, v models.HeaderCode) graphql.Marshaler {
	return ec._HeaderCode(ctx, sel, &v)
}

func (ec *executionContext) marshalOHeaderCode2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderCode(ctx context.Context, sel ast.SelectionSet, v []*models.HeaderCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHeaderCode2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderCode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOHeaderCode2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderCode(ctx context.Context, sel ast.SelectionSet, v *models.HeaderCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HeaderCode(ctx, sel, v)
}

func (ec *executionContext) unmarshalOHeaderFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderFilterInput(ctx context.Context, v interface{}) (models.HeaderFilterInput, error) {
	return ec.unmarshalInputHeaderFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOHeaderFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderFilterInput(ctx context.Context, v interface{}) (*models.HeaderFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOHeaderFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐHeaderFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalID(v)
}

func (ec *executionContext) unmarshalOID2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOID2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOID2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOID2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOID2string(ctx, sel, *v)
}

func (ec *executionContext) marshalOIformGrid2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformGrid(ctx context.Context, sel ast.SelectionSet, v models.IformGrid) graphql.Marshaler {
	return ec._IformGrid(ctx, sel, &v)
}

func (ec *executionContext) marshalOIformGrid2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformGrid(ctx context.Context, sel ast.SelectionSet, v []*models.IformGrid) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIformGrid2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformGrid(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIformGrid2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformGrid(ctx context.Context, sel ast.SelectionSet, v *models.IformGrid) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IformGrid(ctx, sel, v)
}

func (ec *executionContext) unmarshalOIformGridFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformGridFilterInput(ctx context.Context, v interface{}) (models.IformGridFilterInput, error) {
	return ec.unmarshalInputIformGridFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOIformGridFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformGridFilterInput(ctx context.Context, v interface{}) (*models.IformGridFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIformGridFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformGridFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOIformHistory2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformHistory(ctx context.Context, sel ast.SelectionSet, v models.IformHistory) graphql.Marshaler {
	return ec._IformHistory(ctx, sel, &v)
}

func (ec *executionContext) marshalOIformHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformHistory(ctx context.Context, sel ast.SelectionSet, v []*models.IformHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIformHistory2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIformHistory2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐIformHistory(ctx context.Context, sel ast.SelectionSet, v *models.IformHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IformHistory(ctx, sel, v)
}

func (ec *executionContext) marshalOInstruction2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInstruction(ctx context.Context, sel ast.SelectionSet, v models.Instruction) graphql.Marshaler {
	return ec._Instruction(ctx, sel, &v)
}

func (ec *executionContext) marshalOInstruction2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInstruction(ctx context.Context, sel ast.SelectionSet, v []*models.Instruction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOInstruction2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInstruction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOInstruction2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInstruction(ctx context.Context, sel ast.SelectionSet, v *models.Instruction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Instruction(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInstructionFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInstructionFilterInput(ctx context.Context, v interface{}) (models.InstructionFilterInput, error) {
	return ec.unmarshalInputInstructionFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOInstructionFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInstructionFilterInput(ctx context.Context, v interface{}) (*models.InstructionFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInstructionFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInstructionFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int(ctx, sel, *v)
}

func (ec *executionContext) marshalOInvoice2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoice(ctx context.Context, sel ast.SelectionSet, v models.Invoice) graphql.Marshaler {
	return ec._Invoice(ctx, sel, &v)
}

func (ec *executionContext) marshalOInvoice2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoice(ctx context.Context, sel ast.SelectionSet, v []*models.Invoice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOInvoice2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOInvoice2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoice(ctx context.Context, sel ast.SelectionSet, v *models.Invoice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Invoice(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInvoiceFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceFilterInput(ctx context.Context, v interface{}) (models.InvoiceFilterInput, error) {
	return ec.unmarshalInputInvoiceFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOInvoiceFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceFilterInput(ctx context.Context, v interface{}) (*models.InvoiceFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInvoiceFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOInvoiceRequestFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestFilterInput(ctx context.Context, v interface{}) (models.InvoiceRequestFilterInput, error) {
	return ec.unmarshalInputInvoiceRequestFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOInvoiceRequestFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestFilterInput(ctx context.Context, v interface{}) (*models.InvoiceRequestFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInvoiceRequestFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInvoiceRequestHistory2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestHistory(ctx context.Context, sel ast.SelectionSet, v models.InvoiceRequestHistory) graphql.Marshaler {
	return ec._InvoiceRequestHistory(ctx, sel, &v)
}

func (ec *executionContext) marshalOInvoiceRequestHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestHistory(ctx context.Context, sel ast.SelectionSet, v []*models.InvoiceRequestHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOInvoiceRequestHistory2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOInvoiceRequestHistory2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐInvoiceRequestHistory(ctx context.Context, sel ast.SelectionSet, v *models.InvoiceRequestHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InvoiceRequestHistory(ctx, sel, v)
}

func (ec *executionContext) marshalOLog2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLog(ctx context.Context, sel ast.SelectionSet, v models.Log) graphql.Marshaler {
	return ec._Log(ctx, sel, &v)
}

func (ec *executionContext) marshalOLog2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLog(ctx context.Context, sel ast.SelectionSet, v []*models.Log) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLog2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLog2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLog(ctx context.Context, sel ast.SelectionSet, v *models.Log) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Log(ctx, sel, v)
}

func (ec *executionContext) marshalOLoginLog2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLoginLog(ctx context.Context, sel ast.SelectionSet, v models.LoginLog) graphql.Marshaler {
	return ec._LoginLog(ctx, sel, &v)
}

func (ec *executionContext) marshalOLoginLog2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLoginLog(ctx context.Context, sel ast.SelectionSet, v []*models.LoginLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLoginLog2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLoginLog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLoginLog2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLoginLog(ctx context.Context, sel ast.SelectionSet, v *models.LoginLog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LoginLog(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLoginLogFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLoginLogFilterInput(ctx context.Context, v interface{}) (models.LoginLogFilterInput, error) {
	return ec.unmarshalInputLoginLogFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOLoginLogFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLoginLogFilterInput(ctx context.Context, v interface{}) (*models.LoginLogFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLoginLogFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐLoginLogFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOOrderSubmit2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐOrderSubmit(ctx context.Context, sel ast.SelectionSet, v models.OrderSubmit) graphql.Marshaler {
	return ec._OrderSubmit(ctx, sel, &v)
}

func (ec *executionContext) marshalOOrderSubmit2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐOrderSubmit(ctx context.Context, sel ast.SelectionSet, v *models.OrderSubmit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrderSubmit(ctx, sel, v)
}

func (ec *executionContext) marshalOPermissionGroup2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroup(ctx context.Context, sel ast.SelectionSet, v models.PermissionGroup) graphql.Marshaler {
	return ec._PermissionGroup(ctx, sel, &v)
}

func (ec *executionContext) marshalOPermissionGroup2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroup(ctx context.Context, sel ast.SelectionSet, v []*models.PermissionGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPermissionGroup2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPermissionGroup2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroup(ctx context.Context, sel ast.SelectionSet, v *models.PermissionGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PermissionGroup(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPermissionGroupFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroupFilterInput(ctx context.Context, v interface{}) (models.PermissionGroupFilterInput, error) {
	return ec.unmarshalInputPermissionGroupFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOPermissionGroupFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroupFilterInput(ctx context.Context, v interface{}) (*models.PermissionGroupFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPermissionGroupFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPermissionGroupFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOPipeline2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipeline(ctx context.Context, sel ast.SelectionSet, v models.Pipeline) graphql.Marshaler {
	return ec._Pipeline(ctx, sel, &v)
}

func (ec *executionContext) marshalOPipeline2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipeline(ctx context.Context, sel ast.SelectionSet, v []*models.Pipeline) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPipeline2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipeline(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPipeline2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipeline(ctx context.Context, sel ast.SelectionSet, v *models.Pipeline) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Pipeline(ctx, sel, v)
}

func (ec *executionContext) marshalOPipelineAssignedHistory2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineAssignedHistory(ctx context.Context, sel ast.SelectionSet, v models.PipelineAssignedHistory) graphql.Marshaler {
	return ec._PipelineAssignedHistory(ctx, sel, &v)
}

func (ec *executionContext) marshalOPipelineAssignedHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineAssignedHistory(ctx context.Context, sel ast.SelectionSet, v []*models.PipelineAssignedHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPipelineAssignedHistory2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineAssignedHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPipelineAssignedHistory2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineAssignedHistory(ctx context.Context, sel ast.SelectionSet, v *models.PipelineAssignedHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PipelineAssignedHistory(ctx, sel, v)
}

func (ec *executionContext) marshalOPipelineComparable2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineComparable(ctx context.Context, sel ast.SelectionSet, v models.PipelineComparable) graphql.Marshaler {
	return ec._PipelineComparable(ctx, sel, &v)
}

func (ec *executionContext) marshalOPipelineComparable2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineComparable(ctx context.Context, sel ast.SelectionSet, v []*models.PipelineComparable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPipelineComparable2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineComparable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPipelineComparable2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineComparable(ctx context.Context, sel ast.SelectionSet, v *models.PipelineComparable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PipelineComparable(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPipelineComparableFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineComparableFilterInput(ctx context.Context, v interface{}) (models.PipelineComparableFilterInput, error) {
	return ec.unmarshalInputPipelineComparableFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOPipelineComparableFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineComparableFilterInput(ctx context.Context, v interface{}) (*models.PipelineComparableFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPipelineComparableFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineComparableFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOPipelineDoc2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineDoc(ctx context.Context, sel ast.SelectionSet, v models.PipelineDoc) graphql.Marshaler {
	return ec._PipelineDoc(ctx, sel, &v)
}

func (ec *executionContext) marshalOPipelineDoc2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineDoc(ctx context.Context, sel ast.SelectionSet, v []*models.PipelineDoc) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPipelineDoc2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineDoc(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPipelineDoc2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineDoc(ctx context.Context, sel ast.SelectionSet, v *models.PipelineDoc) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PipelineDoc(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPipelineFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineFilterInput(ctx context.Context, v interface{}) (models.PipelineFilterInput, error) {
	return ec.unmarshalInputPipelineFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOPipelineFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineFilterInput(ctx context.Context, v interface{}) (*models.PipelineFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPipelineFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOPipelineHistory2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineHistory(ctx context.Context, sel ast.SelectionSet, v models.PipelineHistory) graphql.Marshaler {
	return ec._PipelineHistory(ctx, sel, &v)
}

func (ec *executionContext) marshalOPipelineHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineHistory(ctx context.Context, sel ast.SelectionSet, v []*models.PipelineHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPipelineHistory2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPipelineHistory2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineHistory(ctx context.Context, sel ast.SelectionSet, v *models.PipelineHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PipelineHistory(ctx, sel, v)
}

func (ec *executionContext) marshalOPipelineNote2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineNote(ctx context.Context, sel ast.SelectionSet, v models.PipelineNote) graphql.Marshaler {
	return ec._PipelineNote(ctx, sel, &v)
}

func (ec *executionContext) marshalOPipelineNote2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineNote(ctx context.Context, sel ast.SelectionSet, v []*models.PipelineNote) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPipelineNote2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineNote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPipelineNote2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineNote(ctx context.Context, sel ast.SelectionSet, v *models.PipelineNote) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PipelineNote(ctx, sel, v)
}

func (ec *executionContext) marshalOPipelinePhoto2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelinePhoto(ctx context.Context, sel ast.SelectionSet, v models.PipelinePhoto) graphql.Marshaler {
	return ec._PipelinePhoto(ctx, sel, &v)
}

func (ec *executionContext) marshalOPipelinePhoto2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelinePhoto(ctx context.Context, sel ast.SelectionSet, v []*models.PipelinePhoto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPipelinePhoto2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelinePhoto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPipelinePhoto2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelinePhoto(ctx context.Context, sel ast.SelectionSet, v *models.PipelinePhoto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PipelinePhoto(ctx, sel, v)
}

func (ec *executionContext) marshalOPipelineQualityControl2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControl(ctx context.Context, sel ast.SelectionSet, v models.PipelineQualityControl) graphql.Marshaler {
	return ec._PipelineQualityControl(ctx, sel, &v)
}

func (ec *executionContext) marshalOPipelineQualityControl2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControl(ctx context.Context, sel ast.SelectionSet, v []*models.PipelineQualityControl) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPipelineQualityControl2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControl(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPipelineQualityControl2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControl(ctx context.Context, sel ast.SelectionSet, v *models.PipelineQualityControl) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PipelineQualityControl(ctx, sel, v)
}

func (ec *executionContext) marshalOPipelineQualityControlAndNote2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControlAndNote(ctx context.Context, sel ast.SelectionSet, v models.PipelineQualityControlAndNote) graphql.Marshaler {
	return ec._PipelineQualityControlAndNote(ctx, sel, &v)
}

func (ec *executionContext) marshalOPipelineQualityControlAndNote2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControlAndNote(ctx context.Context, sel ast.SelectionSet, v []*models.PipelineQualityControlAndNote) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPipelineQualityControlAndNote2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControlAndNote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPipelineQualityControlAndNote2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPipelineQualityControlAndNote(ctx context.Context, sel ast.SelectionSet, v *models.PipelineQualityControlAndNote) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PipelineQualityControlAndNote(ctx, sel, v)
}

func (ec *executionContext) marshalOPriceModule2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPriceModule(ctx context.Context, sel ast.SelectionSet, v models.PriceModule) graphql.Marshaler {
	return ec._PriceModule(ctx, sel, &v)
}

func (ec *executionContext) marshalOPriceModule2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPriceModule(ctx context.Context, sel ast.SelectionSet, v *models.PriceModule) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PriceModule(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPriceModuleInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPriceModuleInput(ctx context.Context, v interface{}) (models.PriceModuleInput, error) {
	return ec.unmarshalInputPriceModuleInput(ctx, v)
}

func (ec *executionContext) unmarshalOPriceModuleInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPriceModuleInput(ctx context.Context, v interface{}) (*models.PriceModuleInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPriceModuleInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐPriceModuleInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOQcCompleted2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcCompleted(ctx context.Context, sel ast.SelectionSet, v models.QcCompleted) graphql.Marshaler {
	return ec._QcCompleted(ctx, sel, &v)
}

func (ec *executionContext) marshalOQcCompleted2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcCompleted(ctx context.Context, sel ast.SelectionSet, v *models.QcCompleted) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QcCompleted(ctx, sel, v)
}

func (ec *executionContext) marshalOQcHistory2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcHistory(ctx context.Context, sel ast.SelectionSet, v models.QcHistory) graphql.Marshaler {
	return ec._QcHistory(ctx, sel, &v)
}

func (ec *executionContext) marshalOQcHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcHistory(ctx context.Context, sel ast.SelectionSet, v []*models.QcHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQcHistory2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOQcHistory2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcHistory(ctx context.Context, sel ast.SelectionSet, v *models.QcHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QcHistory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOQcHistoryFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcHistoryFilterInput(ctx context.Context, v interface{}) (models.QcHistoryFilterInput, error) {
	return ec.unmarshalInputQcHistoryFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOQcHistoryFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcHistoryFilterInput(ctx context.Context, v interface{}) (*models.QcHistoryFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOQcHistoryFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcHistoryFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOQcRating2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRating(ctx context.Context, sel ast.SelectionSet, v models.QcRating) graphql.Marshaler {
	return ec._QcRating(ctx, sel, &v)
}

func (ec *executionContext) marshalOQcRating2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRating(ctx context.Context, sel ast.SelectionSet, v *models.QcRating) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QcRating(ctx, sel, v)
}

func (ec *executionContext) marshalOQcRequest2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRequest(ctx context.Context, sel ast.SelectionSet, v models.QcRequest) graphql.Marshaler {
	return ec._QcRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalOQcRequest2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRequest(ctx context.Context, sel ast.SelectionSet, v []*models.QcRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQcRequest2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOQcRequest2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRequest(ctx context.Context, sel ast.SelectionSet, v *models.QcRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QcRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalOQcRequestFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRequestFilterInput(ctx context.Context, v interface{}) (models.QcRequestFilterInput, error) {
	return ec.unmarshalInputQcRequestFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOQcRequestFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRequestFilterInput(ctx context.Context, v interface{}) (*models.QcRequestFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOQcRequestFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQcRequestFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOQualityControl2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControl(ctx context.Context, sel ast.SelectionSet, v models.QualityControl) graphql.Marshaler {
	return ec._QualityControl(ctx, sel, &v)
}

func (ec *executionContext) marshalOQualityControl2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControl(ctx context.Context, sel ast.SelectionSet, v []*models.QualityControl) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQualityControl2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControl(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOQualityControl2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControl(ctx context.Context, sel ast.SelectionSet, v *models.QualityControl) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QualityControl(ctx, sel, v)
}

func (ec *executionContext) marshalOQualityControlHistory2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControlHistory(ctx context.Context, sel ast.SelectionSet, v models.QualityControlHistory) graphql.Marshaler {
	return ec._QualityControlHistory(ctx, sel, &v)
}

func (ec *executionContext) marshalOQualityControlHistory2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControlHistory(ctx context.Context, sel ast.SelectionSet, v []*models.QualityControlHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQualityControlHistory2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControlHistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOQualityControlHistory2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐQualityControlHistory(ctx context.Context, sel ast.SelectionSet, v *models.QualityControlHistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QualityControlHistory(ctx, sel, v)
}

func (ec *executionContext) marshalORequest2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRequest(ctx context.Context, sel ast.SelectionSet, v models.Request) graphql.Marshaler {
	return ec._Request(ctx, sel, &v)
}

func (ec *executionContext) marshalORequest2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRequest(ctx context.Context, sel ast.SelectionSet, v []*models.Request) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORequest2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORequest2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRequest(ctx context.Context, sel ast.SelectionSet, v *models.Request) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Request(ctx, sel, v)
}

func (ec *executionContext) unmarshalORequestFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRequestFilterInput(ctx context.Context, v interface{}) (models.RequestFilterInput, error) {
	return ec.unmarshalInputRequestFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalORequestFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRequestFilterInput(ctx context.Context, v interface{}) (*models.RequestFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORequestFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐRequestFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOReview2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐReview(ctx context.Context, sel ast.SelectionSet, v models.Review) graphql.Marshaler {
	return ec._Review(ctx, sel, &v)
}

func (ec *executionContext) marshalOReview2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐReview(ctx context.Context, sel ast.SelectionSet, v []*models.Review) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReview2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐReview(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOReview2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐReview(ctx context.Context, sel ast.SelectionSet, v *models.Review) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Review(ctx, sel, v)
}

func (ec *executionContext) marshalOSession2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSession(ctx context.Context, sel ast.SelectionSet, v models.Session) graphql.Marshaler {
	return ec._Session(ctx, sel, &v)
}

func (ec *executionContext) marshalOSession2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSession(ctx context.Context, sel ast.SelectionSet, v []*models.Session) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSession2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSession(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSession2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSession(ctx context.Context, sel ast.SelectionSet, v *models.Session) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Session(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSessionFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSessionFilterInput(ctx context.Context, v interface{}) (models.SessionFilterInput, error) {
	return ec.unmarshalInputSessionFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOSessionFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSessionFilterInput(ctx context.Context, v interface{}) (*models.SessionFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOSessionFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐSessionFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	return graphql.UnmarshalUpload(v)
}

func (ec *executionContext) marshalOUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	return graphql.MarshalUpload(v)
}

func (ec *executionContext) unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (*graphql.Upload, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v *graphql.Upload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, sel, *v)
}

func (ec *executionContext) marshalOUser2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v models.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalOUser2ᚕᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v []*models.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUser2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *models.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUserFilterInput(ctx context.Context, v interface{}) (models.UserFilterInput, error) {
	return ec.unmarshalInputUserFilterInput(ctx, v)
}

func (ec *executionContext) unmarshalOUserFilterInput2ᚖgithubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUserFilterInput(ctx context.Context, v interface{}) (*models.UserFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserFilterInput2githubᚗcomᚋlonmarsDevᚋbpoᚑgolangᚑgrahpqlᚋgraphqlᚋmodelsᚐUserFilterInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
